[{"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/App.js":"1","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Mobile.js":"2","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/reportWebVitals.js":"3","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Desktop.js":"4","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/mock_data.js":"5","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/SvgSection.js":"6","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/index.js":"7"},{"size":3118,"mtime":1615931829156,"results":"8","hashOfConfig":"9"},{"size":29575,"mtime":1617590940971,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1608610226311,"results":"11","hashOfConfig":"9"},{"size":29024,"mtime":1617304078600,"results":"12","hashOfConfig":"9"},{"size":3365,"mtime":1617561573413,"results":"13","hashOfConfig":"9"},{"size":3055,"mtime":1609936305537,"results":"14","hashOfConfig":"9"},{"size":700,"mtime":1615576092039,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"yl3hm3",{"filePath":"20","messages":"21","errorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/App.js",["36","37"],"import React from \"react\";\nimport Tabletop from \"tabletop\";\nimport Desktop from \"./Desktop.js\";\nimport Mobile from \"./Mobile.js\";\nimport SvgSection from \"./SvgSection.js\"\nimport mock_data from \"./mock_data.js\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewportWidth: null,\n      mockData: mock_data,\n      loaded: false,\n      cmsData: null,\n      toggleEN: false,\n      mainCmsDataFR: null,\n      mainCmsDataEN: null\n    };\n  }\n\n  componentDidMount(){\n\n    setTimeout(() => {\n      this.setState({\n        loaded: true\n      });\n    });\n\n    document.addEventListener('gesturestart', function (e) {\n        e.preventDefault();\n    });\n\n      Tabletop.init({\n      key: '1N5WFhAZpqz6Spgr6pQowDRJLmr_Ni99_sh95TCArGQ8',\n      callback: googleData => {\n        this.setState({\n          cmsData: googleData\n        }, () => {\n\n          let {cmsData} = this.state;\n          let mainCmsDataFR = cmsData\n          .slice(0, 9)\n          .map((ele, index) => {\n            return {\n              headlines: ele.headlines_fr,\n              paragraph: ele.paragraph_fr\n            }\n          })\n\n          let mainCmsDataEN = cmsData\n          .slice(0, 9)\n          .map((ele, index) => {\n            return {\n              headlines: ele.headlines_en,\n              paragraph: ele.paragraph_en\n            }\n          })\n\n          this.setState({\n            mainCmsDataFR,\n            mainCmsDataEN\n          })\n\n        })\n      },\n      simpleSheet: true\n    })\n\n\n    window.addEventListener(\"resize\", this.resizeHandler);\n    let viewportWidth = window.innerWidth;\n\n    this.setState({\n      viewportWidth\n    });\n  }\n\n\n  resizeHandler = () => {\n\n    let viewportWidth = window.innerWidth;\n    this.setState({\n      viewportWidth\n    });\n  }\n\n  handleImageLoadedLoadingScreen = () => {\n\n    let viewportHeight = window.innerHeight;\n\n    let aligningThirdDiv = this.defineValueFromPorcentage(2, viewportHeight);\n    let loadingImg = document.getElementById(\"loading_img\");\n    let loadingImgInitialHeight = loadingImg.getBoundingClientRect().height;\n    let loadingImgStrech = (viewportHeight + 1.4 * aligningThirdDiv)/loadingImgInitialHeight;\n    loadingImg.style.transform = `scaleY(${loadingImgStrech})`;\n    \n  }\n\n  defineValueFromPorcentage = (percentage, total) => {\n    let value = (percentage * total) / 100;\n    return value;\n  };\n\n  toggleEN = () => {\n    this.setState({\n      toggleEN: !this.state.toggleEN\n    })\n  }\n\n  render() {\n\n    let {mockData, viewportWidth, cmsData} = this.state;\n\n    if(!cmsData || !this.state.loaded){\n      return (\n        <div\n          style={{backgroundColor: \"#EBFF00\"}}\n          className=\"loading_screen\">\n        </div>\n      )\n    }\n\n    if(viewportWidth > 600){\n      return (\n        <div>\n          <Desktop\n            toggleEN={this.toggleEN}\n            {...this.state}/>\n        </div>\n      );\n    }else{\n      return (\n        <div>\n          <Mobile\n            toggleEN={this.toggleEN}\n            {...this.state}/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n",["38","39"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Mobile.js",["40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/reportWebVitals.js",[],["88","89"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Desktop.js",["90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110"],"import React from \"react\";\nimport {SlideDown} from \"react-slidedown\";\nimport \"react-slidedown/lib/slidedown.css\";\nimport mockData from \"./mock_data.js\";\nimport \"./App.css\";\n\nclass Desktop extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toggleOnHoverCallCTA: false,\n      toggleEN: false,\n      isClosedInfoPanel: true,\n      selectedlan: \"fr\",\n      loaded: false,\n      counter: 0,\n      selectedDivId: 0,\n      scrollDirection: null,\n      updatedHeightOfPage: null,\n      viewportHeight: null,\n      viewportWidth: null,\n      mockData: null,\n      mainCmsDataSubArrays: null,\n      dataToDivs: null,\n      originalImageHeight: null,\n      originalImageWidth: null,\n      originalImageStretch: null,\n      isTriggeredInfoContent: false,\n      mainCmsData: null,\n      infoCmsData: null,\n      scroll: 0,\n      originalImageStretchArray: []\n    };\n  }\n\n  componentDidMount() {\n\n    setTimeout(() => {\n      this.setState({\n        loaded: true\n      });\n    }, 1500);\n\n    document.addEventListener(\"wheel\", this.scrollHandler);\n    window.addEventListener(\"resize\", this.resizeHandler);\n    let {cmsData} = this.props;\n    let mainCmsData = cmsData.slice(0, 9);\n    let infoCmsData = cmsData.slice(9, 14);\n\n    let viewportHeight = window.innerHeight;\n    let viewportWidth = this.props.viewportWidth;\n\n    let updatedHeightOfPage = viewportHeight * 8.5;\n    document.body.style.height = `${updatedHeightOfPage}px`;\n\n    this.setState(\n      {\n        updatedHeightOfPage,\n        viewportHeight,\n        viewportWidth,\n        mockData,\n        mainCmsData,\n        infoCmsData\n      },\n      () => {\n        let {mainCmsData} = this.state;\n\n        let mainCmsDataSubArrays = [\n          mainCmsData.slice(0, 3),\n          mainCmsData.slice(3, 6),\n          mainCmsData.slice(6, 9)\n        ];\n\n        this.setState(\n          {\n            mainCmsDataSubArrays\n          },\n          () => {\n            this.renderDataToDivs(this.state.selectedlan);\n          }\n        );\n      }\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n\n    let firstImg = document.querySelector(`#container_div_0 img`);\n    let firstContainer = document.getElementById(\"container_div_0\");\n\n    let secondImg = document.querySelector(`#container_div_1 img`);\n    let secondContainer = document.getElementById(\"container_div_1\");\n\n    let thirdImg = document.querySelector(`#container_div_2 img`);\n    let thirdContainer = document.getElementById(\"container_div_2\");\n\n\n    const {originalImageStretchArray, viewportHeight, loaded} = this.state;\n\n\n    if(!window.pageYOffset\n      && firstImg\n      && originalImageStretchArray\n      && viewportHeight){\n\n        // optimize;\n        firstImg.style.transform = `scaleY(${originalImageStretchArray[0]})`;\n        firstContainer.style.height = `${this.state.viewportHeight}px`;\n\n        secondImg.style.transform = `scaleY(${originalImageStretchArray[1]})`;\n        secondContainer.style.height = `${this.state.viewportHeight}px`;\n\n        thirdImg.style.transform = `scaleY(${originalImageStretchArray[2]})`;\n        thirdContainer.style.height = `${this.state.viewportHeight}px`;\n    }\n\n    let counter = this.state.counter;\n    let divTextH1 = [...document.getElementsByClassName(\"div_text_h1\")];\n    let divTextP = [...document.getElementsByClassName(\"div_text_p\")];\n\n    let {mainCmsDataSubArrays, selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    if (selectedlan !== prevState.selectedlan) {\n      window.scrollTo(0, 0);\n    }\n\n\n    if (counter !== prevState.counter) {\n      if (counter >= 0 && counter < 6) {\n        this.setState({\n          isDisplayFooter: false\n        });\n\n        let mainCmsDataSubArraysFirstRow = mainCmsDataSubArrays[0];\n\n        divTextH1.map((ele, index) => {\n          ele.innerHTML =\n            mainCmsDataSubArraysFirstRow[index][selectedLanHeadlines];\n        });\n        divTextP.map((ele, index) => {\n          ele.innerHTML = mainCmsDataSubArraysFirstRow[index][selectedLanPara];\n        });\n      }\n\n      if (counter >= 6 && counter < 12) {\n        this.setState({\n          isDisplayFooter: false\n        });\n\n        let mainCmsDataSubArraysSecondRow = mainCmsDataSubArrays[1];\n\n        divTextH1.map((ele, index) => {\n          ele.innerHTML =\n            mainCmsDataSubArraysSecondRow[index][selectedLanHeadlines];\n        });\n        divTextP.map((ele, index) => {\n          ele.innerHTML = mainCmsDataSubArraysSecondRow[index][selectedLanPara];\n        });\n      }\n\n\n      if (counter === 12) {\n        window.onscroll = ev => {\n          if (\n            window.innerHeight + window.scrollY >=\n            document.body.offsetHeight - 900\n          ) {\n            this.setState({\n              isDisplayFooter: true\n            });\n          } else {\n            this.setState({\n              isDisplayFooter: false\n            });\n          }\n        };\n\n        let mainCmsDataSubArraysThirdRow = mainCmsDataSubArrays[2];\n\n        divTextH1.map((ele, index) => {\n          ele.innerHTML =\n            mainCmsDataSubArraysThirdRow[index][selectedLanHeadlines];\n        });\n        divTextP.map((ele, index) => {\n          ele.innerHTML = mainCmsDataSubArraysThirdRow[index][selectedLanPara];\n        });\n      }\n    }\n  }\n\n  toggleEN = () => {\n    this.setState(\n      {\n        toggleEN: !this.state.toggleEN,\n      },\n      () => {\n        if (this.state.toggleEN) {\n          this.setState(\n            {\n              selectedlan: \"en\"\n            },\n            () => {\n              this.renderDataToDivs(this.state.selectedlan);\n            }\n          );\n        } else {\n          this.setState(\n            {\n              selectedlan: \"fr\"\n            },\n            () => {\n              this.renderDataToDivs(this.state.selectedlan);\n            }\n          );\n        }\n      }\n    );\n  };\n\n\n  handleImageLoaded = (divID, index) => {\n    let viewportHeight = this.state.viewportHeight;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n\n    let aligningThirdDiv = this.defineValueFromPorcentage(2.2, viewportHeight);\n    let originalImageHeight = img.getBoundingClientRect().height;\n    let originalImageWidth = img.getBoundingClientRect().width;\n\n    let originalImageStretch =\n      (viewportHeight + 1.4 * aligningThirdDiv) / originalImageHeight;\n\n\n    this.setState({\n      originalImageHeight,\n      originalImageStretch,\n      originalImageWidth,\n      originalImageStretchArray : [\n          ...this.state.originalImageStretchArray,\n          originalImageStretch\n      ]\n    }, () => {\n\n\n      let imgStretch = this.state.originalImageStretchArray[index];\n      imgContainer.style.height = viewportHeight + \"px\";\n      // img.style.transform = `scaleY(${imgStretch})`;\n\n      img.animate(\n        [\n          { transform: `scaleY(1)` },\n          { transform: `scaleY(${imgStretch})` },\n        ], {\n          duration: 1500,\n          easing: \"ease\",\n        }\n      );\n\n    });\n  };\n\n\n  renderDataToDivs = selectedlan => {\n    let mainCmsDataSubArraysFirstRow = this.state.mainCmsDataSubArrays[0];\n    let dataToDivs = mockData.entriesImgDesktop.map((ele, index) => {\n      let divID = `container_div_${index}`;\n      let selectedLanHeadlines = `headlines_${selectedlan}`;\n      let selectedLanPara = `paragraph_${selectedlan}`;\n      let imgID = `svg_${index}`;\n\n      return (\n        <div className=\"main_vertical_container_inner\">\n          <div id={divID} className=\"svgs_containers\">\n            <img\n              className=\"svgs\"\n              onLoad={() => {\n                this.handleImageLoaded(divID, index);\n              }}\n              id={imgID}\n              src={ele.img}\n              alt={ele.img}\n            />\n          </div>\n          <div className=\"text_container\">\n            <h1 className=\"div_text_h1\">\n              {mainCmsDataSubArraysFirstRow[index][selectedLanHeadlines]}\n            </h1>\n            <p className=\"div_text_p\">\n              {mainCmsDataSubArraysFirstRow[index][selectedLanPara]}\n            </p>\n          </div>\n        </div>\n      );\n    });\n    this.setState({\n      dataToDivs\n    });\n  };\n\n  resizeHandler = () => {\n    let viewportHeight = window.innerHeight;\n\n    this.setState(\n      {\n        viewportHeight\n      },\n      () => {\n        let svgs = [...document.getElementsByClassName(\"svgs\")];\n        let svgContainers = [\n          ...document.getElementsByClassName(\"svgs_containers\")\n        ];\n\n        svgs.map((ele, index) => {\n          if (index === this.state.selectedDivId) {\n            let heightSvg = ele.getBoundingClientRect().height;\n            svgContainers[index].style.height = `${heightSvg}px`;\n          } else {\n            let divID = `container_div_${index}`;\n            return this.handleResize(divID);\n          }\n        });\n      }\n    );\n  };\n\n  handleResize = divID => {\n\n    const {\n      viewportHeight,\n      originalImageHeight,\n      originalImageWidth\n    } = this.state;\n\n\n    let newWidth = document.getElementById(divID).getBoundingClientRect().width;\n    let aligningThirdDiv = this.defineValueFromPorcentage(2, viewportHeight);\n    let newHeight = newWidth/originalImageWidth*originalImageHeight;\n\n    let newImgStretch = (viewportHeight + 1.4 * aligningThirdDiv) / newHeight;\n\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n    img.style.transform = `scaleY(${newImgStretch})`;\n\n    let imgHeighPx = img.getBoundingClientRect().height;\n    document.getElementById(divID).style.height = `${imgHeighPx}px`;\n\n  };\n\n  // scrollHandler here;\n  scrollHandler = event => {\n    let numberOfPixelScrolled = window.scrollY;\n    let viewportHeight = this.state.viewportHeight;\n\n\n    if (!this.state.originalImageStretch\n      || !this.state.loaded) {\n      return null;\n    }\n\n    let deltaY = event.deltaY;\n    if (deltaY < 0) {\n      this.setState({\n        scrollDirection: \"up\"\n      });\n    } else {\n      this.setState({\n        scrollDirection: \"down\"\n      });\n    }\n\n    // to force block divs;\n    this.setState({\n      scroll: numberOfPixelScrolled\n    });\n\n    if (numberOfPixelScrolled > 0 && numberOfPixelScrolled < viewportHeight*0.5) {\n      this.handleResetPreviousDivHeightUp(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 0,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight*0.5 &&\n      numberOfPixelScrolled < viewportHeight *1\n    ) {\n      this.handleResetPreviousDivHeightUp(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 1,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 1 &&\n      numberOfPixelScrolled < viewportHeight * 1.5\n    ) {\n      this.handleResetPreviousDivHeightDown(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 2,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 1.5 &&\n      numberOfPixelScrolled < viewportHeight * 2\n    ) {\n      this.handleResetPreviousDivHeightUp(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 3,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 2 &&\n      numberOfPixelScrolled < viewportHeight * 2.5\n    ) {\n      this.handleResetPreviousDivHeightDown(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 4,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 2.5 &&\n      numberOfPixelScrolled < viewportHeight * 3\n    ) {\n      this.handleResetPreviousDivHeightUp(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 5,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 3 &&\n      numberOfPixelScrolled < viewportHeight * 3.5\n    ) {\n      this.handleResetPreviousDivHeightDown(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 6,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 3.5 &&\n      numberOfPixelScrolled < viewportHeight * 4\n    ) {\n      this.handleResetPreviousDivHeightUp(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 7,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 4 &&\n      numberOfPixelScrolled < viewportHeight * 4.5\n    ) {\n      this.handleResetPreviousDivHeightDown(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 8,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 4.5 &&\n      numberOfPixelScrolled < viewportHeight * 5\n    ) {\n      this.handleResetPreviousDivHeightUp(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 9,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 5 &&\n      numberOfPixelScrolled < viewportHeight * 5.5\n    ) {\n      this.handleResetPreviousDivHeightDown(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 10,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 5.5 &&\n      numberOfPixelScrolled < viewportHeight * 6\n    ) {\n      this.handleResetPreviousDivHeightUp(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 11,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 6 &&\n      numberOfPixelScrolled < viewportHeight * 6.5\n    ) {\n      this.handleResetPreviousDivHeightDown(this.state.selectedDivId);\n      this.setState(\n        {\n          counter: 12,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, 0, \"up\", true);\n          this.handleAnimation(counter, 1, \"up\", true);\n          this.handleAnimation(counter, 2, \"up\", true);\n        }\n      );\n    }\n  };\n\n  handleAnimation = (counter, selectedDivId, animDirection, all) => {\n    let divID = `container_div_${selectedDivId}`;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n    let numberOfPixelScrolled = window.scrollY;\n    let viewportHeight = this.state.viewportHeight/2;\n    let originalImageStretch = this.state.originalImageStretch;\n\n    if (!all) {\n\n      let scrolledPorcentage = this.definePorcentage(\n        numberOfPixelScrolled - this.state.counter * viewportHeight,\n        viewportHeight\n      );\n      let remainingScrollPorcentage = 100 - scrolledPorcentage;\n      let translateYPorcentageUp = this.defineValueFromPorcentage(\n        remainingScrollPorcentage,\n        originalImageStretch\n      );\n      let translateYPorcentageDown = this.defineValueFromPorcentage(\n        scrolledPorcentage,\n        originalImageStretch\n      );\n\n      if (animDirection === \"up\") {\n        img.style.transform = `scaleY(${translateYPorcentageUp})`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n\n\n        if (translateYPorcentageUp < 1) {\n          if (selectedDivId === 0) {\n            img.style.transform = `scaleY(1.035)`;\n          }\n          if (selectedDivId === 1) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 2) {\n            img.style.transform = `scaleY(1.04)`;\n          }\n\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n      }\n\n      if (animDirection === \"down\") {\n        img.style.transform = `scaleY(${translateYPorcentageDown})`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n\n\n        if (translateYPorcentageDown < 1) {\n          if (selectedDivId === 0) {\n            img.style.transform = `scaleY(1.035)`;\n          }\n          if (selectedDivId === 1) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 2) {\n            img.style.transform = `scaleY(1.04)`;\n          }\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n      }\n    } else {\n\n      let scrolledPorcentage = this.definePorcentage(\n        numberOfPixelScrolled - this.state.counter * viewportHeight,\n        viewportHeight\n      );\n      let remainingScrollPorcentage = 100 - scrolledPorcentage;\n      let translateYPorcentageUp = this.defineValueFromPorcentage(\n        remainingScrollPorcentage,\n        originalImageStretch\n      );\n      let translateYPorcentageDown = this.defineValueFromPorcentage(\n        scrolledPorcentage,\n        originalImageStretch\n      );\n\n\n      if (animDirection === \"up\") {\n        img.style.transform = `scaleY(${translateYPorcentageUp})`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n\n        if (selectedDivId === 1) {\n          let coeffScalDivId1 = (translateYPorcentageUp * 102) / 106;\n          img.style.transform = `scaleY(${coeffScalDivId1})`;\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n\n        // 552 / 539 = rapport de la hauteur entre le S et le T\n        if (selectedDivId === 2) {\n\n          const {viewportWidth, viewportHeight} = this.state;\n          let coeffScalDivId2 = (translateYPorcentageUp * 548) / 539;\n\n          const {originalImageStretchArray} = this.state;\n          img.style.transform = `scaleY(${coeffScalDivId2})`;\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n\n        if (translateYPorcentageUp < 1) {\n          if (selectedDivId === 0) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 1) {\n            img.style.transform = `scaleY(0.95)`;\n          }\n          if (selectedDivId === 2) {\n            img.style.transform = `scaleY(1)`;\n          }\n\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n      }\n\n      if (animDirection === \"down\") {\n\n        img.style.transform = `scaleY(${translateYPorcentageDown})`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n\n\n        if (translateYPorcentageDown < 1) {\n          if (selectedDivId === 0) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 1) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 2) {\n            img.style.transform = `scaleY(1)`;\n          }\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n      }\n    }\n  };\n\n  handleResetPreviousDivHeightDown = id => {\n    let scrollDirection = this.state.scrollDirection;\n\n    if (scrollDirection === \"down\") {\n      let previousDivId = id;\n      let divID = `container_div_${previousDivId}`;\n\n      let imgContainer = document.querySelector(`#${divID}`);\n      let img = document.querySelector(`#${divID} img`);\n      let originalImageStretch = this.state.originalImageStretchArray[previousDivId];\n\n      img.style.transform = `scaleY(${originalImageStretch})`;\n      let newImgContainerHeight = img.getBoundingClientRect().height;\n      imgContainer.style.height = newImgContainerHeight + \"px\";\n\n\n    } else {\n      return null;\n    }\n  };\n\n  handleResetPreviousDivHeightUp = id => {\n    let scrollDirection = this.state.scrollDirection;\n\n    if (scrollDirection === \"down\") {\n      return null;\n    } else {\n\n      let previousDivId = id;\n      let divID = `container_div_${previousDivId}`;\n\n      let imgContainer = document.querySelector(`#${divID}`);\n      let img = document.querySelector(`#${divID} img`);\n      let originalImageStretch = this.state.originalImageStretchArray[previousDivId];\n\n      img.style.transform = `scaleY(${originalImageStretch})`;\n      let newImgContainerHeight = img.getBoundingClientRect().height;\n      imgContainer.style.height = newImgContainerHeight + \"px\";\n    }\n  };\n\n  definePorcentage = (percent, total) => {\n    let porcentage = (percent / total) * 100;\n    return porcentage;\n  };\n\n  defineValueFromPorcentage = (percentage, total) => {\n    let value = (percentage / 100) * total\n    return value;\n  };\n\n  renderDivsToDom = () => {\n    if (!this.state.dataToDivs) {\n      return \"loading\";\n    } else {\n      return this.state.dataToDivs;\n    }\n  };\n\n  renderInfo = () => {\n    if (!this.state.infoCmsData) {\n      return null;\n    }\n    return (\n      <div className=\"info_main_container\">\n        {this.renderInfoCTA()}\n        {this.renderBodyCTA()}\n      </div>\n    );\n  };\n\n  renderInfoCTA = () => {\n    return (\n      <div className=\"cta_desktop_container\">\n        <div\n          className=\"info_cta_container\"\n          onClick={this.triggerInfoContent}\n          style={this.infoCTAStyle()}\n        >\n          <img src=\"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1612842534/paprika%20-%20very%20interesting/Croix.svg\" />\n        </div>\n        <div onClick={this.toggleEN} className=\"en_cta\">\n          <span>{this.toggleENText()}</span>\n        </div>\n      </div>\n    );\n  };\n\n  toggleENText = () => {\n    if (this.state.toggleEN) {\n      return \"FR\";\n    } else {\n      return \"EN\";\n    }\n  };\n\n  triggerInfoContent = () => {\n    this.setState({\n      isClosedInfoPanel: !this.state.isClosedInfoPanel\n    });\n  };\n\n  infoCTAStyle = () => {\n    if (this.state.isClosedInfoPanel) {\n      return {\n        transform: \"rotate(0deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.5s\"\n      };\n    } else {\n      return {\n        transform: \"rotate(135deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.5s\"\n      };\n    }\n  };\n\n  renderBodyCTA = () => {\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    return (\n      <SlideDown\n        closed={this.state.isClosedInfoPanel}\n        className={\"my-dropdown-slidedown\"}\n      >\n        <div id=\"info_body_container\" className=\"info_body_container\">\n          <div className=\"info_body_container_headline\">\n            <h1>{infoCmsData[0][selectedLanHeadlines]}</h1>\n          </div>\n          <div className=\"info_body_container_ctas\">\n            <h1>{infoCmsData[0][selectedLanPara]}</h1>\n            <div className=\"info_body_container_ctas_spans\">\n            <a>\n              <span\n                id=\"body\"\n                onMouseEnter={() => this.toggleOnHoverCallCTA(\"body\")}\n                onMouseLeave={() => this.toggleOnHoverCallCTA(\"body\")}>\n                {infoCmsData[1][selectedLanHeadlines]}\n              </span>\n              </a>\n              <a\n                href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n                rel=\"noopener\"\n                target=\"_blank\"\n              >\n                <span>{infoCmsData[2][selectedLanHeadlines]}</span>\n              </a>\n              <a\n                href={infoCmsData[3][selectedLanPara]}\n                rel=\"noopener\"\n                target=\"_blank\"\n              >\n                <span>{infoCmsData[3][selectedLanHeadlines]}</span>\n              </a>\n            </div>\n          </div>\n          <div\n            onClick={this.triggerInfoContent}\n            className=\"body_cta_background_close\"\n          ></div>\n        </div>\n      </SlideDown>\n    );\n  };\n\n  toggleOnHoverCallCTA = id => {\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    this.setState(\n      {\n        toggleOnHoverCallCTA: !this.state.toggleOnHoverCallCTA\n      },\n      () => {\n        let selectedSpan = document.getElementById(id);\n\n        if (this.state.toggleOnHoverCallCTA) {\n          selectedSpan.innerHTML = \"<p>514 839-1839</p>\";\n        } else {\n          selectedSpan.innerHTML = infoCmsData[1][selectedLanHeadlines];\n        }\n      }\n    );\n  };\n\n  renderFooter = () => {\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    if (!this.state.isDisplayFooter) {\n      return null;\n    }\n    return (\n      <footer className=\"footer_desktop\">\n        <div className=\"footer_desktop_first\">\n          <h1>{infoCmsData[4][selectedLanHeadlines]}</h1>\n        </div>\n        <div className=\"footer_cta_outer\">\n          <div className=\"footer_cta\">\n            <a>\n              <div\n                id=\"footer\"\n                onMouseEnter={() => this.toggleOnHoverCallCTA(\"footer\")}\n                onMouseLeave={() => this.toggleOnHoverCallCTA(\"footer\")}\n              >\n                {infoCmsData[1][selectedLanHeadlines]}\n              </div>\n            </a>\n            <a\n              href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n              rel=\"noopener\"\n              target=\"_blank\"\n            >\n              <div>{infoCmsData[2][selectedLanHeadlines]}</div>\n            </a>\n            <a\n              href={infoCmsData[3][selectedLanPara]}\n              rel=\"noopener\"\n              target=\"_blank\"\n            >\n              <div>{infoCmsData[3][selectedLanHeadlines]}</div>\n            </a>\n          </div>\n          <div className=\"footer_copyright\">\n            <span className=\"copyright\">« VERY INTERESTING » ©2021</span>\n          </div>\n        </div>\n      </footer>\n    );\n  };\n\n\n  render() {\n\n    return (\n        <div className=\"main_vertical_container\">\n          {this.renderInfo()}\n          {this.renderDivsToDom()}\n          {this.renderFooter()}\n        </div>\n    );\n  }\n}\n\nexport default Desktop;\n","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/mock_data.js",["111"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/SvgSection.js",["112","113","114","115"],"import React from \"react\";\nimport \"./App.css\";\n\nclass SvgSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      loopCounter: 0,\n      remainingScroll: null,\n      translateYPercent: null,\n      originalImageStretch: null\n    };\n  }\n  componentDidMount() {\n\n    let props = this.props;\n    if(props.index === props.counter){\n      document.addEventListener(\"scroll\", this.scrollHandler);\n    }else{\n      return;\n    }\n  }\n\n\n  handleImageLoaded = () => {\n\n    let props = this.props;\n\n    // get the scrollHeight and viewportHeight;\n    let scrollHeight = this.props.scrollHeight;\n    let viewportHeight = this.props.viewportHeight;\n\n    // no need to repeat?\n    let index = this.props.index;\n    let divID = `container_div_${index}`;\n\n    // retrieve the imgContainer and img;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n\n\n    let imageOriginalHeight = img.getBoundingClientRect().height;\n    let originalImageStretch = viewportHeight/imageOriginalHeight;\n    imgContainer.style.height = viewportHeight + \"px\";\n    img.style.transform = `scaleY(${originalImageStretch})`;\n\n      this.setState({\n        loaded: true,\n        originalImageStretch,\n        imgContainer,\n        img\n      })\n\n  };\n\n  scrollHandler = () => {\n\n    let state = this.state;\n    let props = this.props;\n\n    if (!state.loaded) {\n      return;\n    }\n\n    let imgContainer = state.imgContainer;\n    let img = state.img;\n    let body = document.body.parentNode;\n\n    let bodyScroll = (\n      body.scrollTop || body.scrollTop)\n      / (body.scrollHeight - body.clientHeight\n    ) * 100;\n\n    let remainingScroll = 100 - bodyScroll;\n    console.log(remainingScroll, \"remainingScroll: will be fed into the translateYPercentDesc : this , state.originalImageStretch\");\n\n    let translateYPercentDesc = this.definePorcentage(\n        remainingScroll, state.originalImageStretch\n    );\n    console.log(\"------\");\n    console.log(translateYPercentDesc, \"translateYPercentDesc: to apply to the scaleY\");\n\n\n    let translateYPercentDescNumbered = Number(translateYPercentDesc);\n\n\n      img.style.transform = `scaleY(${translateYPercentDesc})`;\n      let newImgContainerHeight = img.getBoundingClientRect().height;\n      imgContainer.style.height = newImgContainerHeight + \"px\";\n  };\n\n   definePorcentage = (percent, total) => {\n        return ((percent/ 100) * total).toFixed(2)\n    }\n\n\n\n  render() {\n    if(!this.props){\n      return null;\n    }\n\n  let index = this.props.index;\n  let divID = `container_div_${index}`;\n\n\n    return (\n        <div className=\"main_vertical_container_inner\">\n          <div id={divID}>\n            <img\n              onLoad={this.handleImageLoaded}\n              src=\"https://bit.ly/3nXBlMo\"\n              alt=\"XXI\"\n            />\n          </div>\n          <div className=\"text_container\">\n            <h1>SvgSection</h1>\n            <p>fvdfv</p>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default SvgSection;\n",["116","117"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/index.js",[],{"ruleId":"118","severity":1,"message":"119","line":5,"column":8,"nodeType":"120","messageId":"121","endLine":5,"endColumn":18},{"ruleId":"118","severity":1,"message":"122","line":114,"column":10,"nodeType":"120","messageId":"121","endLine":114,"endColumn":18},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"118","severity":1,"message":"127","line":5,"column":8,"nodeType":"120","messageId":"121","endLine":5,"endColumn":23},{"ruleId":"118","severity":1,"message":"128","line":74,"column":11,"nodeType":"120","messageId":"121","endLine":74,"endColumn":23},{"ruleId":"118","severity":1,"message":"129","line":99,"column":7,"nodeType":"120","messageId":"121","endLine":99,"endColumn":13},{"ruleId":"118","severity":1,"message":"130","line":102,"column":7,"nodeType":"120","messageId":"121","endLine":102,"endColumn":20},{"ruleId":"118","severity":1,"message":"131","line":126,"column":9,"nodeType":"120","messageId":"121","endLine":126,"endColumn":27},{"ruleId":"118","severity":1,"message":"132","line":127,"column":9,"nodeType":"120","messageId":"121","endLine":127,"endColumn":18},{"ruleId":"133","severity":1,"message":"134","line":143,"column":36,"nodeType":"135","messageId":"136","endLine":143,"endColumn":38},{"ruleId":"133","severity":1,"message":"134","line":146,"column":36,"nodeType":"135","messageId":"136","endLine":146,"endColumn":38},{"ruleId":"137","severity":1,"message":"138","line":188,"column":19,"nodeType":"139","endLine":188,"endColumn":34},{"ruleId":"137","severity":1,"message":"138","line":196,"column":20,"nodeType":"139","endLine":196,"endColumn":35},{"ruleId":"137","severity":1,"message":"138","line":204,"column":20,"nodeType":"139","endLine":204,"endColumn":35},{"ruleId":"133","severity":1,"message":"134","line":222,"column":36,"nodeType":"135","messageId":"136","endLine":222,"endColumn":38},{"ruleId":"133","severity":1,"message":"134","line":229,"column":36,"nodeType":"135","messageId":"136","endLine":229,"endColumn":38},{"ruleId":"133","severity":1,"message":"134","line":236,"column":36,"nodeType":"135","messageId":"136","endLine":236,"endColumn":38},{"ruleId":"133","severity":1,"message":"134","line":239,"column":36,"nodeType":"135","messageId":"136","endLine":239,"endColumn":38},{"ruleId":"118","severity":1,"message":"140","line":272,"column":13,"nodeType":"120","messageId":"121","endLine":272,"endColumn":29},{"ruleId":"118","severity":1,"message":"141","line":300,"column":7,"nodeType":"120","messageId":"121","endLine":300,"endColumn":20},{"ruleId":"118","severity":1,"message":"142","line":316,"column":11,"nodeType":"120","messageId":"121","endLine":316,"endColumn":23},{"ruleId":"118","severity":1,"message":"143","line":328,"column":11,"nodeType":"120","messageId":"121","endLine":328,"endColumn":19},{"ruleId":"118","severity":1,"message":"142","line":329,"column":11,"nodeType":"120","messageId":"121","endLine":329,"endColumn":23},{"ruleId":"118","severity":1,"message":"144","line":362,"column":12,"nodeType":"120","messageId":"121","endLine":362,"endColumn":32},{"ruleId":"118","severity":1,"message":"145","line":362,"column":34,"nodeType":"120","messageId":"121","endLine":362,"endColumn":59},{"ruleId":"118","severity":1,"message":"146","line":367,"column":9,"nodeType":"120","messageId":"121","endLine":367,"endColumn":25},{"ruleId":"118","severity":1,"message":"147","line":386,"column":11,"nodeType":"120","messageId":"121","endLine":386,"endColumn":31},{"ruleId":"118","severity":1,"message":"148","line":387,"column":11,"nodeType":"120","messageId":"121","endLine":387,"endColumn":26},{"ruleId":"118","severity":1,"message":"149","line":393,"column":13,"nodeType":"120","messageId":"121","endLine":393,"endColumn":20},{"ruleId":"118","severity":1,"message":"150","line":394,"column":13,"nodeType":"120","messageId":"121","endLine":394,"endColumn":18},{"ruleId":"118","severity":1,"message":"151","line":462,"column":9,"nodeType":"120","messageId":"121","endLine":462,"endColumn":22},{"ruleId":"118","severity":1,"message":"145","line":463,"column":9,"nodeType":"120","messageId":"121","endLine":463,"endColumn":34},{"ruleId":"118","severity":1,"message":"152","line":464,"column":9,"nodeType":"120","messageId":"121","endLine":464,"endColumn":16},{"ruleId":"133","severity":1,"message":"134","line":471,"column":43,"nodeType":"135","messageId":"136","endLine":471,"endColumn":45},{"ruleId":"133","severity":1,"message":"134","line":474,"column":34,"nodeType":"135","messageId":"136","endLine":474,"endColumn":36},{"ruleId":"118","severity":1,"message":"142","line":490,"column":11,"nodeType":"120","messageId":"121","endLine":490,"endColumn":23},{"ruleId":"118","severity":1,"message":"151","line":655,"column":15,"nodeType":"120","messageId":"121","endLine":655,"endColumn":28},{"ruleId":"118","severity":1,"message":"152","line":676,"column":15,"nodeType":"120","messageId":"121","endLine":676,"endColumn":22},{"ruleId":"118","severity":1,"message":"151","line":677,"column":15,"nodeType":"120","messageId":"121","endLine":677,"endColumn":28},{"ruleId":"118","severity":1,"message":"142","line":692,"column":9,"nodeType":"120","messageId":"121","endLine":692,"endColumn":21},{"ruleId":"118","severity":1,"message":"153","line":700,"column":9,"nodeType":"120","messageId":"121","endLine":700,"endColumn":30},{"ruleId":"118","severity":1,"message":"154","line":736,"column":13,"nodeType":"120","messageId":"121","endLine":736,"endColumn":37},{"ruleId":"118","severity":1,"message":"155","line":823,"column":10,"nodeType":"120","messageId":"121","endLine":823,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":891,"column":12,"nodeType":"158","endLine":891,"endColumn":136},{"ruleId":"137","severity":1,"message":"138","line":958,"column":18,"nodeType":"139","endLine":958,"endColumn":33},{"ruleId":"137","severity":1,"message":"138","line":966,"column":18,"nodeType":"139","endLine":966,"endColumn":33},{"ruleId":"137","severity":1,"message":"138","line":974,"column":18,"nodeType":"139","endLine":974,"endColumn":33},{"ruleId":"156","severity":1,"message":"157","line":1005,"column":15,"nodeType":"158","endLine":1011,"endColumn":17},{"ruleId":"118","severity":1,"message":"159","line":1031,"column":7,"nodeType":"120","messageId":"121","endLine":1031,"endColumn":17},{"ruleId":"118","severity":1,"message":"154","line":1032,"column":7,"nodeType":"120","messageId":"121","endLine":1032,"endColumn":31},{"ruleId":"118","severity":1,"message":"160","line":1033,"column":7,"nodeType":"120","messageId":"121","endLine":1033,"endColumn":30},{"ruleId":"123","replacedBy":"161"},{"ruleId":"125","replacedBy":"162"},{"ruleId":"118","severity":1,"message":"129","line":99,"column":55,"nodeType":"120","messageId":"121","endLine":99,"endColumn":61},{"ruleId":"133","severity":1,"message":"134","line":140,"column":36,"nodeType":"135","messageId":"136","endLine":140,"endColumn":38},{"ruleId":"133","severity":1,"message":"134","line":144,"column":35,"nodeType":"135","messageId":"136","endLine":144,"endColumn":37},{"ruleId":"133","severity":1,"message":"134","line":156,"column":36,"nodeType":"135","messageId":"136","endLine":156,"endColumn":38},{"ruleId":"133","severity":1,"message":"134","line":160,"column":35,"nodeType":"135","messageId":"136","endLine":160,"endColumn":37},{"ruleId":"133","severity":1,"message":"134","line":184,"column":36,"nodeType":"135","messageId":"136","endLine":184,"endColumn":38},{"ruleId":"133","severity":1,"message":"134","line":188,"column":35,"nodeType":"135","messageId":"136","endLine":188,"endColumn":37},{"ruleId":"133","severity":1,"message":"163","line":317,"column":31,"nodeType":"135","messageId":"164","endLine":317,"endColumn":33},{"ruleId":"118","severity":1,"message":"142","line":345,"column":9,"nodeType":"120","messageId":"121","endLine":345,"endColumn":21},{"ruleId":"118","severity":1,"message":"151","line":606,"column":15,"nodeType":"120","messageId":"121","endLine":606,"endColumn":28},{"ruleId":"118","severity":1,"message":"165","line":713,"column":18,"nodeType":"120","messageId":"121","endLine":713,"endColumn":31},{"ruleId":"118","severity":1,"message":"166","line":713,"column":33,"nodeType":"120","messageId":"121","endLine":713,"endColumn":47},{"ruleId":"118","severity":1,"message":"145","line":716,"column":18,"nodeType":"120","messageId":"121","endLine":716,"endColumn":43},{"ruleId":"156","severity":1,"message":"157","line":841,"column":11,"nodeType":"158","endLine":841,"endColumn":135},{"ruleId":"167","severity":1,"message":"168","line":899,"column":13,"nodeType":"158","endLine":899,"endColumn":16},{"ruleId":"137","severity":1,"message":"138","line":910,"column":17,"nodeType":"139","endLine":910,"endColumn":32},{"ruleId":"137","severity":1,"message":"138","line":917,"column":17,"nodeType":"139","endLine":917,"endColumn":32},{"ruleId":"118","severity":1,"message":"148","line":937,"column":9,"nodeType":"120","messageId":"121","endLine":937,"endColumn":24},{"ruleId":"167","severity":1,"message":"168","line":972,"column":13,"nodeType":"158","endLine":972,"endColumn":16},{"ruleId":"137","severity":1,"message":"138","line":984,"column":15,"nodeType":"139","endLine":984,"endColumn":30},{"ruleId":"137","severity":1,"message":"138","line":991,"column":15,"nodeType":"139","endLine":991,"endColumn":30},{"ruleId":"118","severity":1,"message":"169","line":1,"column":7,"nodeType":"120","messageId":"121","endLine":1,"endColumn":16},{"ruleId":"118","severity":1,"message":"170","line":28,"column":9,"nodeType":"120","messageId":"121","endLine":28,"endColumn":14},{"ruleId":"118","severity":1,"message":"171","line":31,"column":9,"nodeType":"120","messageId":"121","endLine":31,"endColumn":21},{"ruleId":"118","severity":1,"message":"170","line":60,"column":9,"nodeType":"120","messageId":"121","endLine":60,"endColumn":14},{"ruleId":"118","severity":1,"message":"172","line":85,"column":9,"nodeType":"120","messageId":"121","endLine":85,"endColumn":38},{"ruleId":"123","replacedBy":"173"},{"ruleId":"125","replacedBy":"174"},"no-unused-vars","'SvgSection' is defined but never used.","Identifier","unusedVar","'mockData' is assigned a value but never used.","no-native-reassign",["175"],"no-negated-in-lhs",["176"],"'ScrollDirection' is defined but never used.","'mockDataText' is assigned a value but never used.","'loaded' is assigned a value but never used.","'resetTextDivs' is assigned a value but never used.","'imgMobileContainer' is assigned a value but never used.","'imgMobile' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'newWidthToString' is assigned a value but never used.","'animDirection' is assigned a value but never used.","'imgContainer' is assigned a value but never used.","'imgScale' is assigned a value but never used.","'originalImageStretch' is assigned a value but never used.","'originalImageStretchArray' is assigned a value but never used.","'loadingImgStrech' is assigned a value but never used.","'selectedLanHeadlines' is assigned a value but never used.","'selectedLanPara' is assigned a value but never used.","'divIDH1' is assigned a value but never used.","'divIP' is assigned a value but never used.","'selectedDivId' is assigned a value but never used.","'counter' is assigned a value but never used.","'updatedViewportHeight' is assigned a value but never used.","'originalImageHeightArray' is assigned a value but never used.","'verticalDivHeight' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'imageWidth' is assigned a value but never used.","'originalImageRatioArray' is assigned a value but never used.",["175"],["176"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'viewportWidth' is assigned a value but never used.","'viewportHeight' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'mock_data' is assigned a value but never used.","'props' is assigned a value but never used.","'scrollHeight' is assigned a value but never used.","'translateYPercentDescNumbered' is assigned a value but never used.",["175"],["176"],"no-global-assign","no-unsafe-negation"]