[{"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Desktop.js":"1","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/App.js":"2","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/index.js":"3","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/SvgSection.js":"4","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/reportWebVitals.js":"5","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Mobile.js":"6","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/mock_data.js":"7"},{"size":30997,"mtime":1618943390316,"results":"8","hashOfConfig":"9"},{"size":3034,"mtime":1618599158960,"results":"10","hashOfConfig":"9"},{"size":700,"mtime":1615576092039,"results":"11","hashOfConfig":"9"},{"size":3055,"mtime":1609936305537,"results":"12","hashOfConfig":"9"},{"size":362,"mtime":1608610226311,"results":"13","hashOfConfig":"9"},{"size":9962,"mtime":1618936897381,"results":"14","hashOfConfig":"9"},{"size":904,"mtime":1618602765011,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"yl3hm3",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Desktop.js",["38","39","40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66"],"import React from \"react\";\nimport {SlideDown} from \"react-slidedown\";\nimport \"react-slidedown/lib/slidedown.css\";\nimport mockData from \"./mock_data.js\";\nimport \"./App.css\";\n\nimport very from './img/very.svg'; \nimport intere from './img/ntere.svg'; \nimport sting from './img/sting.svg'; \nimport all from './img/sting.svg';\n\nclass Desktop extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toggleOnHoverCallCTA: false,\n      toggleEN: false,\n      isClosedInfoPanel: true,\n      selectedlan: \"fr\",\n      loaded: true,\n      counter: 0,\n      selectedDivId: 0,\n      scrollDirection: null,\n      updatedHeightOfPage: null,\n      viewportHeight: null,\n      viewportWidth: null,\n      mockData: null,\n      mainCmsDataSubArrays: null,\n      dataToDivs: null,\n      originalImageHeight: null,\n      originalImageWidth: null,\n      originalImageStretch: null,\n      isTriggeredInfoContent: false,\n      mainCmsData: null,\n      infoCmsData: null,\n      scroll: 0,\n      originalImageStretchArray: []\n    };\n  }\n\n  componentDidMount() {\n\n    document.addEventListener(\"scroll\", this.scrollHandler);\n    window.addEventListener(\"resize\", this.resizeHandler);\n    let {cmsData} = this.props;\n    let mainCmsData = cmsData.slice(0, 9);\n    let infoCmsData = cmsData.slice(9, 14);\n\n    let viewportHeight = window.innerHeight;\n    let viewportWidth = this.props.viewportWidth;\n\n    let updatedHeightOfPage = viewportHeight * 8.5;\n    document.body.style.height = `${updatedHeightOfPage}px`;\n\n    this.setState(\n      {\n        updatedHeightOfPage,\n        viewportHeight,\n        viewportWidth,\n        mockData,\n        mainCmsData,\n        infoCmsData\n      },\n      () => {\n        // Slice the data in chops for panels;\n        let {mainCmsData} = this.state;\n        let mainCmsDataSubArrays = [\n          mainCmsData.slice(0, 3),\n          mainCmsData.slice(3, 6),\n          mainCmsData.slice(6, 9)\n        ];\n        this.setState(\n          {\n            mainCmsDataSubArrays\n          },\n          () => {\n            // Once this chop is done, format these to divs;\n            this.renderDataToDivs(this.state.selectedlan);\n          }\n        );\n      }\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n    // Get these images and their divs here; \n    // or a hard block when the user reaches\n    // the bottom of the viewportHeight;\n\n    let firstImg = document.querySelector(`#container_div_0 img`);\n    let firstContainer = document.getElementById(\"container_div_0\");\n\n    let secondImg = document.querySelector(`#container_div_1 img`);\n    let secondContainer = document.getElementById(\"container_div_1\");\n\n    let thirdImg = document.querySelector(`#container_div_2 img`);\n    let thirdContainer = document.getElementById(\"container_div_2\");\n\n\n    const {\n      originalImageStretchArray, \n      selectedDivId,\n      viewportHeight, \n      viewportWidth,\n      loaded} = this.state;\n\n\n    if(originalImageStretchArray !== prevState.originalImageStretchArray){\n      if(originalImageStretchArray.length === 3){\n        setTimeout(() => {\n          this.handleImageLoaded(\"container_div_0\", 0);\n          this.handleImageLoaded(\"container_div_0\", 1);\n          this.handleImageLoaded(\"container_div_0\", 2);\n        }, 100)\n      }\n    }\n\n\n    if(!window.pageYOffset\n      && firstImg\n      && originalImageStretchArray\n      && viewportHeight){\n\n\n        firstImg.style.transform = `scaleY(${originalImageStretchArray[0]})`;\n        firstContainer.style.height = `${this.state.viewportHeight}px`;\n\n        secondImg.style.transform = `scaleY(${originalImageStretchArray[1]})`;\n        secondContainer.style.height = `${this.state.viewportHeight}px`;\n\n        thirdImg.style.transform = `scaleY(${originalImageStretchArray[2]})`;\n        thirdContainer.style.height = `${this.state.viewportHeight}px`;\n    }\n\n    let counter = this.state.counter;\n    let divTextH1 = [...document.getElementsByClassName(\"div_text_h1\")];\n    let divTextP = [...document.getElementsByClassName(\"div_text_p\")];\n\n    let {mainCmsDataSubArrays, selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    if (selectedlan !== prevState.selectedlan) {\n      window.scrollTo(0, 0);\n    }\n\n\n    if (counter !== prevState.counter) {\n      if (counter >= 0 && counter < 6) {\n\n        this.setState({\n          isDisplayFooter: false\n        });\n\n        let mainCmsDataSubArraysFirstRow = mainCmsDataSubArrays[0];\n\n        divTextH1.map((ele, index) => {\n          ele.innerHTML =\n            mainCmsDataSubArraysFirstRow[index][selectedLanHeadlines];\n        });\n        divTextP.map((ele, index) => {\n          ele.innerHTML = mainCmsDataSubArraysFirstRow[index][selectedLanPara];\n        });\n\n      }\n\n      if (counter >= 6 && counter < 12) {\n        this.setState({\n          isDisplayFooter: false\n        });\n\n        let mainCmsDataSubArraysSecondRow = mainCmsDataSubArrays[1];\n\n        divTextH1.map((ele, index) => {\n          ele.innerHTML =\n            mainCmsDataSubArraysSecondRow[index][selectedLanHeadlines];\n        });\n        divTextP.map((ele, index) => {\n          ele.innerHTML = mainCmsDataSubArraysSecondRow[index][selectedLanPara];\n        });\n      }\n\n\n      if (counter === 12) {\n\n        let valueForFooter;\n\n        if(viewportHeight > 2000){\n          valueForFooter = this.defineValueFromPorcentage(14, this.state.updatedHeightOfPage);\n        }else{\n          valueForFooter = this.defineValueFromPorcentage(12, this.state.updatedHeightOfPage);\n        }\n\n\n        window.onscroll = ev => {\n          if (\n            window.innerHeight + window.scrollY >=\n            document.body.offsetHeight - valueForFooter\n          ) {\n            this.setState({\n              isDisplayFooter: true\n            });\n          } else {\n            this.setState({\n              isDisplayFooter: false\n            });\n          }\n        };\n\n        let mainCmsDataSubArraysThirdRow = mainCmsDataSubArrays[2];\n\n        divTextH1.map((ele, index) => {\n          ele.innerHTML =\n            mainCmsDataSubArraysThirdRow[index][selectedLanHeadlines];\n        });\n        divTextP.map((ele, index) => {\n          ele.innerHTML = mainCmsDataSubArraysThirdRow[index][selectedLanPara];\n        });\n      }\n    }\n\n    if(selectedDivId !== prevState.selectedDivId){\n\n  \n      let firstImg = document.querySelector(`#container_div_0 img`);\n      let firstContainer = document.getElementById(\"container_div_0\");\n  \n      let secondImg = document.querySelector(`#container_div_1 img`);\n      let secondContainer = document.getElementById(\"container_div_1\");\n  \n      let thirdImg = document.querySelector(`#container_div_2 img`);\n      let thirdContainer = document.getElementById(\"container_div_2\");\n\n\n      if(selectedDivId === 1){\n\n        firstImg.style.transform = `scaleY(${originalImageStretchArray[0]})`;\n        firstContainer.style.height = `${this.state.viewportHeight}px`;\n\n        thirdImg.style.transform = `scaleY(${originalImageStretchArray[2]})`;\n        thirdContainer.style.height = `${this.state.viewportHeight}px`;\n        \n      }\n\n      if(selectedDivId === 2){\n\n        firstImg.style.transform = `scaleY(${originalImageStretchArray[0]})`;\n        firstContainer.style.height = `${this.state.viewportHeight}px`;\n\n        secondImg.style.transform = `scaleY(${originalImageStretchArray[1]})`;\n        secondContainer.style.height = `${this.state.viewportHeight}px`;\n\n      }\n\n      if(selectedDivId === 0){\n\n        secondImg.style.transform = `scaleY(${originalImageStretchArray[1]})`;\n        secondContainer.style.height = `${this.state.viewportHeight}px`;\n\n        thirdImg.style.transform = `scaleY(${originalImageStretchArray[2]})`;\n        thirdContainer.style.height = `${this.state.viewportHeight}px`;\n\n      }\n\n\n    }\n  }\n\n  toggleEN = () => {\n    this.setState(\n      {\n        toggleEN: !this.state.toggleEN,\n      },\n      () => {\n        if (this.state.toggleEN) {\n          this.setState(\n            {\n              selectedlan: \"en\"\n            },\n            () => {\n              this.renderDataToDivs(this.state.selectedlan);\n            }\n          );\n        } else {\n          this.setState(\n            {\n              selectedlan: \"fr\"\n            },\n            () => {\n              this.renderDataToDivs(this.state.selectedlan);\n            }\n          );\n        }\n      }\n    );\n  };\n\n\n  handleImageLoaded = (divID, index) => {\n\n\n    setTimeout(() => {\n      let divId = `container_div_${index}`;\n      let imgContainer = document.querySelector(`#${divID}`);\n      let img = document.querySelector(`#${divID} img`);\n  \n      let viewportHeight = this.state.viewportHeight;\n      let aligningThirdDiv = this.defineValueFromPorcentage(2.2, viewportHeight);\n      let originalImageHeight = img.getBoundingClientRect().height;\n      let originalImageWidth = img.getBoundingClientRect().width;\n  \n      let originalImageStretch = (viewportHeight + 1.4 * aligningThirdDiv) / originalImageHeight;\n    \n        this.setState({\n          originalImageHeight,\n          originalImageStretch,\n          originalImageWidth,\n          originalImageStretchArray : [\n              ...this.state.originalImageStretchArray,\n              originalImageStretch\n          ]\n        }, () => {\n    \n          const {\n            originalImageStretchArray\n          } = this.state;\n    \n          if(originalImageStretchArray.length === 3){\n            \n           let firstImg = document.querySelector(`#container_div_0 img`);\n          let firstContainer = document.getElementById(\"container_div_0\");\n    \n          let secondImg = document.querySelector(`#container_div_1 img`);\n          let secondContainer = document.getElementById(\"container_div_1\");\n    \n          let thirdImg = document.querySelector(`#container_div_2 img`);\n          let thirdContainer = document.getElementById(\"container_div_2\");\n    \n          // firstImg.style.transform = `scaleY(${originalImageStretchArray[0]})`\n          // secondImg.style.transform = `scaleY(${originalImageStretchArray[1]})`\n          // thirdImg.style.transform = `scaleY(${originalImageStretchArray[2]})`\n    \n    \n          // // setTimeout(()=> { \n          // //   secondImg.style.transform = `scaleY(${originalImageStretchArray[1]})`\n          // // }, 900);\n    \n          // // setTimeout(()=> { \n          // //   thirdImg.style.transform = `scaleY(${originalImageStretchArray[2]})`\n          // // }, 900);\n    \n    \n          // // this is a bug;\n          // firstImg.animate(\n          //   [\n          //     { transform: `scaleY(1)` },\n          //     { transform: `scaleY(${originalImageStretchArray[0]})` },\n          //   ], {\n          //     duration: 300,\n          //     easing: \"ease\",\n          //   }\n          // );\n    \n          // secondImg.animate(\n          //   [\n          //     { transform: `scaleY(1)` },\n          //     { transform: `scaleY(${originalImageStretchArray[1]})` },\n          //   ], {\n          //     duration: 300,\n          //     easing: \"ease\",\n          //   }\n          // );\n    \n          // thirdImg.animate(\n          //   [\n          //     { transform: `scaleY(1)` },\n          //     { transform: `scaleY(${originalImageStretchArray[2]})` },\n          //   ], {\n          //     duration: 300,\n          //     easing: \"ease\",\n          //   }\n          // );\n          }\n        });\n      }, 100);\n  };\n\n\n  renderDataToDivs = selectedlan => {\n    let mainCmsDataSubArraysFirstRow = this.state.mainCmsDataSubArrays[0];\n    let dataToDivs = mockData.entriesImgDesktop.map((ele, index) => {\n      let divID = `container_div_${index}`;\n      let selectedLanHeadlines = `headlines_${selectedlan}`;\n      let selectedLanPara = `paragraph_${selectedlan}`;\n      let imgID = `svg_${index}`;\n\n      let imgArray = [\n          very,\n          intere,\n          sting\n      ]\n\n      return (\n        <div className=\"main_vertical_container_inner\">\n          <div id={divID} className=\"svgs_containers\">\n            <img\n              className=\"svgs\"\n              onLoad={() => {\n                this.handleImageLoaded(divID, index);\n              }}\n              id={imgID}\n              src={imgArray[index]}\n              alt={ele.img}\n            />\n          </div>\n          <div className=\"text_container\">\n            <h1 className=\"div_text_h1\">\n              {mainCmsDataSubArraysFirstRow[index][selectedLanHeadlines]}\n            </h1>\n            <p className=\"div_text_p\">\n              {mainCmsDataSubArraysFirstRow[index][selectedLanPara]}\n            </p>\n          </div>\n        </div>\n      );\n    });\n    this.setState({\n      dataToDivs\n    });\n  };\n\n  resizeHandler = () => {\n    let viewportHeight = window.innerHeight;\n\n    this.setState(\n      {\n        viewportHeight\n      },\n      () => {\n        let svgs = [...document.getElementsByClassName(\"svgs\")];\n        let svgContainers = [\n          ...document.getElementsByClassName(\"svgs_containers\")\n        ];\n\n        svgs.map((ele, index) => {\n          if (index === this.state.selectedDivId) {\n            let heightSvg = ele.getBoundingClientRect().height;\n            svgContainers[index].style.height = `${heightSvg}px`;\n          } else {\n            let divID = `container_div_${index}`;\n            return this.handleResize(divID);\n          }\n        });\n      }\n    );\n  };\n\n  handleResize = divID => {\n\n    const {\n      viewportHeight,\n      originalImageHeight,\n      originalImageWidth\n    } = this.state;\n\n\n    let newWidth = document.getElementById(divID).getBoundingClientRect().width;\n    let aligningThirdDiv = this.defineValueFromPorcentage(2, viewportHeight);\n    let newHeight = newWidth/originalImageWidth*originalImageHeight;\n\n    let newImgStretch = (viewportHeight + 1.4 * aligningThirdDiv) / newHeight;\n\n    let imgContainer = document.querySelector(`#${divID}`);\n    \n    let img = document.querySelector(`#${divID} img`);\n    img.style.transform = `scaleY(${newImgStretch})`;\n\n    let imgHeighPx = img.getBoundingClientRect().height;\n    document.getElementById(divID).style.height = `${imgHeighPx}px`;\n\n  };\n\n  // scrollHandler here;\n  scrollHandler = event => {\n    \n    let numberOfPixelScrolled = window.scrollY;\n    let viewportHeight = this.state.viewportHeight;\n\n    if (!this.state.originalImageStretch\n      || !this.state.loaded) {\n      return null;\n    }\n\n\n    this.setState({\n      scroll: numberOfPixelScrolled\n    });\n\n    if (numberOfPixelScrolled > 0 && numberOfPixelScrolled < viewportHeight*0.5) {\n      this.setState(\n        {\n          counter: 0,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight*0.5 &&\n      numberOfPixelScrolled < viewportHeight *1\n    ) {\n      this.setState(\n        {\n          counter: 1,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 1 &&\n      numberOfPixelScrolled < viewportHeight * 1.5\n    ) {\n      this.setState(\n        {\n          counter: 2,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 1.5 &&\n      numberOfPixelScrolled < viewportHeight * 2\n    ) {\n      this.setState(\n        {\n          counter: 3,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 2 &&\n      numberOfPixelScrolled < viewportHeight * 2.5\n    ) {\n\n      this.setState(\n        {\n          counter: 4,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 2.5 &&\n      numberOfPixelScrolled < viewportHeight * 3\n    ) {\n\n      this.setState(\n        {\n          counter: 5,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 3 &&\n      numberOfPixelScrolled < viewportHeight * 3.5\n    ) {\n\n      this.setState(\n        {\n          counter: 6,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 3.5 &&\n      numberOfPixelScrolled < viewportHeight * 4\n    ) {\n\n      this.setState(\n        {\n          counter: 7,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 4 &&\n      numberOfPixelScrolled < viewportHeight * 4.5\n    ) {\n      this.setState(\n        {\n          counter: 8,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 4.5 &&\n      numberOfPixelScrolled < viewportHeight * 5\n    ) {\n      this.setState(\n        {\n          counter: 9,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 5 &&\n      numberOfPixelScrolled < viewportHeight * 5.5\n    ) {\n\n      this.setState(\n        {\n          counter: 10,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 5.5 &&\n      numberOfPixelScrolled < viewportHeight * 6\n    ) {\n      this.setState(\n        {\n          counter: 11,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 6 &&\n      numberOfPixelScrolled < viewportHeight * 6.5\n    ) {\n      this.setState(\n        {\n          counter: 12,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, 0, \"up\", true);\n          this.handleAnimation(counter, 1, \"up\", true);\n          this.handleAnimation(counter, 2, \"up\", true);\n        }\n      );\n    }\n  };\n\n  handleAnimation = (counter, selectedDivId, animDirection, all) => {\n\n    let divID = `container_div_${selectedDivId}`;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n    let numberOfPixelScrolled = window.scrollY;\n    let viewportHeight = this.state.viewportHeight/2;\n    let originalImageStretch = this.state.originalImageStretchArray[selectedDivId];\n\n    if (!all) {\n\n      let scrolledPorcentage = this.definePorcentage(\n        numberOfPixelScrolled - this.state.counter * viewportHeight,\n        viewportHeight\n      );\n      let remainingScrollPorcentage = 100 - scrolledPorcentage;\n      let translateYPorcentageUp = this.defineValueFromPorcentage(\n        remainingScrollPorcentage,\n        originalImageStretch\n      );\n      let translateYPorcentageDown = this.defineValueFromPorcentage(\n        scrolledPorcentage,\n        originalImageStretch\n      );\n\n      if (animDirection === \"up\") {\n        \n        img.style.transform = `scaleY(${translateYPorcentageUp})`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n\n\n        let valueToForceBlock = originalImageStretch - 0.5;\n        if(translateYPorcentageUp > valueToForceBlock){\n\n          img.style.transform = `scaleY(${originalImageStretch})`;\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n         \n        }\n\n\n        if (translateYPorcentageUp < 1) {\n          if (selectedDivId === 0) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 1) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 2) {\n            img.style.transform = `scaleY(1)`;\n          }\n\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n      }\n\n      if (animDirection === \"down\") {\n\n      \n        img.style.transform = `scaleY(${translateYPorcentageDown})`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n\n        let valueToForceBlock = originalImageStretch - 0.5;\n        if(translateYPorcentageDown > valueToForceBlock){\n\n          img.style.transform = `scaleY(${originalImageStretch})`;\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n         \n        }\n        \n\n        if (translateYPorcentageDown < 1) {\n          if (selectedDivId === 0) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 1) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 2) {\n            img.style.transform = `scaleY(1)`;\n          }\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n      }\n\n    } else {\n\n      let scrolledPorcentage = this.definePorcentage(\n        numberOfPixelScrolled - this.state.counter * viewportHeight,\n        viewportHeight\n      );\n      let remainingScrollPorcentage = 100 - scrolledPorcentage;\n      let translateYPorcentageUp = this.defineValueFromPorcentage(\n        remainingScrollPorcentage,\n        originalImageStretch\n      );\n      let translateYPorcentageDown = this.defineValueFromPorcentage(\n        scrolledPorcentage,\n        this.state.originalImageStretchArray[3]\n      );\n\n      if (animDirection === \"up\") {\n\n\n        img.style.transform = `scaleY(${translateYPorcentageUp})`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n\n        let valueToForceBlock = originalImageStretch - 0.2;\n        if(translateYPorcentageUp > valueToForceBlock){\n\n          img.style.transform = `scaleY(${originalImageStretch})`;\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n         \n        }\n\n        if (translateYPorcentageUp < 1.8) {\n          if (selectedDivId === 0) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 1) {\n            img.style.transform = `scaleY(0.95)`;\n          }\n          if (selectedDivId === 2) {\n            img.style.transform = `scaleY(1)`;\n          }\n\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n      }\n    }\n  };\n\n\n  definePorcentage = (percent, total) => {\n    let porcentage = (percent / total) * 100;\n    return porcentage;\n  };\n\n  defineValueFromPorcentage = (percentage, total) => {\n    let value = (percentage / 100) * total\n    return value;\n  };\n\n  renderDivsToDom = () => {\n    if (!this.state.dataToDivs) {\n      return \"loading\";\n    } else {\n      return this.state.dataToDivs;\n    }\n  };\n\n  renderInfo = () => {\n    if (!this.state.infoCmsData) {\n      return null;\n    }\n    return (\n      <div className=\"info_main_container\">\n        {this.renderInfoCTA()}\n        {this.renderBodyCTA()}\n      </div>\n    );\n  };\n\n  renderInfoCTA = () => {\n    return (\n      <div className=\"cta_desktop_container\">\n        <div\n          className=\"info_cta_container\"\n          onClick={this.triggerInfoContent}\n          style={this.infoCTAStyle()}\n        >\n          <img src=\"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1612842534/paprika%20-%20very%20interesting/Croix.svg\" />\n        </div>\n        <div onClick={this.toggleEN} className=\"en_cta\">\n          <span>{this.toggleENText()}</span>\n        </div>\n      </div>\n    );\n  };\n\n  toggleENText = () => {\n    if (this.state.toggleEN) {\n      return \"FR\";\n    } else {\n      return \"EN\";\n    }\n  };\n\n  triggerInfoContent = () => {\n    this.setState({\n      isClosedInfoPanel: !this.state.isClosedInfoPanel\n    });\n  };\n\n  infoCTAStyle = () => {\n    if (this.state.isClosedInfoPanel) {\n      return {\n        transform: \"rotate(0deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.5s\"\n      };\n    } else {\n      return {\n        transform: \"rotate(135deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.5s\"\n      };\n    }\n  };\n\n  renderBodyCTA = () => {\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    return (\n      <SlideDown\n        closed={this.state.isClosedInfoPanel}\n        className={\"my-dropdown-slidedown\"}>\n        <div id=\"info_body_container\" className=\"info_body_container\">\n          <div className=\"info_body_container_headline\">\n            <h1>{infoCmsData[0][selectedLanHeadlines]}</h1>\n          </div>\n          <div className=\"info_body_container_ctas\">\n            <h1>{infoCmsData[0][selectedLanPara]}</h1>\n            <div className=\"info_body_container_ctas_spans\">\n            <a>\n              <span\n                id=\"body\"\n                onMouseEnter={() => this.toggleOnHoverCallCTA(\"body\")}\n                onMouseLeave={() => this.toggleOnHoverCallCTA(\"body\")}>\n                {infoCmsData[1][selectedLanHeadlines]}\n              </span>\n              </a>\n              <a\n                href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n                rel=\"noopener\"\n                target=\"_blank\"\n              >\n                <span>{infoCmsData[2][selectedLanHeadlines]}</span>\n              </a>\n              <a\n                href={infoCmsData[3][selectedLanPara]}\n                rel=\"noopener\"\n                target=\"_blank\"\n              >\n                <span>{infoCmsData[3][selectedLanHeadlines]}</span>\n              </a>\n            </div>\n          </div>\n          <div\n            onClick={this.triggerInfoContent}\n            className=\"body_cta_background_close\"\n          ></div>\n        </div>\n      </SlideDown>\n    );\n  };\n\n  toggleOnHoverCallCTA = id => {\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    this.setState(\n      {\n        toggleOnHoverCallCTA: !this.state.toggleOnHoverCallCTA\n      },\n      () => {\n        let selectedSpan = document.getElementById(id);\n\n        if (this.state.toggleOnHoverCallCTA) {\n          selectedSpan.innerHTML = \"<p>514 839-1839</p>\";\n        } else {\n          selectedSpan.innerHTML = infoCmsData[1][selectedLanHeadlines];\n        }\n      }\n    );\n  };\n\n  renderFooter = () => {\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    if (!this.state.isDisplayFooter) {\n      return null;\n    }\n    return (\n      <footer className=\"footer_desktop\">\n        <div className=\"footer_desktop_first\">\n          <h1>{infoCmsData[4][selectedLanHeadlines]}</h1>\n        </div>\n        <div className=\"footer_cta_outer\">\n          <div className=\"footer_cta\">\n            <a>\n              <div\n                id=\"footer\"\n                onMouseEnter={() => this.toggleOnHoverCallCTA(\"footer\")}\n                onMouseLeave={() => this.toggleOnHoverCallCTA(\"footer\")}\n              >\n                {infoCmsData[1][selectedLanHeadlines]}\n              </div>\n            </a>\n            <a\n              href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n              rel=\"noopener\"\n              target=\"_blank\"\n            >\n              <div>{infoCmsData[2][selectedLanHeadlines]}</div>\n            </a>\n            <a\n              href={infoCmsData[3][selectedLanPara]}\n              rel=\"noopener\"\n              target=\"_blank\"\n            >\n              <div>{infoCmsData[3][selectedLanHeadlines]}</div>\n            </a>\n          </div>\n          <div className=\"footer_copyright\">\n            <span className=\"copyright\">« VERY INTERESTING » ©2021</span>\n          </div>\n        </div>\n      </footer>\n    );\n  };\n\n\n  render() {\n\n    const { \n      originalImageStretchArray,\n      scrollDirection\n    } = this.state;\n\n    let style = {\n      position: \"fixed\",\n      top: 0,\n      right: 0,\n      display: \"none\",\n      backgroundColor: \"yellow\",\n    }\n    \n    return (\n        <div className=\"main_vertical_container\">\n          {this.renderInfo()}\n          {this.renderDivsToDom()}\n          {this.renderFooter()}\n          <div style={style}>\n            {scrollDirection} -\n            {originalImageStretchArray[0]} - \n            {originalImageStretchArray[1]} - \n            {originalImageStretchArray[2]}\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default Desktop;\n","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/App.js",["67","68"],"import React from \"react\";\nimport Tabletop from \"tabletop\";\nimport Desktop from \"./Desktop.js\";\nimport Mobile from \"./Mobile.js\";\nimport SvgSection from \"./SvgSection.js\"\nimport mock_data from \"./mock_data.js\";\nimport \"./App.css\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewportWidth: null,\n      mockData: mock_data,\n      loaded: true,\n      cmsData: null,\n      toggleEN: false,\n      mainCmsDataFR: null,\n      mainCmsDataEN: null\n    };\n  }\n\n  componentDidMount(){\n\n    document.addEventListener('gesturestart', function (e) {\n        e.preventDefault();\n    });\n\n      Tabletop.init({\n      key: '1N5WFhAZpqz6Spgr6pQowDRJLmr_Ni99_sh95TCArGQ8',\n      callback: googleData => {\n        this.setState({\n          cmsData: googleData\n        }, () => {\n\n          let {cmsData} = this.state;\n          let mainCmsDataFR = cmsData\n          .slice(0, 9)\n          .map((ele, index) => {\n            return {\n              headlines: ele.headlines_fr,\n              paragraph: ele.paragraph_fr\n            }\n          })\n\n          let mainCmsDataEN = cmsData\n          .slice(0, 9)\n          .map((ele, index) => {\n            return {\n              headlines: ele.headlines_en,\n              paragraph: ele.paragraph_en\n            }\n          })\n\n          this.setState({\n            mainCmsDataFR,\n            mainCmsDataEN\n          })\n\n        })\n      },\n      simpleSheet: true\n    })\n\n\n    window.addEventListener(\"resize\", this.resizeHandler);\n    let viewportWidth = window.innerWidth;\n\n    this.setState({\n      viewportWidth\n    });\n  }\n\n\n  resizeHandler = () => {\n\n    let viewportWidth = window.innerWidth;\n    this.setState({\n      viewportWidth\n    });\n  }\n\n  handleImageLoadedLoadingScreen = () => {\n\n    let viewportHeight = window.innerHeight;\n\n    let aligningThirdDiv = this.defineValueFromPorcentage(2, viewportHeight);\n    let loadingImg = document.getElementById(\"loading_img\");\n    let loadingImgInitialHeight = loadingImg.getBoundingClientRect().height;\n    let loadingImgStrech = (viewportHeight + 1.4 * aligningThirdDiv)/loadingImgInitialHeight;\n    loadingImg.style.transform = `scaleY(${loadingImgStrech})`;\n    \n  }\n\n  defineValueFromPorcentage = (percentage, total) => {\n    let value = (percentage * total) / 100;\n    return value;\n  };\n\n  toggleEN = () => {\n    this.setState({\n      toggleEN: !this.state.toggleEN\n    })\n  }\n\n  render() {\n\n    let {mockData, viewportWidth, cmsData} = this.state;\n\n    if(!cmsData || !this.state.loaded){\n      return (\n        <div\n          style={{backgroundColor: \"#EBFF00\"}}\n          className=\"loading_screen\">\n        </div>\n      )\n    }\n\n    if(viewportWidth > 1224){\n      return (\n        <div>\n          <Desktop\n            toggleEN={this.toggleEN}\n            {...this.state}/>\n        </div>\n      );\n    }else{\n      return (\n        <div>\n          <Mobile\n            toggleEN={this.toggleEN}\n            {...this.state}/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n",["69","70"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/index.js",[],["71","72"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/SvgSection.js",["73","74","75","76"],"import React from \"react\";\nimport \"./App.css\";\n\nclass SvgSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      loopCounter: 0,\n      remainingScroll: null,\n      translateYPercent: null,\n      originalImageStretch: null\n    };\n  }\n  componentDidMount() {\n\n    let props = this.props;\n    if(props.index === props.counter){\n      document.addEventListener(\"scroll\", this.scrollHandler);\n    }else{\n      return;\n    }\n  }\n\n\n  handleImageLoaded = () => {\n\n    let props = this.props;\n\n    // get the scrollHeight and viewportHeight;\n    let scrollHeight = this.props.scrollHeight;\n    let viewportHeight = this.props.viewportHeight;\n\n    // no need to repeat?\n    let index = this.props.index;\n    let divID = `container_div_${index}`;\n\n    // retrieve the imgContainer and img;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n\n\n    let imageOriginalHeight = img.getBoundingClientRect().height;\n    let originalImageStretch = viewportHeight/imageOriginalHeight;\n    imgContainer.style.height = viewportHeight + \"px\";\n    img.style.transform = `scaleY(${originalImageStretch})`;\n\n      this.setState({\n        loaded: true,\n        originalImageStretch,\n        imgContainer,\n        img\n      })\n\n  };\n\n  scrollHandler = () => {\n\n    let state = this.state;\n    let props = this.props;\n\n    if (!state.loaded) {\n      return;\n    }\n\n    let imgContainer = state.imgContainer;\n    let img = state.img;\n    let body = document.body.parentNode;\n\n    let bodyScroll = (\n      body.scrollTop || body.scrollTop)\n      / (body.scrollHeight - body.clientHeight\n    ) * 100;\n\n    let remainingScroll = 100 - bodyScroll;\n    console.log(remainingScroll, \"remainingScroll: will be fed into the translateYPercentDesc : this , state.originalImageStretch\");\n\n    let translateYPercentDesc = this.definePorcentage(\n        remainingScroll, state.originalImageStretch\n    );\n    console.log(\"------\");\n    console.log(translateYPercentDesc, \"translateYPercentDesc: to apply to the scaleY\");\n\n\n    let translateYPercentDescNumbered = Number(translateYPercentDesc);\n\n\n      img.style.transform = `scaleY(${translateYPercentDesc})`;\n      let newImgContainerHeight = img.getBoundingClientRect().height;\n      imgContainer.style.height = newImgContainerHeight + \"px\";\n  };\n\n   definePorcentage = (percent, total) => {\n        return ((percent/ 100) * total).toFixed(2)\n    }\n\n\n\n  render() {\n    if(!this.props){\n      return null;\n    }\n\n  let index = this.props.index;\n  let divID = `container_div_${index}`;\n\n\n    return (\n        <div className=\"main_vertical_container_inner\">\n          <div id={divID}>\n            <img\n              onLoad={this.handleImageLoaded}\n              src=\"https://bit.ly/3nXBlMo\"\n              alt=\"XXI\"\n            />\n          </div>\n          <div className=\"text_container\">\n            <h1>SvgSection</h1>\n            <p>fvdfv</p>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default SvgSection;\n",["77","78"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/reportWebVitals.js",[],["79","80"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Mobile.js",["81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/mock_data.js",["99"],"\nconst mock_data = module.exports = {\n  entriesImgDesktop: [\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1618381696/paprika%20-%20very%20interesting/svg_6/very.svg\"},\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1618381695/paprika%20-%20very%20interesting/svg_6/ntere.svg\"},\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1618381695/paprika%20-%20very%20interesting/svg_6/sting.svg\"},\n  ],\n  entriesMobile: [\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1612818874/paprika%20-%20very%20interesting/M01VERYINTE_v3.svg\"},\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1610211325/paprika%20-%20very%20interesting/M02RESTING.svg\"},\n  ],\n  loadingImg: [\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1613353861/paprika%20-%20very%20interesting/VERYINTERESTING.svg\"}\n  ],\n};\n",{"ruleId":"100","severity":1,"message":"101","line":10,"column":8,"nodeType":"102","messageId":"103","endLine":10,"endColumn":11},{"ruleId":"100","severity":1,"message":"104","line":105,"column":7,"nodeType":"102","messageId":"103","endLine":105,"endColumn":20},{"ruleId":"100","severity":1,"message":"105","line":106,"column":7,"nodeType":"102","messageId":"103","endLine":106,"endColumn":13},{"ruleId":"106","severity":1,"message":"107","line":159,"column":36,"nodeType":"108","messageId":"109","endLine":159,"endColumn":38},{"ruleId":"106","severity":1,"message":"107","line":163,"column":35,"nodeType":"108","messageId":"109","endLine":163,"endColumn":37},{"ruleId":"106","severity":1,"message":"107","line":176,"column":36,"nodeType":"108","messageId":"109","endLine":176,"endColumn":38},{"ruleId":"106","severity":1,"message":"107","line":180,"column":35,"nodeType":"108","messageId":"109","endLine":180,"endColumn":37},{"ruleId":"106","severity":1,"message":"107","line":214,"column":36,"nodeType":"108","messageId":"109","endLine":214,"endColumn":38},{"ruleId":"106","severity":1,"message":"107","line":218,"column":35,"nodeType":"108","messageId":"109","endLine":218,"endColumn":37},{"ruleId":"100","severity":1,"message":"110","line":305,"column":11,"nodeType":"102","messageId":"103","endLine":305,"endColumn":16},{"ruleId":"100","severity":1,"message":"111","line":306,"column":11,"nodeType":"102","messageId":"103","endLine":306,"endColumn":23},{"ruleId":"100","severity":1,"message":"112","line":332,"column":16,"nodeType":"102","messageId":"103","endLine":332,"endColumn":24},{"ruleId":"100","severity":1,"message":"113","line":333,"column":15,"nodeType":"102","messageId":"103","endLine":333,"endColumn":29},{"ruleId":"100","severity":1,"message":"114","line":335,"column":15,"nodeType":"102","messageId":"103","endLine":335,"endColumn":24},{"ruleId":"100","severity":1,"message":"115","line":336,"column":15,"nodeType":"102","messageId":"103","endLine":336,"endColumn":30},{"ruleId":"100","severity":1,"message":"116","line":338,"column":15,"nodeType":"102","messageId":"103","endLine":338,"endColumn":23},{"ruleId":"100","severity":1,"message":"117","line":339,"column":15,"nodeType":"102","messageId":"103","endLine":339,"endColumn":29},{"ruleId":"106","severity":1,"message":"118","line":447,"column":31,"nodeType":"108","messageId":"119","endLine":447,"endColumn":33},{"ruleId":"100","severity":1,"message":"111","line":475,"column":9,"nodeType":"102","messageId":"103","endLine":475,"endColumn":21},{"ruleId":"100","severity":1,"message":"120","line":718,"column":15,"nodeType":"102","messageId":"103","endLine":718,"endColumn":28},{"ruleId":"100","severity":1,"message":"121","line":828,"column":11,"nodeType":"102","messageId":"103","endLine":828,"endColumn":35},{"ruleId":"122","severity":1,"message":"123","line":906,"column":11,"nodeType":"124","endLine":906,"endColumn":135},{"ruleId":"125","severity":1,"message":"126","line":962,"column":13,"nodeType":"124","endLine":962,"endColumn":16},{"ruleId":"127","severity":1,"message":"128","line":973,"column":17,"nodeType":"129","endLine":973,"endColumn":32},{"ruleId":"127","severity":1,"message":"128","line":980,"column":17,"nodeType":"129","endLine":980,"endColumn":32},{"ruleId":"100","severity":1,"message":"130","line":1000,"column":9,"nodeType":"102","messageId":"103","endLine":1000,"endColumn":24},{"ruleId":"125","severity":1,"message":"126","line":1035,"column":13,"nodeType":"124","endLine":1035,"endColumn":16},{"ruleId":"127","severity":1,"message":"128","line":1047,"column":15,"nodeType":"129","endLine":1047,"endColumn":30},{"ruleId":"127","severity":1,"message":"128","line":1054,"column":15,"nodeType":"129","endLine":1054,"endColumn":30},{"ruleId":"100","severity":1,"message":"131","line":5,"column":8,"nodeType":"102","messageId":"103","endLine":5,"endColumn":18},{"ruleId":"100","severity":1,"message":"132","line":109,"column":10,"nodeType":"102","messageId":"103","endLine":109,"endColumn":18},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"133","replacedBy":"137"},{"ruleId":"135","replacedBy":"138"},{"ruleId":"100","severity":1,"message":"139","line":28,"column":9,"nodeType":"102","messageId":"103","endLine":28,"endColumn":14},{"ruleId":"100","severity":1,"message":"140","line":31,"column":9,"nodeType":"102","messageId":"103","endLine":31,"endColumn":21},{"ruleId":"100","severity":1,"message":"139","line":60,"column":9,"nodeType":"102","messageId":"103","endLine":60,"endColumn":14},{"ruleId":"100","severity":1,"message":"141","line":85,"column":9,"nodeType":"102","messageId":"103","endLine":85,"endColumn":38},{"ruleId":"133","replacedBy":"142"},{"ruleId":"135","replacedBy":"143"},{"ruleId":"133","replacedBy":"144"},{"ruleId":"135","replacedBy":"145"},{"ruleId":"100","severity":1,"message":"146","line":2,"column":10,"nodeType":"102","messageId":"103","endLine":2,"endColumn":26},{"ruleId":"100","severity":1,"message":"147","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":18},{"ruleId":"100","severity":1,"message":"148","line":7,"column":8,"nodeType":"102","messageId":"103","endLine":7,"endColumn":23},{"ruleId":"100","severity":1,"message":"149","line":95,"column":7,"nodeType":"102","messageId":"103","endLine":95,"endColumn":27},{"ruleId":"100","severity":1,"message":"150","line":96,"column":7,"nodeType":"102","messageId":"103","endLine":96,"endColumn":32},{"ruleId":"100","severity":1,"message":"120","line":123,"column":9,"nodeType":"102","messageId":"103","endLine":123,"endColumn":22},{"ruleId":"100","severity":1,"message":"150","line":124,"column":9,"nodeType":"102","messageId":"103","endLine":124,"endColumn":34},{"ruleId":"100","severity":1,"message":"151","line":125,"column":9,"nodeType":"102","messageId":"103","endLine":125,"endColumn":16},{"ruleId":"106","severity":1,"message":"107","line":132,"column":43,"nodeType":"108","messageId":"109","endLine":132,"endColumn":45},{"ruleId":"106","severity":1,"message":"107","line":135,"column":34,"nodeType":"108","messageId":"109","endLine":135,"endColumn":36},{"ruleId":"122","severity":1,"message":"123","line":165,"column":12,"nodeType":"124","endLine":165,"endColumn":136},{"ruleId":"127","severity":1,"message":"128","line":232,"column":18,"nodeType":"129","endLine":232,"endColumn":33},{"ruleId":"127","severity":1,"message":"128","line":240,"column":18,"nodeType":"129","endLine":240,"endColumn":33},{"ruleId":"127","severity":1,"message":"128","line":248,"column":18,"nodeType":"129","endLine":248,"endColumn":33},{"ruleId":"122","severity":1,"message":"123","line":274,"column":11,"nodeType":"124","endLine":280,"endColumn":13},{"ruleId":"127","severity":1,"message":"128","line":342,"column":17,"nodeType":"129","endLine":342,"endColumn":32},{"ruleId":"127","severity":1,"message":"128","line":350,"column":19,"nodeType":"129","endLine":350,"endColumn":34},{"ruleId":"127","severity":1,"message":"128","line":358,"column":19,"nodeType":"129","endLine":358,"endColumn":34},{"ruleId":"100","severity":1,"message":"152","line":2,"column":7,"nodeType":"102","messageId":"103","endLine":2,"endColumn":16},"no-unused-vars","'all' is defined but never used.","Identifier","unusedVar","'viewportWidth' is assigned a value but never used.","'loaded' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'divId' is assigned a value but never used.","'imgContainer' is assigned a value but never used.","'firstImg' is assigned a value but never used.","'firstContainer' is assigned a value but never used.","'secondImg' is assigned a value but never used.","'secondContainer' is assigned a value but never used.","'thirdImg' is assigned a value but never used.","'thirdContainer' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'selectedDivId' is assigned a value but never used.","'translateYPorcentageDown' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'selectedLanPara' is assigned a value but never used.","'SvgSection' is defined but never used.","'mockData' is assigned a value but never used.","no-native-reassign",["153"],"no-negated-in-lhs",["154"],["153"],["154"],"'props' is assigned a value but never used.","'scrollHeight' is assigned a value but never used.","'translateYPercentDescNumbered' is assigned a value but never used.",["153"],["154"],["153"],["154"],"'AnimateKeyframes' is defined but never used.","'ScrollSnap' is defined but never used.","'ScrollDirection' is defined but never used.","'originalImageStretch' is assigned a value but never used.","'originalImageStretchArray' is assigned a value but never used.","'counter' is assigned a value but never used.","'mock_data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]