[{"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/App.js":"1","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/TextComponent.js":"2","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/reportWebVitals.js":"3","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/index.js":"4","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/SvgSection.js":"5","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/mock_data.js":"6"},{"size":9730,"mtime":1610030031937,"results":"7","hashOfConfig":"8"},{"size":224,"mtime":1608650548095,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608610226311,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":1608610226310,"results":"11","hashOfConfig":"8"},{"size":3055,"mtime":1609936305537,"results":"12","hashOfConfig":"8"},{"size":479,"mtime":1609585754610,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"19vwpco",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/App.js",["31","32","33","34"],"import React from \"react\";\nimport SvgSection from \"./SvgSection.js\"\nimport mock_data from \"./mock_data.js\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      counter: 0,\n      selectedDivId: 0,\n      updatedHeightOfPage: null,\n      viewportHeight: null,\n      mock_data: null,\n      dataToDivs: null,\n      originalImageHeight: null,\n      originalImageStretch: null\n    };\n  }\n\n  componentDidMount(){\n\n    document.addEventListener(\"wheel\", this.scrollHandler);\n    let scrollHeight = document.documentElement.scrollHeight;\n    let viewportHeight = window.innerHeight;\n\n    // 6 here is the number of sections, to be redefined later;\n    // +1 so that it can get the viewport;\n    let updatedHeightOfPage = viewportHeight*14;\n    document.body.style.height = `${updatedHeightOfPage}px`;\n\n    this.setState({\n      updatedHeightOfPage,\n      viewportHeight,\n      mock_data\n    }, () => {\n      this.renderDataToDivs();\n    })\n  }\n\n\n  handleImageLoaded = (divID) => {\n    this.setState({\n      loaded: true\n    }, () => {\n\n      let viewportHeight = this.state.viewportHeight;\n      let imgContainer = document.querySelector(`#${divID}`);\n      let img = document.querySelector(`#${divID} img`);\n\n      let originalImageHeight = img.getBoundingClientRect().height;\n      let originalImageStretch = viewportHeight/originalImageHeight;\n\n      imgContainer.style.height = viewportHeight + \"px\";\n      img.style.transform = `scaleY(${originalImageStretch})`;\n\n      this.setState({\n        originalImageHeight,\n        originalImageStretch\n      })\n\n\n    })\n  }\n\n\n  renderDataToDivs = () => {\n\n    let mockData = this.state.mock_data;\n\n    let dataToDivs = mockData.entries.map((ele, index) => {\n      let divID = `container_div_${index}`;\n      return (\n        <div className=\"main_vertical_container_inner\">\n          <div id={divID}>\n              <img\n                onLoad={() => {this.handleImageLoaded(divID)}}\n                src={ele.img}\n                alt={ele.img}\n              />\n            </div>\n            <div className=\"text_container\">\n              <h1>SvgSection</h1>\n              <p>fvdfv</p>\n            </div>\n        </div>\n      )\n    })\n    this.setState({\n      dataToDivs\n    })\n  }\n\n\n\n  // scrollHandler here;\n  scrollHandler = (event) => {\n\n    if(!this.state.originalImageStretch){\n      return null;\n    }\n\n    let numberOfPixelScrolled = window.scrollY;\n    let viewportHeight = this.state.viewportHeight;\n\n    let originalImageStretch = this.state.originalImageStretch;\n\n    if (numberOfPixelScrolled > 0\n      && numberOfPixelScrolled < viewportHeight) {\n\n        this.setState({\n          counter: 0,\n          selectedDivId: 0\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n\n    }\n\n    if (numberOfPixelScrolled > viewportHeight\n      && numberOfPixelScrolled < viewportHeight*2) {\n\n        this.setState({\n          counter: 1,\n          selectedDivId: 0\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*2\n      && numberOfPixelScrolled < viewportHeight*3) {\n\n        this.setState({\n          counter: 2,\n          selectedDivId: 1\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*3\n      && numberOfPixelScrolled < viewportHeight*4) {\n\n        this.setState({\n          counter: 3,\n          selectedDivId: 1\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*4\n      && numberOfPixelScrolled < viewportHeight*5) {\n\n        this.setState({\n          counter: 4,\n          selectedDivId: 2\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*5\n      && numberOfPixelScrolled < viewportHeight*6) {\n\n        this.setState({\n          counter: 5,\n          selectedDivId: 2\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*6\n      && numberOfPixelScrolled < viewportHeight*7) {\n\n        this.setState({\n          counter: 6,\n          selectedDivId: 0\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*7\n      && numberOfPixelScrolled < viewportHeight*8) {\n\n        this.setState({\n          counter: 7,\n          selectedDivId: 0\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*8\n      && numberOfPixelScrolled < viewportHeight*9) {\n\n        this.setState({\n          counter: 8,\n          selectedDivId: 1\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*9\n      && numberOfPixelScrolled < viewportHeight*10) {\n\n        this.setState({\n          counter: 9,\n          selectedDivId: 1\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*10\n      && numberOfPixelScrolled < viewportHeight*11) {\n\n        this.setState({\n          counter: 10,\n          selectedDivId: 2\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*11\n      && numberOfPixelScrolled < viewportHeight*12) {\n\n        this.setState({\n          counter: 11,\n          selectedDivId: 2\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          return this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*12\n      && numberOfPixelScrolled < viewportHeight*11) {\n\n      return null;\n    }\n  };\n\n\n  handleAnimation = (counter, selectedDivId, animDirection) => {\n\n    let divID = `container_div_${selectedDivId}`;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n    let numberOfPixelScrolled = window.scrollY;\n    let viewportHeight = this.state.viewportHeight;\n    let originalImageStretch = this.state.originalImageStretch;\n\n\n    let scrolledPorcentage = this.definePorcentage(\n      (numberOfPixelScrolled - this.state.counter * viewportHeight),\n      viewportHeight)\n    ;\n    let remainingScrollPorcentage = 100-scrolledPorcentage;\n\n    let translateYPorcentageUp = this.defineValueFromPorcentage(\n        remainingScrollPorcentage,\n        originalImageStretch\n    );\n\n    let translateYPorcentageDown = this.defineValueFromPorcentage(\n        scrolledPorcentage,\n        originalImageStretch\n    );\n\n\n    if(animDirection === \"up\"){\n\n      img.style.transform = `scaleY(${translateYPorcentageUp})`;\n      let newImgContainerHeight = img.getBoundingClientRect().height;\n      imgContainer.style.height = newImgContainerHeight + \"px\";\n\n      if(translateYPorcentageUp < 1){\n        img.style.transform = `scaleY(1)`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n      }\n\n    }\n\n    if(animDirection === \"down\"){\n\n      img.style.transform = `scaleY(${translateYPorcentageDown})`;\n      let newImgContainerHeight = img.getBoundingClientRect().height;\n      imgContainer.style.height = newImgContainerHeight + \"px\";\n\n      if(translateYPorcentageDown < 1){\n        img.style.transform = `scaleY(1)`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n      }\n    }\n\n\n\n  }\n\n  definePorcentage = (percent, total) => {\n      let porcentage = (percent/total)*100;\n      return porcentage\n   }\n\n\n   defineValueFromPorcentage = (percentage, total) => {\n     let value =  ((percentage * total)/100);\n     return value;\n   }\n\n   renderDivsToDom = () => {\n     if(!this.state.dataToDivs){\n       return \"loading\"\n     }else{\n       return this.state.dataToDivs;\n     }\n   };\n\n  render() {\n\n    let state = this.state;\n\n    return (\n      <div className=\"main_vertical_container\">\n        {this.renderDivsToDom()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/TextComponent.js",[],"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/reportWebVitals.js",[],["35","36"],"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/index.js",[],["37","38"],"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/SvgSection.js",["39","40","41","42"],"import React from \"react\";\nimport \"./App.css\";\n\nclass SvgSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      loopCounter: 0,\n      remainingScroll: null,\n      translateYPercent: null,\n      originalImageStretch: null\n    };\n  }\n  componentDidMount() {\n\n    let props = this.props;\n    if(props.index === props.counter){\n      document.addEventListener(\"scroll\", this.scrollHandler);\n    }else{\n      return;\n    }\n  }\n\n\n  handleImageLoaded = () => {\n\n    let props = this.props;\n\n    // get the scrollHeight and viewportHeight;\n    let scrollHeight = this.props.scrollHeight;\n    let viewportHeight = this.props.viewportHeight;\n\n    // no need to repeat?\n    let index = this.props.index;\n    let divID = `container_div_${index}`;\n\n    // retrieve the imgContainer and img;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n\n\n    let imageOriginalHeight = img.getBoundingClientRect().height;\n    let originalImageStretch = viewportHeight/imageOriginalHeight;\n    imgContainer.style.height = viewportHeight + \"px\";\n    img.style.transform = `scaleY(${originalImageStretch})`;\n\n      this.setState({\n        loaded: true,\n        originalImageStretch,\n        imgContainer,\n        img\n      })\n\n  };\n\n  scrollHandler = () => {\n\n    let state = this.state;\n    let props = this.props;\n\n    if (!state.loaded) {\n      return;\n    }\n\n    let imgContainer = state.imgContainer;\n    let img = state.img;\n    let body = document.body.parentNode;\n\n    let bodyScroll = (\n      body.scrollTop || body.scrollTop)\n      / (body.scrollHeight - body.clientHeight\n    ) * 100;\n\n    let remainingScroll = 100 - bodyScroll;\n    console.log(remainingScroll, \"remainingScroll: will be fed into the translateYPercentDesc : this , state.originalImageStretch\");\n\n    let translateYPercentDesc = this.definePorcentage(\n        remainingScroll, state.originalImageStretch\n    );\n    console.log(\"------\");\n    console.log(translateYPercentDesc, \"translateYPercentDesc: to apply to the scaleY\");\n\n\n    let translateYPercentDescNumbered = Number(translateYPercentDesc);\n\n\n      img.style.transform = `scaleY(${translateYPercentDesc})`;\n      let newImgContainerHeight = img.getBoundingClientRect().height;\n      imgContainer.style.height = newImgContainerHeight + \"px\";\n  };\n\n   definePorcentage = (percent, total) => {\n        return ((percent/ 100) * total).toFixed(2)\n    }\n\n\n\n  render() {\n    if(!this.props){\n      return null;\n    }\n\n  let index = this.props.index;\n  let divID = `container_div_${index}`;\n\n\n    return (\n        <div className=\"main_vertical_container_inner\">\n          <div id={divID}>\n            <img\n              onLoad={this.handleImageLoaded}\n              src=\"https://bit.ly/3nXBlMo\"\n              alt=\"XXI\"\n            />\n          </div>\n          <div className=\"text_container\">\n            <h1>SvgSection</h1>\n            <p>fvdfv</p>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default SvgSection;\n","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/mock_data.js",["43"],"const mock_data = module.exports = {\n  entries: [\n    {\n      img: \"https://bit.ly/3nXBlMo\",\n      textContent: [\n        \"content 1\",\n        \"content 2\",\n        \"content 3\"\n      ]\n    },\n    {\n      img: \"https://bit.ly/3nXBlMo\",\n      textContent: [\n        \"content 1\",\n        \"content 2\",\n        \"content 3\"\n      ]\n    },\n    {\n      img: \"https://bit.ly/3nXBlMo\",\n      textContent: [\n        \"content 1\",\n        \"content 2\",\n        \"content 3\"\n      ]\n    }\n  ]\n};\n",{"ruleId":"44","severity":1,"message":"45","line":2,"column":8,"nodeType":"46","messageId":"47","endLine":2,"endColumn":18},{"ruleId":"44","severity":1,"message":"48","line":25,"column":9,"nodeType":"46","messageId":"47","endLine":25,"endColumn":21},{"ruleId":"44","severity":1,"message":"49","line":107,"column":9,"nodeType":"46","messageId":"47","endLine":107,"endColumn":29},{"ruleId":"44","severity":1,"message":"50","line":354,"column":9,"nodeType":"46","messageId":"47","endLine":354,"endColumn":14},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"51","replacedBy":"55"},{"ruleId":"53","replacedBy":"56"},{"ruleId":"44","severity":1,"message":"57","line":28,"column":9,"nodeType":"46","messageId":"47","endLine":28,"endColumn":14},{"ruleId":"44","severity":1,"message":"48","line":31,"column":9,"nodeType":"46","messageId":"47","endLine":31,"endColumn":21},{"ruleId":"44","severity":1,"message":"57","line":60,"column":9,"nodeType":"46","messageId":"47","endLine":60,"endColumn":14},{"ruleId":"44","severity":1,"message":"58","line":85,"column":9,"nodeType":"46","messageId":"47","endLine":85,"endColumn":38},{"ruleId":"44","severity":1,"message":"59","line":1,"column":7,"nodeType":"46","messageId":"47","endLine":1,"endColumn":16},"no-unused-vars","'SvgSection' is defined but never used.","Identifier","unusedVar","'scrollHeight' is assigned a value but never used.","'originalImageStretch' is assigned a value but never used.","'state' is assigned a value but never used.","no-native-reassign",["60"],"no-negated-in-lhs",["61"],["60"],["61"],"'props' is assigned a value but never used.","'translateYPercentDescNumbered' is assigned a value but never used.","'mock_data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]