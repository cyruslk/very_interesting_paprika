[{"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/App.js":"1","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Mobile.js":"2","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/reportWebVitals.js":"3","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Desktop.js":"4","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/mock_data.js":"5","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/SvgSection.js":"6","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/index.js":"7"},{"size":3118,"mtime":1618279184230,"results":"8","hashOfConfig":"9"},{"size":30996,"mtime":1618333466909,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1608610226311,"results":"11","hashOfConfig":"9"},{"size":29457,"mtime":1618342385024,"results":"12","hashOfConfig":"9"},{"size":3368,"mtime":1618342407511,"results":"13","hashOfConfig":"9"},{"size":3055,"mtime":1609936305537,"results":"14","hashOfConfig":"9"},{"size":700,"mtime":1615576092039,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"yl3hm3",{"filePath":"20","messages":"21","errorCount":0,"warningCount":57,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/App.js",["36","37"],"import React from \"react\";\nimport Tabletop from \"tabletop\";\nimport Desktop from \"./Desktop.js\";\nimport Mobile from \"./Mobile.js\";\nimport SvgSection from \"./SvgSection.js\"\nimport mock_data from \"./mock_data.js\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewportWidth: null,\n      mockData: mock_data,\n      loaded: false,\n      cmsData: null,\n      toggleEN: false,\n      mainCmsDataFR: null,\n      mainCmsDataEN: null\n    };\n  }\n\n  componentDidMount(){\n\n    setTimeout(() => {\n      this.setState({\n        loaded: true\n      });\n    });\n\n    document.addEventListener('gesturestart', function (e) {\n        e.preventDefault();\n    });\n\n      Tabletop.init({\n      key: '1N5WFhAZpqz6Spgr6pQowDRJLmr_Ni99_sh95TCArGQ8',\n      callback: googleData => {\n        this.setState({\n          cmsData: googleData\n        }, () => {\n\n          let {cmsData} = this.state;\n          let mainCmsDataFR = cmsData\n          .slice(0, 9)\n          .map((ele, index) => {\n            return {\n              headlines: ele.headlines_fr,\n              paragraph: ele.paragraph_fr\n            }\n          })\n\n          let mainCmsDataEN = cmsData\n          .slice(0, 9)\n          .map((ele, index) => {\n            return {\n              headlines: ele.headlines_en,\n              paragraph: ele.paragraph_en\n            }\n          })\n\n          this.setState({\n            mainCmsDataFR,\n            mainCmsDataEN\n          })\n\n        })\n      },\n      simpleSheet: true\n    })\n\n\n    window.addEventListener(\"resize\", this.resizeHandler);\n    let viewportWidth = window.innerWidth;\n\n    this.setState({\n      viewportWidth\n    });\n  }\n\n\n  resizeHandler = () => {\n\n    let viewportWidth = window.innerWidth;\n    this.setState({\n      viewportWidth\n    });\n  }\n\n  handleImageLoadedLoadingScreen = () => {\n\n    let viewportHeight = window.innerHeight;\n\n    let aligningThirdDiv = this.defineValueFromPorcentage(2, viewportHeight);\n    let loadingImg = document.getElementById(\"loading_img\");\n    let loadingImgInitialHeight = loadingImg.getBoundingClientRect().height;\n    let loadingImgStrech = (viewportHeight + 1.4 * aligningThirdDiv)/loadingImgInitialHeight;\n    loadingImg.style.transform = `scaleY(${loadingImgStrech})`;\n    \n  }\n\n  defineValueFromPorcentage = (percentage, total) => {\n    let value = (percentage * total) / 100;\n    return value;\n  };\n\n  toggleEN = () => {\n    this.setState({\n      toggleEN: !this.state.toggleEN\n    })\n  }\n\n  render() {\n\n    let {mockData, viewportWidth, cmsData} = this.state;\n\n    if(!cmsData || !this.state.loaded){\n      return (\n        <div\n          style={{backgroundColor: \"#EBFF00\"}}\n          className=\"loading_screen\">\n        </div>\n      )\n    }\n\n    if(viewportWidth > 800){\n      return (\n        <div>\n          <Desktop\n            toggleEN={this.toggleEN}\n            {...this.state}/>\n        </div>\n      );\n    }else{\n      return (\n        <div>\n          <Mobile\n            toggleEN={this.toggleEN}\n            {...this.state}/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n",["38","39"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Mobile.js",["40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96"],"import React from \"react\";\nimport {SlideDown} from 'react-slidedown';\nimport 'react-slidedown/lib/slidedown.css';\nimport ReactHtmlParser from 'react-html-parser';\nimport ScrollDirection from '@anakinyuen/scroll-direction';\nimport mockData from \"./mock_data.js\";\nimport \"./App.css\";\n\n\nclass Mobile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      toggleEN: false,\n      selectedlan: \"fr\",\n      animDirection: null,\n      isTriggeredInfoContent: false,\n      numberOfPixelScrolled: 0,\n      margin: 0,\n      counter: 0,\n      selectedDivId: 0,\n      scrollDirection: null,\n      updatedHeightOfPage: null,\n      viewportHeight: null,\n      viewportWidth: null,\n      mockData: null,\n      dataToDivs: null,\n      mainCmsDataSubArrays: null,\n      originalImageHeight: null,\n      originalImageStretch: null,\n      originalImageHeightArray: [],\n      originalImageStretchArray: [],\n      originalImageRatioArray: [],\n      textDivSizeArray: [],\n      screenHeightValuesArray: [],\n      scalingCoeffStart: 482/471,\n      scalingCoeffEnd: 1.15,\n      divsLastFold: null,\n      resetTextDivs: false,\n    };\n  }\n\n  componentDidMount(){\n\n    setTimeout(() => {\n      this.setState({\n        loaded: true\n      });\n    }, 1700);\n\n     document.addEventListener(\"scroll\", this.scrollHandler);\n     window.addEventListener(\"resize\", this.resizeHandler);\n\n     let viewportHeight = window.innerHeight;\n     let viewportWidth = window.innerWidth;\n     let {cmsData} = this.props;\n     let mainCmsData = cmsData.slice(0, 9);\n     let infoCmsData = cmsData.slice(9, 14);\n\n     // Init the state here;\n     let updatedHeightOfPage = viewportHeight;\n\n     this.setState({\n       updatedHeightOfPage,\n       viewportHeight,\n       viewportWidth,\n       mockData,\n       mainCmsData,\n       infoCmsData\n     }, () => {\n\n      let mockDataText = this.state.mockData.entriesText;\n      let {mainCmsData} = this.state;\n\n       let mainCmsDataSubArrays = [\n           mainCmsData.slice(0, 2),\n           mainCmsData.slice(2, 4),\n           mainCmsData.slice(4, 9),\n       ];\n\n       this.setState({\n         mainCmsDataSubArrays\n       }, () => {\n         this.renderDataToDivs(this.state.selectedlan);\n       })\n     })\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n\n    const {\n      originalImageStretch,\n      numberOfPixelScrolled,\n      viewportHeight,\n      loaded,\n      selectedDivId,\n      counter,\n      resetTextDivs,\n      selectedlan,\n      infoCmsData,\n      mainCmsDataSubArrays,\n      originalImageStretchArray,\n      originalImageHeightArray,\n      originalImageRatioArray,\n      viewportWidth,\n      scalingCoeffStart,\n      originalImageWidth,\n      animDirection\n    } = this.state;\n\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n    let firstSvg = document.getElementById(\"img_mobile_0\")\n    let imgMobileContainer = [...document.getElementsByClassName('img_mobile_container')];\n    let imgMobile = [...document.getElementsByClassName(\"img_mobile\")];\n    let divTextH1 = [...document.getElementsByClassName('div_text_h1')];\n    let divTextP = [...document.getElementsByClassName('div_text_p')];\n\n\n    if(selectedlan !== prevState.selectedlan){\n      window.scrollTo(0, 0);\n      setTimeout(() => {\n        this.resizeHandler();\n      }, 50);\n    };\n\n    if(numberOfPixelScrolled < 10\n      && originalImageStretchArray\n      && firstSvg){\n\n      firstSvg.style.transform = `rotateZ(90deg) translate(100%) scaleY(${originalImageStretchArray[0]})`;\n    }\n\n\n    // updating the data;\n    if (counter !== prevState.counter) {\n\n      if(counter >= 0 && counter < 4){\n\n      this.setState({\n        vertical: false,\n        resetTextDivs: false\n      })\n\n      let textSubArray = mainCmsDataSubArrays[0];\n        divTextH1.map((ele, index) => {\n         ele.innerHTML = textSubArray[index][selectedLanHeadlines]\n        })\n         divTextP.map((ele, index) => {\n           ele.innerHTML = textSubArray[index][selectedLanPara]\n         })\n      }\n\n      if(counter >= 4 && counter < 8){\n        this.setState({\n          vertical: false,\n          resetTextDivs: false\n        })\n\n        let verticalContentArray =  mainCmsDataSubArrays[2];\n        let divsLastFold = verticalContentArray.map((ele, index) => {\n          let id = `vertical_text_content_${index}`\n          return (\n            <div id={id}\n                className=\"vertical_text_content\">\n              <h1>{ReactHtmlParser(ele[selectedLanHeadlines])}</h1>\n              <p>{ReactHtmlParser(ele[selectedLanPara])}</p>\n            </div>\n          )\n        })\n\n        let textWidth = document\n        .getElementById(\"container_mobile_text_0\")\n        .getBoundingClientRect().width;\n\n        let renderVerticalAnimationDivContainer = () => {\n          let styling = {\n            width: `${textWidth}px`,\n            left: `-${textWidth}px`\n          }\n          return (\n            <div\n              style={styling}\n              id=\"vertical_div_main_container\">\n               {divsLastFold}\n               <div className=\"vertical_text_content footer_mobile\">\n                <h1>{infoCmsData[4][selectedLanHeadlines]}</h1>\n                <a\n                  href={\"tel:\" + infoCmsData[1][selectedLanPara]}\n                  rel=\"noopener\"\n                  target=\"_blank\">\n                <span>\n                  {infoCmsData[1][selectedLanHeadlines]}\n                </span>\n                </a>\n                 <a\n                   href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n                   rel=\"noopener\"\n                   target=\"_blank\">\n                 <span>\n                   {infoCmsData[2][selectedLanHeadlines]}\n                 </span>\n                 </a>\n                 <a\n                   href={infoCmsData[3][selectedLanPara]}\n                   rel=\"noopener\"\n                   target=\"_blank\">\n                 <span>\n                   {infoCmsData[3][selectedLanHeadlines]}\n                 </span>\n                 </a>\n                  <div className=\"footer_mobile_cta\">\n                    <p>« VERY INTERESTING » ©2021</p>\n                 </div>\n               </div>\n            </div>\n          )\n        }\n\n        this.setState({\n          divsLastFold: renderVerticalAnimationDivContainer()\n        })\n\n        let textSubArray = mainCmsDataSubArrays[1]\n        divTextH1.map((ele, index) => {\n          if(index === 0){\n            ele.innerHTML = \"<br /><br />\" + textSubArray[index][selectedLanHeadlines];\n          }else{\n            ele.innerHTML = textSubArray[index][selectedLanHeadlines]\n          }\n        })\n         divTextP.map((ele, index) => {\n           ele.innerHTML = textSubArray[index][selectedLanPara]\n         })\n      }\n\n      if(counter >= 8 && counter < 13){\n\n        divTextH1.map((ele, index) => {\n         ele.innerHTML = \"\"\n        })\n         divTextP.map((ele, index) => {\n           ele.innerHTML = \"\"\n         })\n\n        this.setState({\n          vertical: true,\n          resetTextDivs: true\n        })\n      }\n\n    };\n\n\n    if(originalImageWidth !== prevState.originalImageWidth\n      && originalImageHeightArray.length > 0){\n\n        // get the new width first;\n        // then get the height\n        // then get the new scale value;\n\n        // Take your original height. In our example, it will be 1200 pixs\n        // Take your original width. Our image has a width of 1600 pixs\n        // Divide the height by the width, e.g. 1200 / 1600 = 0.75\n        // Multiply the quotient by the preferred width, e.g. 0.75 * 300 = 225\n        // The resulting figure is your new height given in pixels.\n\n        let newWidth = originalImageWidth;\n        let newWidthToString =  Number(newWidth);\n\n        let newImgHeightArray = originalImageHeightArray\n        .map((ele, index) => {\n          return originalImageRatioArray[index] * originalImageWidth\n        });\n\n        let newImgStretchArray = newImgHeightArray\n        .map((ele, index) => {\n          if(index === 1){\n            return (viewportWidth/ele)*scalingCoeffStart\n          }else{\n            return viewportWidth/ele\n          }\n        })\n\n        this.setState({\n          originalImageHeightArray: newImgHeightArray,\n          originalImageStretchArray: newImgStretchArray\n        })\n\n    }\n\n    if(selectedDivId !== prevState.selectedDivId\n      || originalImageStretchArray !== prevState.originalImageStretchArray){\n      return this.lockDivs(selectedDivId);\n    }\n  };\n\n  lockDivs = (selectedDivId) => {\n\n    const {\n      animDirection,\n      originalImageStretchArray,\n      counter\n    } = this.state;\n\n    let textDivSize = this.state.textDivSizeArray[1];\n\n    if(counter > 7){\n      return;\n    }\n\n    if(selectedDivId === 0){\n\n      let divID = `container_mobile_div_${1}`;\n      let divIDText = `container_mobile_text_${1}`;\n      let imgStretch = originalImageStretchArray[1];\n      let imgContainer = document.querySelector(`#${divID}`);\n      let img = document.querySelector(`#${divID} img`);\n      let divText = document.querySelector(`#${divIDText}`);\n\n      divText.style.left = `-${textDivSize}px`\n      img.style.transform = `rotateZ(90deg) translate(100%) scaleY(${imgStretch})`;\n\n    }if(selectedDivId === 1){\n\n      let divID = `container_mobile_div_${0}`;\n      let divIDText = `container_mobile_text_${0}`;\n      let imgStretch = originalImageStretchArray[0];\n      let imgScale = originalImageStretchArray[0];\n      let imgContainer = document.querySelector(`#${divID}`);\n      let img = document.querySelector(`#${divID} img`);\n      let divText = document.querySelector(`#${divIDText}`);\n\n      divText.style.left = `-${textDivSize}px`\n      img.style.transform = `rotateZ(90deg) translate(100%) scaleY(${imgStretch})`;\n\n    }\n  }\n\n  toggleEN = () => {\n    this.setState({\n      toggleEN: !this.state.toggleEN,\n      dataToDivs: null\n    }, () => {\n      if(this.state.toggleEN){\n        this.setState({\n          selectedlan: \"en\"\n        }, () => {\n          this.renderDataToDivs(this.state.selectedlan)\n        })\n      }else{\n        this.setState({\n          selectedlan: \"fr\"\n        }, () => {\n          this.renderDataToDivs(this.state.selectedlan)\n        })\n      }\n    })\n  }\n\n  handleImageLoadedLoadingScreen = (imgID, index) => {\n\n    const {\n      originalImageStretch, \n      originalImageStretchArray, \n      viewportWidth\n    } = this.state;\n\n    \n    let img = document.getElementById(imgID);\n\n    let originalImageHeight = img.getBoundingClientRect().width;\n    let loadingImgStrech = (viewportWidth/originalImageHeight)*1.02;\n\n    \n\n    img.animate(\n      [\n        { transform: `rotateZ(90deg) translate(100%) scaleY(${loadingImgStrech})` },\n        { transform: `rotateZ(90deg) translate(100%) scaleY(1)` },\n      ], {\n        duration: 1500,\n        easing: \"ease\",\n      }\n    );\n  }\n\n  renderDataToDivs = () => {\n\n     // Mapping through the mockData; to be changed;\n      let mockData = this.state.mockData;\n      let mainCmsDataSubArraysFirstRow = this.state.mainCmsDataSubArrays[0];\n\n      let selectedLanHeadlines = `headlines_${this.state.selectedlan}`;\n      let selectedLanPara = `paragraph_${this.state.selectedlan}`;\n\n      let dataToDivs = mockData.entriesMobile.map((ele, index) => {\n\n        let divID = `container_mobile_div_${index}`;\n        let divIDText = `container_mobile_text_${index}`;\n        let divIDH1 = `container_mobile_div_h1_${index}`;\n        let divIP = `container_mobile_div_p_${index}`;\n\n        return (\n          <div\n            id={divID}\n            style={{height: `${this.state.viewportHeight/2-this.state.margin}px`}}\n            className=\"img_mobile_container\">\n              <div\n                  id={divIDText}\n                  className=\"mobile_text_content\">\n                    <h1 className=\"div_text_h1\">\n                      {ReactHtmlParser(mainCmsDataSubArraysFirstRow[index].headlines)}\n                    </h1>\n                    <p className=\"div_text_p\">\n                      {ReactHtmlParser(mainCmsDataSubArraysFirstRow[index].description)}\n                    </p>\n              </div>\n                {this.renderImg(ele, divID, divIDText, index)}\n          </div>\n        )\n      })\n      this.setState({\n        dataToDivs\n      })\n  };\n\n  renderImg = (ele, divID, divIDText, index) => {\n    if(index === 0){\n      let style = {\n        width: `${this.state.viewportHeight/2}px`,\n        transform: `rotateZ(90deg) translate(100%) scaleY(1)`\n      }\n\n      let id = `img_mobile_${index}`;\n      return (\n        <img\n          id={id}\n          className=\"img_mobile\"\n          style={style}\n          onLoad={() => {this.handleImageLoaded(divID, divIDText, index)}}\n          alt={ele.img}\n          src={ele.img}\n        />\n      )\n    }else{\n\n      let style = {\n        width: `${this.state.viewportHeight/2-this.state.margin}px`,\n        transform: `rotateZ(90deg) translate(100%) scaleY(1)`\n      }\n\n      let id = `img_mobile_${index}`;\n      return (\n        <img\n          id={id}\n          className=\"img_mobile\"\n          style={style}\n          onLoad={() => {this.handleImageLoaded(divID, divIDText, index)}}\n          alt={ele.img}\n          src={ele.img}\n        />\n      )\n    }\n  }\n\n  resizeHandler = () => {\n\n    const {\n        selectedDivId,\n        originalImageStretchArray,\n        counter\n      } = this.state;\n\n      let imgMobileContainer = [...document.getElementsByClassName('img_mobile_container')];\n      let imgMobile = [...document.getElementsByClassName(\"img_mobile\")];\n      let viewportHeight = window.innerHeight;\n\n      imgMobileContainer.map((ele, index) => {\n        ele.style.height = `${viewportHeight/2}px`;\n      })\n      imgMobile.map((ele, index) => {\n        ele.style.width = `${viewportHeight/2}px`;\n      })\n\n      if(window.innerHeight !== this.state.viewportHeight){\n        this.setState({\n          viewportHeight: viewportHeight,\n          originalImageWidth: viewportHeight/2\n        })\n      }\n\n    }\n\n  handleImageLoaded = (divID, divIDText, index) => {\n\n      let viewportWidth = this.state.viewportWidth;\n      let imgContainer = document.querySelector(`#${divID}`);\n      let img = document.querySelector(`#${divID} img`);\n      let divText = document.querySelector(`#${divIDText}`);\n      let originalImageHeight = img.getBoundingClientRect().width;\n      let originalImageStretch = viewportWidth/originalImageHeight;\n      let imageRatio = img.getBoundingClientRect().width/img.getBoundingClientRect().height;\n\n      let textDivSize = viewportWidth-originalImageHeight;\n\n      this.setState({\n        originalImageHeight,\n        originalImageStretch,\n        textDivSizeArray: [...this.state.textDivSizeArray, textDivSize],\n        originalImageHeightArray: [...this.state.originalImageHeightArray, originalImageHeight],\n        originalImageStretchArray: [...this.state.originalImageStretchArray, originalImageStretch],\n        originalImageRatioArray: [...this.state.originalImageRatioArray, imageRatio]\n     }, () => {\n\n       divText.style.width = `${textDivSize - 40}px`;\n       divText.style.left = `-${textDivSize - this.state.margin}px`;\n\n       let originalImageStretchArray = this.state.originalImageStretchArray;\n\n       if(index === 0){\n         img.style.transform = `\n           rotateZ(90deg)\n           translate(100%)\n           scaleY(${originalImageStretchArray[index]})\n         `;\n       }else{\n         let scalingCoeffStart = this.state.scalingCoeffStart;\n         img.style.transform = `\n           rotateZ(90deg)\n           translate(100%)\n           scaleY(${originalImageStretchArray[1]*scalingCoeffStart})\n         `;\n       }\n   })\n  }\n\n  scrollHandler = (event) => {\n\n    if(!this.state.originalImageStretch){\n      return null;\n    }\n\n    let numberOfPixelScrolled = window.scrollY;\n    let viewportHeight = this.state.viewportHeight;\n\n    this.setState({\n      numberOfPixelScrolled\n    })\n\n    if (numberOfPixelScrolled > 0\n      && numberOfPixelScrolled < viewportHeight*2) {\n\n        this.setState({\n          counter: 0,\n          selectedDivId: 0,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight\n      && numberOfPixelScrolled < viewportHeight*2) {\n\n\n        this.setState({\n          counter: 1,\n          selectedDivId: 0,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*2\n      && numberOfPixelScrolled < viewportHeight*3) {\n\n        this.setState({\n          counter: 2,\n          selectedDivId: 1,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*3\n      && numberOfPixelScrolled < viewportHeight*4) {\n\n        this.setState({\n          counter: 3,\n          selectedDivId: 1,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*4\n      && numberOfPixelScrolled < viewportHeight*5) {\n\n        this.setState({\n          counter: 4,\n          selectedDivId: 0,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*5\n      && numberOfPixelScrolled < viewportHeight*6) {\n\n        this.setState({\n          counter: 5,\n          selectedDivId: 0,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*6\n      && numberOfPixelScrolled < viewportHeight*7) {\n\n        this.setState({\n          counter: 6,\n          selectedDivId: 1,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*7\n      && numberOfPixelScrolled < viewportHeight*8) {\n\n        this.setState({\n          counter: 7,\n          selectedDivId: 1,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*8\n      && numberOfPixelScrolled < viewportHeight*9) {\n\n        this.setState({\n          counter: 8,\n          vertical: true,\n          selectedDivId: 0,\n        }, () => {\n\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n\n          this.handleAnimation(counter, 0, \"up\");\n          this.handleAnimation(counter, 1, \"up\");\n          this.handleVerticalHanimation(counter, \"horizontal\");\n\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*9\n      && numberOfPixelScrolled < viewportHeight*13) {\n\n\n        let distanceToScroll = (viewportHeight*13 - viewportHeight*9);\n\n        this.setState({\n          counter: 9,\n          selectedDivId: 0,\n          vertical: true,\n\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleVerticalHanimation(12, \"vertical\", distanceToScroll, [9, 12]);\n        })\n    }\n\n  };\n\n  handleAnimation = (counter, selectedDivId, animDirection, single) => {\n\n    this.setState({\n      animDirection\n    })\n\n    // div for img;\n    let divID = `container_mobile_div_${selectedDivId}`;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n    // div for text;\n    let divTextID = `container_mobile_text_${selectedDivId}`;\n    let divText = document.querySelector(`#${divTextID}`);\n\n    let numberOfPixelScrolled = window.scrollY;\n    let viewportHeight = this.state.viewportHeight;\n    let updatedViewportHeight = this.state.viewportHeight;\n    let originalImageStretch = this.state.originalImageStretch;\n\n\n    let scrolledPorcentage = this.definePorcentage(\n     (numberOfPixelScrolled - this.state.counter * viewportHeight),\n     viewportHeight)\n   ;\n\n\n   let remainingScrollPorcentage = 100-scrolledPorcentage;\n   let translateYPorcentageUp = this.defineValueFromPorcentage(\n       remainingScrollPorcentage,\n       originalImageStretch\n   );\n\n\n   let translateYPorcentageDown = this.defineValueFromPorcentage(\n       scrolledPorcentage,\n       originalImageStretch\n   );\n\n   let textLeftUp = this.defineValueFromPorcentage(\n       remainingScrollPorcentage,\n       this.state.textDivSizeArray[1]\n   );\n\n   let textLeftDown = this.defineValueFromPorcentage(\n       scrolledPorcentage,\n       this.state.textDivSizeArray[1]\n   );\n\n    if(animDirection === \"up\"){\n\n      if(selectedDivId === 0){\n\n        let originalImageHeightArray = this.state.originalImageHeightArray;\n        let scalingCoeffEnd = this.state.scalingCoeffEnd;\n        let scalingCoeffEndFirstDiv = translateYPorcentageUp*scalingCoeffEnd;\n\n        img.style.transform = `\n         rotateZ(90deg)\n         translate(100%)\n         scaleY(${scalingCoeffEndFirstDiv})`;\n\n         if(!this.state.vertical){\n           divText.style.left = `-${textLeftUp}px`\n         }else{\n           divText.style.left = \"-289.703px\"\n         }\n\n          if(translateYPorcentageUp < 1){\n\n            img.style.transform = `\n                 rotateZ(90deg)\n                 translate(100%)\n                 scaleY(${1*scalingCoeffEnd})`;\n\n\n           if(!this.state.vertical){\n             divText.style.left = `0vw`;\n           }else{\n             divText.style.left = \"-289.703px\"\n           }\n\n        }\n      }\n\n      if(selectedDivId === 1){\n\n        img.style.transform = `\n         rotateZ(90deg)\n         translate(100%)\n         scaleY(${translateYPorcentageUp})`;\n\n\n         if(!this.state.vertical){\n           divText.style.left = `-${textLeftUp}px`\n         }else{\n           divText.style.left = \"-289.703px\"\n         }\n\n          if(translateYPorcentageUp < 1){\n\n            img.style.transform = `\n                 rotateZ(90deg)\n                 translate(100%)\n                 scaleY(1)`;\n\n\n           if(!this.state.vertical){\n             divText.style.left = `0vw`;\n           }else{\n             divText.style.left = \"-289.703px\"\n           }\n          }\n      }\n\n    }\n    if(animDirection === \"down\"){\n\n      img.style.transform = `\n           rotateZ(90deg)\n           translate(100%)\n           scaleY(${translateYPorcentageDown})\n       `;\n\n      divText.style.left = `-${textLeftDown}px`\n\n      if(translateYPorcentageDown < 1){\n        img.style.transform = `\n             rotateZ(90deg)\n             translate(100%)\n             scaleY(1)\n         `;\n         divText.style.left = `0vw`\n      }\n    }\n   }\n\n  handleVerticalHanimation = (counter, slideDirection, distanceToScroll, counterToMakeTranslation) => {\n\n     //\n     let verticalDiv = document.getElementById(\"vertical_div_main_container\");\n     let verticalDivHeight = verticalDiv.getBoundingClientRect().height;\n\n     let numberOfPixelScrolled = window.scrollY;\n     let viewportHeight = this.state.viewportHeight;\n\n     if(slideDirection === \"horizontal\"){\n\n       let scrolledPorcentage = this.definePorcentage(\n         (numberOfPixelScrolled - this.state.counter * viewportHeight),\n         viewportHeight)\n       ;\n\n       let remainingScrollPorcentage = 100-scrolledPorcentage;\n\n\n       let textLeftUp = this.defineValueFromPorcentage(\n           remainingScrollPorcentage,\n           this.state.textDivSizeArray[1]\n       );\n\n       verticalDiv.style.left = `-${textLeftUp}px`;\n\n     }else{\n\n       // 2.8?\n       let scrolledPorcentageVertical = this.definePorcentage(\n          (numberOfPixelScrolled - 9 * viewportHeight),\n          viewportHeight*2)\n        ;\n\n      verticalDiv.style.left = \"0px\";\n      verticalDiv.style.transform = `translateY(-${scrolledPorcentageVertical}%)`\n\n     }\n   }\n\n  definePorcentage = (percent, total) => {\n      let porcentage = (percent/total)*100;\n      return porcentage\n   }\n\n  defineValueFromPorcentage = (percentage, total) => {\n    let value =  ((percentage * total)/100);\n    return value;\n  }\n\n  renderVerticalAnimation = () => {\n    if(!this.state.vertical){\n      return null;\n    }\n    return this.state.divsLastFold;\n  };\n\n  renderInfo = () => {\n    return (\n      <div className=\"info_main_container\">\n         {this.renderInfoCTA()}\n         {this.renderBodyCTA()}\n      </div>\n    )\n  }\n\n  renderInfoCTA = () => {\n    return (\n      <div className=\"cta_desktop_container\">\n      <div\n         className=\"info_cta_container\"\n         onClick={this.triggerInfoContent}\n         style={this.infoCTAStyle()}>\n           <img src=\"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1612842534/paprika%20-%20very%20interesting/Croix.svg\" />\n      </div>\n      <div\n       onClick={this.toggleEN}\n       className=\"en_cta\">\n         <span>\n           {this.toggleENText()}\n         </span>\n      </div>\n      </div>\n    )\n  };\n\n  toggleENText = () => {\n    if(this.state.toggleEN){\n      return \"FR\"\n    }else{\n      return \"EN\"\n    }\n  }\n\n  triggerInfoContent = () => {\n    this.setState({\n      isTriggeredInfoContent: !this.state.isTriggeredInfoContent\n    })\n  }\n\n  infoCTAStyle = () => {\n    if(!this.state.isTriggeredInfoContent){\n      return {\n        transform: \"rotate(0deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.4s\"\n      }\n    }else{\n      return {\n        transform: \"rotate(135deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.4s\"\n      }\n    }\n  };\n\n  renderBodyCTA = () => {\n\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    if(!this.state.isTriggeredInfoContent){\n      return null;\n    }\n\n    return (\n      <SlideDown className={'my-dropdown-slidedown'}>\n      <div className=\"info_body_container\">\n         <div className=\"info_body_container_headline\">\n           <h1>{infoCmsData[0][selectedLanHeadlines]}</h1>\n         </div>\n         <div className=\"info_body_container_ctas\">\n           <h1>{infoCmsData[0][selectedLanPara]}</h1>\n           <div className=\"info_body_container_ctas_spans\">\n               <a\n                 href={\"tel:\" + infoCmsData[1][selectedLanPara]}\n                 rel=\"noopener\"\n                 target=\"_blank\">\n               <span id=\"body\">\n                 {infoCmsData[1][selectedLanHeadlines]}\n               </span>\n               </a>\n               <a\n                 href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n                 rel=\"noopener\"\n                 target=\"_blank\">\n               <span>\n                 {infoCmsData[2][selectedLanHeadlines]}\n               </span>\n               </a>\n               <a\n                 href={infoCmsData[3][selectedLanPara]}\n                 rel=\"noopener\"\n                 target=\"_blank\">\n               <span>\n                 {infoCmsData[3][selectedLanHeadlines]}\n               </span>\n               </a>\n           </div>\n         </div>\n         <div\n           onClick={this.triggerInfoContent}\n           className=\"body_cta_background_close\">\n         </div>\n      </div>\n      </SlideDown>\n    )\n  };\n\n  renderDataToDivsLoading = () => {\n \n    let styleImg1 = {\n      transform: `rotateZ(90deg) translate(100%) scaleY(1)`,\n      width: `${this.state.viewportHeight}px`\n    };\n\n    return (\n      <div className=\"loader_vertical_container_mobile\">\n        <div>\n            <img\n              id=\"loading_img_1\"\n              onLoad={() => this.handleImageLoadedLoadingScreen(\"loading_img_1\", 0)}\n              className=\"loading_img\"\n              style={styleImg1}\n              src={mockData.loadingImg[0].img}\n            />\n        </div>\n      </div>\n    )\n      \n  }\n\n  renderTextSimplerVersion = () => {\n\n    const {\n      loaded, \n      mainCmsData, \n      selectedlan,\n      infoCmsData\n    } = this.state;\n\n    if(!mainCmsData \n      || !loaded){\n      return null;\n    }\n\n    let selectedLanPara = `paragraph_${selectedlan}`;\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n\n    console.log(selectedLanPara, selectedLanHeadlines);\n\n    let simplerVersionCopy = mainCmsData.slice(5, 9);\n    console.log(simplerVersionCopy);\n\n    let simplerVersionCopyMaped = simplerVersionCopy\n    .map((ele, index) => {\n      let id = `vertical_text_content_${index}`\n      return (\n        <div id={id} className=\"vertical_text_content\">\n          <h1>{ReactHtmlParser(ele[selectedLanHeadlines])}</h1>\n          <p>{ReactHtmlParser(ele[selectedLanPara])}</p>\n        </div>\n      )\n    })\n\n    console.log(simplerVersionCopyMaped);\n\n\n    return(\n      <main className=\"vertical_content_main\">\n        {simplerVersionCopyMaped}\n        <footer>\n        <div className=\"vertical_text_content footer_mobile\">\n          <h1>{infoCmsData[4][selectedLanHeadlines]}</h1>\n          <a\n            href={\"tel:\" + infoCmsData[1][selectedLanPara]}\n            rel=\"noopener\"\n            target=\"_blank\">\n          <span>\n            {infoCmsData[1][selectedLanHeadlines]}\n          </span>\n          </a>\n            <a\n              href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n              rel=\"noopener\"\n              target=\"_blank\">\n            <span>\n              {infoCmsData[2][selectedLanHeadlines]}\n            </span>\n            </a>\n            <a\n              href={infoCmsData[3][selectedLanPara]}\n              rel=\"noopener\"\n              target=\"_blank\">\n            <span>\n              {infoCmsData[3][selectedLanHeadlines]}\n            </span>\n            </a>\n            <div>\n              <p>« VERY INTERESTING » ©2021</p>\n            </div>\n              </div>\n        </footer>\n      </main>\n    )\n  }\n\n\n  render() {\n\n  const {\n    originalImageWidth,\n    originalImageHeightArray,\n    originalImageRatioArray,\n    originalImageStretchArray,\n    numberOfPixelScrolled,\n    selectedDivId,\n    counter,\n  } = this.state;\n\n  return (\n      <div className=\"main_vertical_container_mobile\">\n          {this.renderDataToDivsLoading()}\n          {this.renderInfo()}\n          {this.renderTextSimplerVersion()}\n      </div>\n    );\n}\n}\n\nexport default Mobile;\n","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/reportWebVitals.js",[],["97","98"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Desktop.js",["99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/mock_data.js",["122"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/SvgSection.js",["123","124","125","126"],"import React from \"react\";\nimport \"./App.css\";\n\nclass SvgSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      loopCounter: 0,\n      remainingScroll: null,\n      translateYPercent: null,\n      originalImageStretch: null\n    };\n  }\n  componentDidMount() {\n\n    let props = this.props;\n    if(props.index === props.counter){\n      document.addEventListener(\"scroll\", this.scrollHandler);\n    }else{\n      return;\n    }\n  }\n\n\n  handleImageLoaded = () => {\n\n    let props = this.props;\n\n    // get the scrollHeight and viewportHeight;\n    let scrollHeight = this.props.scrollHeight;\n    let viewportHeight = this.props.viewportHeight;\n\n    // no need to repeat?\n    let index = this.props.index;\n    let divID = `container_div_${index}`;\n\n    // retrieve the imgContainer and img;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n\n\n    let imageOriginalHeight = img.getBoundingClientRect().height;\n    let originalImageStretch = viewportHeight/imageOriginalHeight;\n    imgContainer.style.height = viewportHeight + \"px\";\n    img.style.transform = `scaleY(${originalImageStretch})`;\n\n      this.setState({\n        loaded: true,\n        originalImageStretch,\n        imgContainer,\n        img\n      })\n\n  };\n\n  scrollHandler = () => {\n\n    let state = this.state;\n    let props = this.props;\n\n    if (!state.loaded) {\n      return;\n    }\n\n    let imgContainer = state.imgContainer;\n    let img = state.img;\n    let body = document.body.parentNode;\n\n    let bodyScroll = (\n      body.scrollTop || body.scrollTop)\n      / (body.scrollHeight - body.clientHeight\n    ) * 100;\n\n    let remainingScroll = 100 - bodyScroll;\n    console.log(remainingScroll, \"remainingScroll: will be fed into the translateYPercentDesc : this , state.originalImageStretch\");\n\n    let translateYPercentDesc = this.definePorcentage(\n        remainingScroll, state.originalImageStretch\n    );\n    console.log(\"------\");\n    console.log(translateYPercentDesc, \"translateYPercentDesc: to apply to the scaleY\");\n\n\n    let translateYPercentDescNumbered = Number(translateYPercentDesc);\n\n\n      img.style.transform = `scaleY(${translateYPercentDesc})`;\n      let newImgContainerHeight = img.getBoundingClientRect().height;\n      imgContainer.style.height = newImgContainerHeight + \"px\";\n  };\n\n   definePorcentage = (percent, total) => {\n        return ((percent/ 100) * total).toFixed(2)\n    }\n\n\n\n  render() {\n    if(!this.props){\n      return null;\n    }\n\n  let index = this.props.index;\n  let divID = `container_div_${index}`;\n\n\n    return (\n        <div className=\"main_vertical_container_inner\">\n          <div id={divID}>\n            <img\n              onLoad={this.handleImageLoaded}\n              src=\"https://bit.ly/3nXBlMo\"\n              alt=\"XXI\"\n            />\n          </div>\n          <div className=\"text_container\">\n            <h1>SvgSection</h1>\n            <p>fvdfv</p>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default SvgSection;\n",["127","128"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/index.js",[],{"ruleId":"129","severity":1,"message":"130","line":5,"column":8,"nodeType":"131","messageId":"132","endLine":5,"endColumn":18},{"ruleId":"129","severity":1,"message":"133","line":114,"column":10,"nodeType":"131","messageId":"132","endLine":114,"endColumn":18},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"129","severity":1,"message":"138","line":5,"column":8,"nodeType":"131","messageId":"132","endLine":5,"endColumn":23},{"ruleId":"129","severity":1,"message":"139","line":73,"column":11,"nodeType":"131","messageId":"132","endLine":73,"endColumn":23},{"ruleId":"129","severity":1,"message":"140","line":93,"column":7,"nodeType":"131","messageId":"132","endLine":93,"endColumn":27},{"ruleId":"129","severity":1,"message":"141","line":95,"column":7,"nodeType":"131","messageId":"132","endLine":95,"endColumn":21},{"ruleId":"129","severity":1,"message":"142","line":96,"column":7,"nodeType":"131","messageId":"132","endLine":96,"endColumn":13},{"ruleId":"129","severity":1,"message":"143","line":99,"column":7,"nodeType":"131","messageId":"132","endLine":99,"endColumn":20},{"ruleId":"129","severity":1,"message":"144","line":109,"column":7,"nodeType":"131","messageId":"132","endLine":109,"endColumn":20},{"ruleId":"129","severity":1,"message":"145","line":116,"column":9,"nodeType":"131","messageId":"132","endLine":116,"endColumn":27},{"ruleId":"129","severity":1,"message":"146","line":117,"column":9,"nodeType":"131","messageId":"132","endLine":117,"endColumn":18},{"ruleId":"147","severity":1,"message":"148","line":148,"column":36,"nodeType":"149","messageId":"150","endLine":148,"endColumn":38},{"ruleId":"147","severity":1,"message":"148","line":151,"column":36,"nodeType":"149","messageId":"150","endLine":151,"endColumn":38},{"ruleId":"151","severity":1,"message":"152","line":193,"column":19,"nodeType":"153","endLine":193,"endColumn":34},{"ruleId":"151","severity":1,"message":"152","line":201,"column":20,"nodeType":"153","endLine":201,"endColumn":35},{"ruleId":"151","severity":1,"message":"152","line":209,"column":20,"nodeType":"153","endLine":209,"endColumn":35},{"ruleId":"147","severity":1,"message":"148","line":227,"column":36,"nodeType":"149","messageId":"150","endLine":227,"endColumn":38},{"ruleId":"147","severity":1,"message":"148","line":234,"column":36,"nodeType":"149","messageId":"150","endLine":234,"endColumn":38},{"ruleId":"147","severity":1,"message":"148","line":241,"column":36,"nodeType":"149","messageId":"150","endLine":241,"endColumn":38},{"ruleId":"147","severity":1,"message":"148","line":244,"column":36,"nodeType":"149","messageId":"150","endLine":244,"endColumn":38},{"ruleId":"129","severity":1,"message":"154","line":271,"column":13,"nodeType":"131","messageId":"132","endLine":271,"endColumn":29},{"ruleId":"129","severity":1,"message":"144","line":303,"column":7,"nodeType":"131","messageId":"132","endLine":303,"endColumn":20},{"ruleId":"129","severity":1,"message":"155","line":319,"column":11,"nodeType":"131","messageId":"132","endLine":319,"endColumn":23},{"ruleId":"129","severity":1,"message":"156","line":331,"column":11,"nodeType":"131","messageId":"132","endLine":331,"endColumn":19},{"ruleId":"129","severity":1,"message":"155","line":332,"column":11,"nodeType":"131","messageId":"132","endLine":332,"endColumn":23},{"ruleId":"129","severity":1,"message":"140","line":366,"column":7,"nodeType":"131","messageId":"132","endLine":366,"endColumn":27},{"ruleId":"129","severity":1,"message":"157","line":367,"column":7,"nodeType":"131","messageId":"132","endLine":367,"endColumn":32},{"ruleId":"129","severity":1,"message":"158","line":396,"column":11,"nodeType":"131","messageId":"132","endLine":396,"endColumn":31},{"ruleId":"129","severity":1,"message":"159","line":397,"column":11,"nodeType":"131","messageId":"132","endLine":397,"endColumn":26},{"ruleId":"129","severity":1,"message":"160","line":403,"column":13,"nodeType":"131","messageId":"132","endLine":403,"endColumn":20},{"ruleId":"129","severity":1,"message":"161","line":404,"column":13,"nodeType":"131","messageId":"132","endLine":404,"endColumn":18},{"ruleId":"129","severity":1,"message":"162","line":472,"column":9,"nodeType":"131","messageId":"132","endLine":472,"endColumn":22},{"ruleId":"129","severity":1,"message":"157","line":473,"column":9,"nodeType":"131","messageId":"132","endLine":473,"endColumn":34},{"ruleId":"129","severity":1,"message":"163","line":474,"column":9,"nodeType":"131","messageId":"132","endLine":474,"endColumn":16},{"ruleId":"147","severity":1,"message":"148","line":481,"column":43,"nodeType":"149","messageId":"150","endLine":481,"endColumn":45},{"ruleId":"147","severity":1,"message":"148","line":484,"column":34,"nodeType":"149","messageId":"150","endLine":484,"endColumn":36},{"ruleId":"129","severity":1,"message":"155","line":500,"column":11,"nodeType":"131","messageId":"132","endLine":500,"endColumn":23},{"ruleId":"129","severity":1,"message":"162","line":669,"column":15,"nodeType":"131","messageId":"132","endLine":669,"endColumn":28},{"ruleId":"129","severity":1,"message":"163","line":690,"column":15,"nodeType":"131","messageId":"132","endLine":690,"endColumn":22},{"ruleId":"129","severity":1,"message":"162","line":691,"column":15,"nodeType":"131","messageId":"132","endLine":691,"endColumn":28},{"ruleId":"129","severity":1,"message":"155","line":706,"column":9,"nodeType":"131","messageId":"132","endLine":706,"endColumn":21},{"ruleId":"129","severity":1,"message":"164","line":714,"column":9,"nodeType":"131","messageId":"132","endLine":714,"endColumn":30},{"ruleId":"129","severity":1,"message":"165","line":750,"column":13,"nodeType":"131","messageId":"132","endLine":750,"endColumn":37},{"ruleId":"129","severity":1,"message":"166","line":838,"column":10,"nodeType":"131","messageId":"132","endLine":838,"endColumn":27},{"ruleId":"167","severity":1,"message":"168","line":907,"column":12,"nodeType":"169","endLine":907,"endColumn":136},{"ruleId":"151","severity":1,"message":"152","line":974,"column":18,"nodeType":"153","endLine":974,"endColumn":33},{"ruleId":"151","severity":1,"message":"152","line":982,"column":18,"nodeType":"153","endLine":982,"endColumn":33},{"ruleId":"151","severity":1,"message":"152","line":990,"column":18,"nodeType":"153","endLine":990,"endColumn":33},{"ruleId":"167","severity":1,"message":"168","line":1016,"column":13,"nodeType":"169","endLine":1022,"endColumn":15},{"ruleId":"151","severity":1,"message":"152","line":1074,"column":13,"nodeType":"153","endLine":1074,"endColumn":28},{"ruleId":"151","severity":1,"message":"152","line":1082,"column":15,"nodeType":"153","endLine":1082,"endColumn":30},{"ruleId":"151","severity":1,"message":"152","line":1090,"column":15,"nodeType":"153","endLine":1090,"endColumn":30},{"ruleId":"129","severity":1,"message":"170","line":1108,"column":5,"nodeType":"131","messageId":"132","endLine":1108,"endColumn":23},{"ruleId":"129","severity":1,"message":"165","line":1109,"column":5,"nodeType":"131","messageId":"132","endLine":1109,"endColumn":29},{"ruleId":"129","severity":1,"message":"171","line":1110,"column":5,"nodeType":"131","messageId":"132","endLine":1110,"endColumn":28},{"ruleId":"129","severity":1,"message":"157","line":1111,"column":5,"nodeType":"131","messageId":"132","endLine":1111,"endColumn":30},{"ruleId":"129","severity":1,"message":"172","line":1112,"column":5,"nodeType":"131","messageId":"132","endLine":1112,"endColumn":26},{"ruleId":"129","severity":1,"message":"162","line":1113,"column":5,"nodeType":"131","messageId":"132","endLine":1113,"endColumn":18},{"ruleId":"129","severity":1,"message":"163","line":1114,"column":5,"nodeType":"131","messageId":"132","endLine":1114,"endColumn":12},{"ruleId":"134","replacedBy":"173"},{"ruleId":"136","replacedBy":"174"},{"ruleId":"129","severity":1,"message":"175","line":110,"column":7,"nodeType":"131","messageId":"132","endLine":110,"endColumn":20},{"ruleId":"129","severity":1,"message":"142","line":111,"column":7,"nodeType":"131","messageId":"132","endLine":111,"endColumn":13},{"ruleId":"147","severity":1,"message":"148","line":150,"column":36,"nodeType":"149","messageId":"150","endLine":150,"endColumn":38},{"ruleId":"147","severity":1,"message":"148","line":154,"column":35,"nodeType":"149","messageId":"150","endLine":154,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":166,"column":36,"nodeType":"149","messageId":"150","endLine":166,"endColumn":38},{"ruleId":"147","severity":1,"message":"148","line":170,"column":35,"nodeType":"149","messageId":"150","endLine":170,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":194,"column":36,"nodeType":"149","messageId":"150","endLine":194,"endColumn":38},{"ruleId":"147","severity":1,"message":"148","line":198,"column":35,"nodeType":"149","messageId":"150","endLine":198,"endColumn":37},{"ruleId":"147","severity":1,"message":"176","line":323,"column":31,"nodeType":"149","messageId":"177","endLine":323,"endColumn":33},{"ruleId":"129","severity":1,"message":"155","line":351,"column":9,"nodeType":"131","messageId":"132","endLine":351,"endColumn":21},{"ruleId":"129","severity":1,"message":"162","line":613,"column":15,"nodeType":"131","messageId":"132","endLine":613,"endColumn":28},{"ruleId":"129","severity":1,"message":"175","line":720,"column":18,"nodeType":"131","messageId":"132","endLine":720,"endColumn":31},{"ruleId":"129","severity":1,"message":"141","line":720,"column":33,"nodeType":"131","messageId":"132","endLine":720,"endColumn":47},{"ruleId":"129","severity":1,"message":"157","line":723,"column":18,"nodeType":"131","messageId":"132","endLine":723,"endColumn":43},{"ruleId":"167","severity":1,"message":"168","line":858,"column":11,"nodeType":"169","endLine":858,"endColumn":135},{"ruleId":"178","severity":1,"message":"179","line":916,"column":13,"nodeType":"169","endLine":916,"endColumn":16},{"ruleId":"151","severity":1,"message":"152","line":927,"column":17,"nodeType":"153","endLine":927,"endColumn":32},{"ruleId":"151","severity":1,"message":"152","line":934,"column":17,"nodeType":"153","endLine":934,"endColumn":32},{"ruleId":"129","severity":1,"message":"159","line":954,"column":9,"nodeType":"131","messageId":"132","endLine":954,"endColumn":24},{"ruleId":"178","severity":1,"message":"179","line":989,"column":13,"nodeType":"169","endLine":989,"endColumn":16},{"ruleId":"151","severity":1,"message":"152","line":1001,"column":15,"nodeType":"153","endLine":1001,"endColumn":30},{"ruleId":"151","severity":1,"message":"152","line":1008,"column":15,"nodeType":"153","endLine":1008,"endColumn":30},{"ruleId":"129","severity":1,"message":"157","line":1024,"column":13,"nodeType":"131","messageId":"132","endLine":1024,"endColumn":38},{"ruleId":"129","severity":1,"message":"180","line":1,"column":7,"nodeType":"131","messageId":"132","endLine":1,"endColumn":16},{"ruleId":"129","severity":1,"message":"181","line":28,"column":9,"nodeType":"131","messageId":"132","endLine":28,"endColumn":14},{"ruleId":"129","severity":1,"message":"182","line":31,"column":9,"nodeType":"131","messageId":"132","endLine":31,"endColumn":21},{"ruleId":"129","severity":1,"message":"181","line":60,"column":9,"nodeType":"131","messageId":"132","endLine":60,"endColumn":14},{"ruleId":"129","severity":1,"message":"183","line":85,"column":9,"nodeType":"131","messageId":"132","endLine":85,"endColumn":38},{"ruleId":"134","replacedBy":"184"},{"ruleId":"136","replacedBy":"185"},"no-unused-vars","'SvgSection' is defined but never used.","Identifier","unusedVar","'mockData' is assigned a value but never used.","no-native-reassign",["186"],"no-negated-in-lhs",["187"],"'ScrollDirection' is defined but never used.","'mockDataText' is assigned a value but never used.","'originalImageStretch' is assigned a value but never used.","'viewportHeight' is assigned a value but never used.","'loaded' is assigned a value but never used.","'resetTextDivs' is assigned a value but never used.","'animDirection' is assigned a value but never used.","'imgMobileContainer' is assigned a value but never used.","'imgMobile' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'newWidthToString' is assigned a value but never used.","'imgContainer' is assigned a value but never used.","'imgScale' is assigned a value but never used.","'originalImageStretchArray' is assigned a value but never used.","'selectedLanHeadlines' is assigned a value but never used.","'selectedLanPara' is assigned a value but never used.","'divIDH1' is assigned a value but never used.","'divIP' is assigned a value but never used.","'selectedDivId' is assigned a value but never used.","'counter' is assigned a value but never used.","'updatedViewportHeight' is assigned a value but never used.","'originalImageHeightArray' is assigned a value but never used.","'verticalDivHeight' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'originalImageWidth' is assigned a value but never used.","'originalImageRatioArray' is assigned a value but never used.","'numberOfPixelScrolled' is assigned a value but never used.",["186"],["187"],"'viewportWidth' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'mock_data' is assigned a value but never used.","'props' is assigned a value but never used.","'scrollHeight' is assigned a value but never used.","'translateYPercentDescNumbered' is assigned a value but never used.",["186"],["187"],"no-global-assign","no-unsafe-negation"]