[{"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Desktop.js":"1","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/App.js":"2","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/index.js":"3","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/SvgSection.js":"4","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/reportWebVitals.js":"5","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Mobile.js":"6","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/mock_data.js":"7"},{"size":30375,"mtime":1619196099502,"results":"8","hashOfConfig":"9"},{"size":3034,"mtime":1618599158960,"results":"10","hashOfConfig":"9"},{"size":700,"mtime":1615576092039,"results":"11","hashOfConfig":"9"},{"size":3055,"mtime":1609936305537,"results":"12","hashOfConfig":"9"},{"size":362,"mtime":1608610226311,"results":"13","hashOfConfig":"9"},{"size":9962,"mtime":1619130345783,"results":"14","hashOfConfig":"9"},{"size":904,"mtime":1618602765011,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"yl3hm3",{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Desktop.js",["40","41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62"],"import React from \"react\";\nimport {SlideDown} from \"react-slidedown\";\nimport \"react-slidedown/lib/slidedown.css\";\nimport mockData from \"./mock_data.js\";\nimport \"./App.css\";\n\nimport very from './img/very.svg'; \nimport intere from './img/ntere.svg'; \nimport sting from './img/sting.svg'; \n\nclass Desktop extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toggleOnHoverCallCTA: false,\n      toggleEN: false,\n      isClosedInfoPanel: true,\n      selectedlan: \"fr\",\n      loaded: true,\n      counter: 0,\n      selectedDivId: 0,\n      scrollDirection: null,\n      updatedHeightOfPage: null,\n      viewportHeight: null,\n      viewportWidth: null,\n      mockData: null,\n      mainCmsDataSubArrays: null,\n      dataToDivs: null,\n      originalImageHeight: null,\n      originalImageWidth: null,\n      originalImageStretch: null,\n      isTriggeredInfoContent: false,\n      mainCmsData: null,\n      infoCmsData: null,\n      scroll: 0,\n      originalImageStretchArray: []\n    };\n  }\n\n  componentDidMount() {\n\n    document.addEventListener(\"scroll\", this.scrollHandler);\n    window.addEventListener(\"resize\", this.resizeHandler);\n    let {cmsData} = this.props;\n    let mainCmsData = cmsData.slice(0, 9);\n    let infoCmsData = cmsData.slice(9, 14);\n\n    let viewportHeight = window.innerHeight;\n    let viewportWidth = this.props.viewportWidth;\n\n    let updatedHeightOfPage = viewportHeight * 8.5;\n    document.body.style.height = `${updatedHeightOfPage}px`;\n\n    this.setState(\n      {\n        updatedHeightOfPage,\n        viewportHeight,\n        viewportWidth,\n        mockData,\n        mainCmsData,\n        infoCmsData\n      },\n      () => {\n        // Slice the data in chops for panels;\n        let {mainCmsData} = this.state;\n        let mainCmsDataSubArrays = [\n          mainCmsData.slice(0, 3),\n          mainCmsData.slice(3, 6),\n          mainCmsData.slice(6, 9)\n        ];\n        this.setState(\n          {\n            mainCmsDataSubArrays\n          },\n          () => {\n            // Once this chop is done, format these to divs;\n            this.renderDataToDivs(this.state.selectedlan);\n          }\n        );\n      }\n    );\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n    // Get these images and their divs here; \n    // or a hard block when the user reaches\n    // the bottom of the viewportHeight;\n\n    let firstImg = document.querySelector(`#container_div_0 img`);\n    let firstContainer = document.getElementById(\"container_div_0\");\n\n    let secondImg = document.querySelector(`#container_div_1 img`);\n    let secondContainer = document.getElementById(\"container_div_1\");\n\n    let thirdImg = document.querySelector(`#container_div_2 img`);\n    let thirdContainer = document.getElementById(\"container_div_2\");\n\n\n    const {\n      originalImageStretchArray, \n      selectedDivId,\n      viewportHeight, \n      viewportWidth,\n      loaded} = this.state;\n\n\n    if(!window.pageYOffset\n      && firstImg\n      && originalImageStretchArray\n      && viewportHeight){\n\n        firstContainer.style.height = `${this.state.viewportHeight}px`;\n        secondContainer.style.height = `${this.state.viewportHeight}px`;\n        thirdContainer.style.height = `${this.state.viewportHeight}px`;\n\n          setTimeout(() => {\n\n            firstImg.style.transform = `scaleY(${originalImageStretchArray[0]})`\n            secondImg.style.transform = `scaleY(${originalImageStretchArray[1]})`;\n            thirdImg.style.transform = `scaleY(${originalImageStretchArray[2]})`;\n\n          }, 2000)\n    \n    }\n\n    let counter = this.state.counter;\n    let divTextH1 = [...document.getElementsByClassName(\"div_text_h1\")];\n    let divTextP = [...document.getElementsByClassName(\"div_text_p\")];\n\n    let {mainCmsDataSubArrays, selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    if (selectedlan !== prevState.selectedlan) {\n      window.scrollTo(0, 0);\n    }\n\n    if (counter !== prevState.counter) {\n      if (counter >= 0 && counter < 6) {\n\n        this.setState({\n          isDisplayFooter: false\n        });\n\n        let mainCmsDataSubArraysFirstRow = mainCmsDataSubArrays[0];\n\n        divTextH1.map((ele, index) => {\n          ele.innerHTML =\n            mainCmsDataSubArraysFirstRow[index][selectedLanHeadlines];\n        });\n        divTextP.map((ele, index) => {\n          ele.innerHTML = mainCmsDataSubArraysFirstRow[index][selectedLanPara];\n        });\n\n      }\n\n      if (counter >= 6 && counter < 12) {\n        this.setState({\n          isDisplayFooter: false\n        });\n\n        let mainCmsDataSubArraysSecondRow = mainCmsDataSubArrays[1];\n\n        divTextH1.map((ele, index) => {\n          ele.innerHTML =\n            mainCmsDataSubArraysSecondRow[index][selectedLanHeadlines];\n        });\n        divTextP.map((ele, index) => {\n          ele.innerHTML = mainCmsDataSubArraysSecondRow[index][selectedLanPara];\n        });\n      }\n\n\n      if (counter === 12) {\n\n        let valueForFooter;\n\n        if(viewportHeight > 2000){\n          valueForFooter = this.defineValueFromPorcentage(14, this.state.updatedHeightOfPage);\n        }else{\n          valueForFooter = this.defineValueFromPorcentage(12, this.state.updatedHeightOfPage);\n        }\n\n\n        window.onscroll = ev => {\n          if (\n            window.innerHeight + window.scrollY >=\n            document.body.offsetHeight - valueForFooter\n          ) {\n            this.setState({\n              isDisplayFooter: true\n            });\n          } else {\n            this.setState({\n              isDisplayFooter: false\n            });\n          }\n        };\n\n        let mainCmsDataSubArraysThirdRow = mainCmsDataSubArrays[2];\n\n        divTextH1.map((ele, index) => {\n          ele.innerHTML =\n            mainCmsDataSubArraysThirdRow[index][selectedLanHeadlines];\n        });\n        divTextP.map((ele, index) => {\n          ele.innerHTML = mainCmsDataSubArraysThirdRow[index][selectedLanPara];\n        });\n      }\n    }\n\n    if(selectedDivId !== prevState.selectedDivId){\n\n  \n      let firstImg = document.querySelector(`#container_div_0 img`);\n      let firstContainer = document.getElementById(\"container_div_0\");\n  \n      let secondImg = document.querySelector(`#container_div_1 img`);\n      let secondContainer = document.getElementById(\"container_div_1\");\n  \n      let thirdImg = document.querySelector(`#container_div_2 img`);\n      let thirdContainer = document.getElementById(\"container_div_2\");\n\n\n      if(selectedDivId === 1){\n\n        firstImg.style.transform = `scaleY(${originalImageStretchArray[0]})`;\n        firstContainer.style.height = `${this.state.viewportHeight}px`;\n\n        thirdImg.style.transform = `scaleY(${originalImageStretchArray[2]})`;\n        thirdContainer.style.height = `${this.state.viewportHeight}px`;\n        \n      }\n\n      if(selectedDivId === 2){\n\n        firstImg.style.transform = `scaleY(${originalImageStretchArray[0]})`;\n        firstContainer.style.height = `${this.state.viewportHeight}px`;\n\n        secondImg.style.transform = `scaleY(${originalImageStretchArray[1]})`;\n        secondContainer.style.height = `${this.state.viewportHeight}px`;\n\n      }\n\n      if(selectedDivId === 0){\n\n        secondImg.style.transform = `scaleY(${originalImageStretchArray[1]})`;\n        secondContainer.style.height = `${this.state.viewportHeight}px`;\n\n        thirdImg.style.transform = `scaleY(${originalImageStretchArray[2]})`;\n        thirdContainer.style.height = `${this.state.viewportHeight}px`;\n\n      }\n\n\n    }\n  }\n\n  toggleEN = () => {\n    this.setState(\n      {\n        toggleEN: !this.state.toggleEN,\n      },\n      () => {\n        if (this.state.toggleEN) {\n          this.setState(\n            {\n              selectedlan: \"en\"\n            },\n            () => {\n              this.renderDataToDivs(this.state.selectedlan);\n            }\n          );\n        } else {\n          this.setState(\n            {\n              selectedlan: \"fr\"\n            },\n            () => {\n              this.renderDataToDivs(this.state.selectedlan);\n            }\n          );\n        }\n      }\n    );\n  };\n\n\n  handleImageLoaded = (divID, index) => {\n\n\n    setTimeout(() => {\n      let divId = `container_div_${index}`;\n      let imgContainer = document.querySelector(`#${divID}`);\n      let img = document.querySelector(`#${divID} img`);\n  \n      let viewportHeight = this.state.viewportHeight;\n      let aligningThirdDiv = this.defineValueFromPorcentage(2.2, viewportHeight);\n      let originalImageHeight = img.getBoundingClientRect().height;\n      let originalImageWidth = img.getBoundingClientRect().width;\n  \n      let originalImageStretch = (viewportHeight + 1.4 * aligningThirdDiv) / originalImageHeight;\n      console.log(originalImageStretch);\n    \n        this.setState({\n          originalImageHeight,\n          originalImageStretch,\n          originalImageWidth,\n          originalImageStretchArray : [\n              ...this.state.originalImageStretchArray,\n              originalImageStretch\n          ]\n        }, () => {\n    \n          const {\n            originalImageStretchArray\n          } = this.state;\n    \n          if(originalImageStretchArray.length === 3){\n            \n           let firstImg = document.querySelector(`#container_div_0 img`);\n          let firstContainer = document.getElementById(\"container_div_0\");\n    \n          let secondImg = document.querySelector(`#container_div_1 img`);\n          let secondContainer = document.getElementById(\"container_div_1\");\n    \n          let thirdImg = document.querySelector(`#container_div_2 img`);\n          let thirdContainer = document.getElementById(\"container_div_2\");\n    \n          firstImg.style.transform = `scaleY(${originalImageStretchArray[0]})`\n          secondImg.style.transform = `scaleY(${originalImageStretchArray[1]})`\n          thirdImg.style.transform = `scaleY(${originalImageStretchArray[2]})`\n\n          firstContainer.style.height = `${this.state.viewportHeight}px`;\n          secondContainer.style.height = `${this.state.viewportHeight}px`;\n          thirdContainer.style.height = `${this.state.viewportHeight}px`;\n  \n    \n          firstImg.animate(\n            [\n              { transform: `scaleY(1)` },\n              { transform: `scaleY(${originalImageStretchArray[0]})` },\n            ], {\n              duration: 300,\n              easing: \"ease\",\n            }\n          );\n    \n          secondImg.animate(\n            [\n              { transform: `scaleY(1)` },\n              { transform: `scaleY(${originalImageStretchArray[1]})` },\n            ], {\n              duration: 300,\n              easing: \"ease\",\n            }\n          );\n    \n          thirdImg.animate(\n            [\n              { transform: `scaleY(1)` },\n              { transform: `scaleY(${originalImageStretchArray[2]})` },\n            ], {\n              duration: 300,\n              easing: \"ease\",\n            }\n          );\n          }\n        });\n      }, 100);\n  };\n\n\n  renderDataToDivs = selectedlan => {\n    let mainCmsDataSubArraysFirstRow = this.state.mainCmsDataSubArrays[0];\n    let dataToDivs = mockData.entriesImgDesktop.map((ele, index) => {\n      let divID = `container_div_${index}`;\n      let selectedLanHeadlines = `headlines_${selectedlan}`;\n      let selectedLanPara = `paragraph_${selectedlan}`;\n      let imgID = `svg_${index}`;\n\n      let imgArray = [\n          very,\n          intere,\n          sting\n      ]\n\n      return (\n        <div className=\"main_vertical_container_inner\">\n          <div id={divID} className=\"svgs_containers\">\n            <img\n              className=\"svgs\"\n              onLoad={() => {\n                this.handleImageLoaded(divID, index);\n              }}\n              id={imgID}\n              src={imgArray[index]}\n              alt={ele.img}\n            />\n          </div>\n          <div className=\"text_container\">\n            <h1 className=\"div_text_h1\">\n              {mainCmsDataSubArraysFirstRow[index][selectedLanHeadlines]}\n            </h1>\n            <p className=\"div_text_p\">\n              {mainCmsDataSubArraysFirstRow[index][selectedLanPara]}\n            </p>\n          </div>\n        </div>\n      );\n    });\n    this.setState({\n      dataToDivs\n    });\n  };\n\n  resizeHandler = () => {\n\n    const {\n      selectedDivId,\n      counter,\n      originalImageWidth,\n      originalImageHeight\n    } = this.state;\n\n    let viewportHeight = window.innerHeight;\n    let viewportWidth = window.innerWidth;\n\n    this.setState(\n      {\n        viewportHeight,\n        viewportWidth\n      },\n      () => {\n        let svgs = [...document.getElementsByClassName(\"svgs\")];\n        let svgContainers = [...document.getElementsByClassName(\"svgs_containers\")];\n\n        // here;\n        svgs.map((ele, index) => {\n          if(\n            index === selectedDivId\n            || counter > 11){\n            return;\n          }else{\n\n\n            // here;\n            svgContainers[index].style.height = `${viewportHeight}px`;\n            let divID = `container_div_${index}`;\n            let newWidth = document.getElementById(divID).getBoundingClientRect().width;\n            let aligningThirdDiv = this.defineValueFromPorcentage(2.2, viewportHeight);\n            let newHeight = newWidth/originalImageWidth*originalImageHeight;\n            let newImgStretch = (viewportHeight + 1.4 * aligningThirdDiv) / newHeight;\n            ele.style.transform = `scaleY(${newImgStretch})`;\n\n          }\n        })\n      }\n    );\n  };\n\n\n  // scrollHandler here;\n  scrollHandler = event => {\n    \n    let numberOfPixelScrolled = window.scrollY;\n    let viewportHeight = this.state.viewportHeight;\n\n    if (!this.state.originalImageStretch\n      || !this.state.loaded) {\n      return null;\n    }\n\n\n    this.setState({\n      scroll: numberOfPixelScrolled\n    });\n\n    if (numberOfPixelScrolled > 0 && numberOfPixelScrolled < viewportHeight*0.5) {\n      this.setState(\n        {\n          counter: 0,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight*0.5 &&\n      numberOfPixelScrolled < viewportHeight *1\n    ) {\n      this.setState(\n        {\n          counter: 1,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 1 &&\n      numberOfPixelScrolled < viewportHeight * 1.5\n    ) {\n      this.setState(\n        {\n          counter: 2,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 1.5 &&\n      numberOfPixelScrolled < viewportHeight * 2\n    ) {\n      this.setState(\n        {\n          counter: 3,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 2 &&\n      numberOfPixelScrolled < viewportHeight * 2.5\n    ) {\n\n      this.setState(\n        {\n          counter: 4,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 2.5 &&\n      numberOfPixelScrolled < viewportHeight * 3\n    ) {\n\n      this.setState(\n        {\n          counter: 5,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 3 &&\n      numberOfPixelScrolled < viewportHeight * 3.5\n    ) {\n\n      this.setState(\n        {\n          counter: 6,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 3.5 &&\n      numberOfPixelScrolled < viewportHeight * 4\n    ) {\n\n      this.setState(\n        {\n          counter: 7,\n          selectedDivId: 0\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 4 &&\n      numberOfPixelScrolled < viewportHeight * 4.5\n    ) {\n      this.setState(\n        {\n          counter: 8,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 4.5 &&\n      numberOfPixelScrolled < viewportHeight * 5\n    ) {\n      this.setState(\n        {\n          counter: 9,\n          selectedDivId: 1\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 5 &&\n      numberOfPixelScrolled < viewportHeight * 5.5\n    ) {\n\n      this.setState(\n        {\n          counter: 10,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 5.5 &&\n      numberOfPixelScrolled < viewportHeight * 6\n    ) {\n      this.setState(\n        {\n          counter: 11,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        }\n      );\n    }\n\n    if (\n      numberOfPixelScrolled > viewportHeight * 6 &&\n      numberOfPixelScrolled < viewportHeight * 6.5\n    ) {\n      this.setState(\n        {\n          counter: 12,\n          selectedDivId: 2\n        },\n        () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, 0, \"up\", true);\n          this.handleAnimation(counter, 1, \"up\", true);\n          this.handleAnimation(counter, 2, \"up\", true);\n        }\n      );\n    }\n  };\n\n  handleAnimation = (counter, selectedDivId, animDirection, all) => {\n\n    let divID = `container_div_${selectedDivId}`;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n    let numberOfPixelScrolled = window.scrollY;\n    let viewportHeight = this.state.viewportHeight/2;\n    let originalImageStretch = this.state.originalImageStretchArray[selectedDivId];\n\n    if (!all) {\n\n      let scrolledPorcentage = this.definePorcentage(\n        numberOfPixelScrolled - this.state.counter * viewportHeight,\n        viewportHeight\n      );\n      let remainingScrollPorcentage = 100 - scrolledPorcentage;\n      let translateYPorcentageUp = this.defineValueFromPorcentage(\n        remainingScrollPorcentage,\n        originalImageStretch\n      );\n      let translateYPorcentageDown = this.defineValueFromPorcentage(\n        scrolledPorcentage,\n        originalImageStretch\n      );\n\n      if (animDirection === \"up\") {\n        \n        img.style.transform = `scaleY(${translateYPorcentageUp})`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n\n\n        let valueToForceBlock = originalImageStretch - 0.5;\n        if(translateYPorcentageUp > valueToForceBlock){\n\n          img.style.transform = `scaleY(${originalImageStretch})`;\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n         \n        }\n\n\n        if (translateYPorcentageUp < 1) {\n          if (selectedDivId === 0) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 1) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 2) {\n            img.style.transform = `scaleY(1)`;\n          }\n\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n      }\n\n      if (animDirection === \"down\") {\n\n      \n        img.style.transform = `scaleY(${translateYPorcentageDown})`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n\n        let valueToForceBlock = originalImageStretch - 0.5;\n        if(translateYPorcentageDown > valueToForceBlock){\n\n          img.style.transform = `scaleY(${originalImageStretch})`;\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n         \n        }\n        \n\n        if (translateYPorcentageDown < 1) {\n          if (selectedDivId === 0) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 1) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 2) {\n            img.style.transform = `scaleY(1)`;\n          }\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n      }\n\n    } else {\n\n      let scrolledPorcentage = this.definePorcentage(\n        numberOfPixelScrolled - this.state.counter * viewportHeight,\n        viewportHeight\n      );\n      let remainingScrollPorcentage = 100 - scrolledPorcentage;\n      let translateYPorcentageUp = this.defineValueFromPorcentage(\n        remainingScrollPorcentage,\n        originalImageStretch\n      );\n      let translateYPorcentageDown = this.defineValueFromPorcentage(\n        scrolledPorcentage,\n        this.state.originalImageStretchArray[3]\n      );\n\n      if (animDirection === \"up\") {\n\n\n        img.style.transform = `scaleY(${translateYPorcentageUp})`;\n        let newImgContainerHeight = img.getBoundingClientRect().height;\n        imgContainer.style.height = newImgContainerHeight + \"px\";\n\n        let valueToForceBlock = originalImageStretch - 0.2;\n        if(translateYPorcentageUp > valueToForceBlock){\n\n          img.style.transform = `scaleY(${originalImageStretch})`;\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n         \n        }\n\n        if (translateYPorcentageUp < 1.8) {\n          if (selectedDivId === 0) {\n            img.style.transform = `scaleY(1)`;\n          }\n          if (selectedDivId === 1) {\n            img.style.transform = `scaleY(0.95)`;\n          }\n          if (selectedDivId === 2) {\n            img.style.transform = `scaleY(1)`;\n          }\n\n          let newImgContainerHeight = img.getBoundingClientRect().height;\n          imgContainer.style.height = newImgContainerHeight + \"px\";\n        }\n      }\n    }\n  };\n\n\n  definePorcentage = (percent, total) => {\n    let porcentage = (percent / total) * 100;\n    return porcentage;\n  };\n\n  defineValueFromPorcentage = (percentage, total) => {\n    let value = (percentage / 100) * total\n    return value;\n  };\n\n  renderDivsToDom = () => {\n    if (!this.state.dataToDivs) {\n      return \"loading\";\n    } else {\n      return this.state.dataToDivs;\n    }\n  };\n\n  renderInfo = () => {\n    if (!this.state.infoCmsData) {\n      return null;\n    }\n    return (\n      <div className=\"info_main_container\">\n        {this.renderInfoCTA()}\n        {this.renderBodyCTA()}\n      </div>\n    );\n  };\n\n  renderInfoCTA = () => {\n    return (\n      <div className=\"cta_desktop_container\">\n        <div\n          className=\"info_cta_container\"\n          onClick={this.triggerInfoContent}\n          style={this.infoCTAStyle()}\n        >\n          <img src=\"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1612842534/paprika%20-%20very%20interesting/Croix.svg\" />\n        </div>\n        <div onClick={this.toggleEN} className=\"en_cta\">\n          <span>{this.toggleENText()}</span>\n        </div>\n      </div>\n    );\n  };\n\n  toggleENText = () => {\n    if (this.state.toggleEN) {\n      return \"FR\";\n    } else {\n      return \"EN\";\n    }\n  };\n\n  triggerInfoContent = () => {\n    this.setState({\n      isClosedInfoPanel: !this.state.isClosedInfoPanel\n    });\n  };\n\n  infoCTAStyle = () => {\n    if (this.state.isClosedInfoPanel) {\n      return {\n        transform: \"rotate(0deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.5s\"\n      };\n    } else {\n      return {\n        transform: \"rotate(135deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.5s\"\n      };\n    }\n  };\n\n  renderBodyCTA = () => {\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    return (\n      <SlideDown\n        closed={this.state.isClosedInfoPanel}\n        className={\"my-dropdown-slidedown\"}>\n        <div id=\"info_body_container\" className=\"info_body_container\">\n          <div className=\"info_body_container_headline\">\n            <h1>{infoCmsData[0][selectedLanHeadlines]}</h1>\n          </div>\n          <div className=\"info_body_container_ctas\">\n            <h1>{infoCmsData[0][selectedLanPara]}</h1>\n            <div className=\"info_body_container_ctas_spans\">\n            <a>\n              <span\n                id=\"body\"\n                onMouseEnter={() => this.toggleOnHoverCallCTA(\"body\")}\n                onMouseLeave={() => this.toggleOnHoverCallCTA(\"body\")}>\n                {infoCmsData[1][selectedLanHeadlines]}\n              </span>\n              </a>\n              <a\n                href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n                rel=\"noopener\"\n                target=\"_blank\"\n              >\n                <span>{infoCmsData[2][selectedLanHeadlines]}</span>\n              </a>\n              <a\n                href={infoCmsData[3][selectedLanPara]}\n                rel=\"noopener\"\n                target=\"_blank\"\n              >\n                <span>{infoCmsData[3][selectedLanHeadlines]}</span>\n              </a>\n            </div>\n          </div>\n          <div\n            onClick={this.triggerInfoContent}\n            className=\"body_cta_background_close\"\n          ></div>\n        </div>\n      </SlideDown>\n    );\n  };\n\n  toggleOnHoverCallCTA = id => {\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    this.setState(\n      {\n        toggleOnHoverCallCTA: !this.state.toggleOnHoverCallCTA\n      },\n      () => {\n        let selectedSpan = document.getElementById(id);\n\n        if (this.state.toggleOnHoverCallCTA) {\n          selectedSpan.innerHTML = \"<p>514 839-1839</p>\";\n        } else {\n          selectedSpan.innerHTML = infoCmsData[1][selectedLanHeadlines];\n        }\n      }\n    );\n  };\n\n  renderFooter = () => {\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    if (!this.state.isDisplayFooter) {\n      return null;\n    }\n    return (\n      <footer className=\"footer_desktop\">\n        <div className=\"footer_desktop_first\">\n          <h1>{infoCmsData[4][selectedLanHeadlines]}</h1>\n        </div>\n        <div className=\"footer_cta_outer\">\n          <div className=\"footer_cta\">\n            <a>\n              <div\n                id=\"footer\"\n                onMouseEnter={() => this.toggleOnHoverCallCTA(\"footer\")}\n                onMouseLeave={() => this.toggleOnHoverCallCTA(\"footer\")}\n              >\n                {infoCmsData[1][selectedLanHeadlines]}\n              </div>\n            </a>\n            <a\n              href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n              rel=\"noopener\"\n              target=\"_blank\"\n            >\n              <div>{infoCmsData[2][selectedLanHeadlines]}</div>\n            </a>\n            <a\n              href={infoCmsData[3][selectedLanPara]}\n              rel=\"noopener\"\n              target=\"_blank\"\n            >\n              <div>{infoCmsData[3][selectedLanHeadlines]}</div>\n            </a>\n          </div>\n          <div className=\"footer_copyright\">\n            <span className=\"copyright\">« VERY INTERESTING » ©2021</span>\n          </div>\n        </div>\n      </footer>\n    );\n  };\n\n\n  render() {\n\n    const { \n      originalImageStretchArray,\n      scrollDirection,\n      selectedDivId,\n      viewportWidth,\n    } = this.state;\n\n    let style = {\n      position: \"fixed\",\n      top: 0,\n      right: 0,\n      backgroundColor: \"yellow\",\n      display: \"none\"\n    }\n    \n    return (\n        <div className=\"main_vertical_container\">\n          {this.renderInfo()}\n          {this.renderDivsToDom()}\n          {this.renderFooter()}\n          <div style={style}>\n            {selectedDivId} -\n            {viewportWidth} -\n            {originalImageStretchArray[0]} - \n            {originalImageStretchArray[1]} - \n            {originalImageStretchArray[2]}\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default Desktop;\n","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/App.js",["63","64"],"import React from \"react\";\nimport Tabletop from \"tabletop\";\nimport Desktop from \"./Desktop.js\";\nimport Mobile from \"./Mobile.js\";\nimport SvgSection from \"./SvgSection.js\"\nimport mock_data from \"./mock_data.js\";\nimport \"./App.css\";\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewportWidth: null,\n      mockData: mock_data,\n      loaded: true,\n      cmsData: null,\n      toggleEN: false,\n      mainCmsDataFR: null,\n      mainCmsDataEN: null\n    };\n  }\n\n  componentDidMount(){\n\n    document.addEventListener('gesturestart', function (e) {\n        e.preventDefault();\n    });\n\n      Tabletop.init({\n      key: '1N5WFhAZpqz6Spgr6pQowDRJLmr_Ni99_sh95TCArGQ8',\n      callback: googleData => {\n        this.setState({\n          cmsData: googleData\n        }, () => {\n\n          let {cmsData} = this.state;\n          let mainCmsDataFR = cmsData\n          .slice(0, 9)\n          .map((ele, index) => {\n            return {\n              headlines: ele.headlines_fr,\n              paragraph: ele.paragraph_fr\n            }\n          })\n\n          let mainCmsDataEN = cmsData\n          .slice(0, 9)\n          .map((ele, index) => {\n            return {\n              headlines: ele.headlines_en,\n              paragraph: ele.paragraph_en\n            }\n          })\n\n          this.setState({\n            mainCmsDataFR,\n            mainCmsDataEN\n          })\n\n        })\n      },\n      simpleSheet: true\n    })\n\n\n    window.addEventListener(\"resize\", this.resizeHandler);\n    let viewportWidth = window.innerWidth;\n\n    this.setState({\n      viewportWidth\n    });\n  }\n\n\n  resizeHandler = () => {\n\n    let viewportWidth = window.innerWidth;\n    this.setState({\n      viewportWidth\n    });\n  }\n\n  handleImageLoadedLoadingScreen = () => {\n\n    let viewportHeight = window.innerHeight;\n\n    let aligningThirdDiv = this.defineValueFromPorcentage(2, viewportHeight);\n    let loadingImg = document.getElementById(\"loading_img\");\n    let loadingImgInitialHeight = loadingImg.getBoundingClientRect().height;\n    let loadingImgStrech = (viewportHeight + 1.4 * aligningThirdDiv)/loadingImgInitialHeight;\n    loadingImg.style.transform = `scaleY(${loadingImgStrech})`;\n    \n  }\n\n  defineValueFromPorcentage = (percentage, total) => {\n    let value = (percentage * total) / 100;\n    return value;\n  };\n\n  toggleEN = () => {\n    this.setState({\n      toggleEN: !this.state.toggleEN\n    })\n  }\n\n  render() {\n\n    let {mockData, viewportWidth, cmsData} = this.state;\n\n    if(!cmsData || !this.state.loaded){\n      return (\n        <div\n          style={{backgroundColor: \"#EBFF00\"}}\n          className=\"loading_screen\">\n        </div>\n      )\n    }\n\n    if(viewportWidth > 1224){\n      return (\n        <div>\n          <Desktop\n            toggleEN={this.toggleEN}\n            {...this.state}/>\n        </div>\n      );\n    }else{\n      return (\n        <div>\n          <Mobile\n            toggleEN={this.toggleEN}\n            {...this.state}/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n",["65","66"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/index.js",[],["67","68"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/SvgSection.js",["69","70","71","72"],"import React from \"react\";\nimport \"./App.css\";\n\nclass SvgSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      loopCounter: 0,\n      remainingScroll: null,\n      translateYPercent: null,\n      originalImageStretch: null\n    };\n  }\n  componentDidMount() {\n\n    let props = this.props;\n    if(props.index === props.counter){\n      document.addEventListener(\"scroll\", this.scrollHandler);\n    }else{\n      return;\n    }\n  }\n\n\n  handleImageLoaded = () => {\n\n    let props = this.props;\n\n    // get the scrollHeight and viewportHeight;\n    let scrollHeight = this.props.scrollHeight;\n    let viewportHeight = this.props.viewportHeight;\n\n    // no need to repeat?\n    let index = this.props.index;\n    let divID = `container_div_${index}`;\n\n    // retrieve the imgContainer and img;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n\n\n    let imageOriginalHeight = img.getBoundingClientRect().height;\n    let originalImageStretch = viewportHeight/imageOriginalHeight;\n    imgContainer.style.height = viewportHeight + \"px\";\n    img.style.transform = `scaleY(${originalImageStretch})`;\n\n      this.setState({\n        loaded: true,\n        originalImageStretch,\n        imgContainer,\n        img\n      })\n\n  };\n\n  scrollHandler = () => {\n\n    let state = this.state;\n    let props = this.props;\n\n    if (!state.loaded) {\n      return;\n    }\n\n    let imgContainer = state.imgContainer;\n    let img = state.img;\n    let body = document.body.parentNode;\n\n    let bodyScroll = (\n      body.scrollTop || body.scrollTop)\n      / (body.scrollHeight - body.clientHeight\n    ) * 100;\n\n    let remainingScroll = 100 - bodyScroll;\n    console.log(remainingScroll, \"remainingScroll: will be fed into the translateYPercentDesc : this , state.originalImageStretch\");\n\n    let translateYPercentDesc = this.definePorcentage(\n        remainingScroll, state.originalImageStretch\n    );\n    console.log(\"------\");\n    console.log(translateYPercentDesc, \"translateYPercentDesc: to apply to the scaleY\");\n\n\n    let translateYPercentDescNumbered = Number(translateYPercentDesc);\n\n\n      img.style.transform = `scaleY(${translateYPercentDesc})`;\n      let newImgContainerHeight = img.getBoundingClientRect().height;\n      imgContainer.style.height = newImgContainerHeight + \"px\";\n  };\n\n   definePorcentage = (percent, total) => {\n        return ((percent/ 100) * total).toFixed(2)\n    }\n\n\n\n  render() {\n    if(!this.props){\n      return null;\n    }\n\n  let index = this.props.index;\n  let divID = `container_div_${index}`;\n\n\n    return (\n        <div className=\"main_vertical_container_inner\">\n          <div id={divID}>\n            <img\n              onLoad={this.handleImageLoaded}\n              src=\"https://bit.ly/3nXBlMo\"\n              alt=\"XXI\"\n            />\n          </div>\n          <div className=\"text_container\">\n            <h1>SvgSection</h1>\n            <p>fvdfv</p>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default SvgSection;\n",["73","74"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/reportWebVitals.js",[],["75","76"],"/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/Mobile.js",["77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94"],"import React from \"react\";\nimport { AnimateKeyframes }  from 'react-simple-animate';\nimport {SlideDown} from 'react-slidedown';\nimport ScrollSnap from 'scroll-snap'\nimport 'react-slidedown/lib/slidedown.css';\nimport ReactHtmlParser from 'react-html-parser';\nimport ScrollDirection from '@anakinyuen/scroll-direction';\nimport mockData from \"./mock_data.js\";\nimport \"./App.css\";\n\n\nclass Mobile extends React.Component {\n    constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      toggleEN: false,\n      selectedlan: \"fr\",\n      animDirection: null,\n      isTriggeredInfoContent: false,\n      numberOfPixelScrolled: 0,\n      margin: 0,\n      counter: 0,\n      selectedDivId: 0,\n      scrollDirection: null,\n      updatedHeightOfPage: null,\n      viewportHeight: null,\n      viewportWidth: null,\n      mockData: null,\n      dataToDivs: null,\n      mainCmsDataSubArrays: null,\n      originalImageHeight: null,\n      originalImageStretch: null,\n      originalImageHeightArray: [],\n      originalImageStretchArray: [],\n      originalImageRatioArray: [],\n      textDivSizeArray: [],\n      screenHeightValuesArray: [],\n      divsLastFold: null,\n      resetTextDivs: false,\n    };\n  }\n\n  componentDidMount() {\n\n    setTimeout(() => {\n      this.setState({\n        loaded: true\n      });\n    }, 1200);\n\n    // this.bindScrollSnap()\n    document.addEventListener(\"scroll\", this.scrollHandler);\n    window.addEventListener(\"resize\", this.resizeHandler);\n\n    let viewportHeight = window.innerHeight;\n    let viewportWidth = window.innerWidth;\n    let {cmsData} = this.props;\n    let mainCmsData = cmsData.slice(0, 9);\n    let infoCmsData = cmsData.slice(9, 14);\n\n    // Init the state here;\n    let updatedHeightOfPage = viewportHeight;\n\n    this.setState({\n      updatedHeightOfPage,\n      viewportHeight,\n      viewportWidth,\n      mockData,\n      mainCmsData,\n      infoCmsData\n    })\n  }\n\n  toggleEN = () => {\n    this.setState({\n      toggleEN: !this.state.toggleEN,\n      dataToDivs: null\n    }, () => {\n      if(this.state.toggleEN){\n        this.setState({\n          selectedlan: \"en\"\n        })\n      }else{\n        this.setState({\n          selectedlan: \"fr\"\n        })\n      }\n    })\n  }\n\n  handleImageLoadedLoadingScreen = (imgID, index) => {\n\n    const {\n      originalImageStretch, \n      originalImageStretchArray, \n      viewportWidth\n    } = this.state;\n\n    \n    let img = document.getElementById(imgID);\n\n    let originalImageHeight = img.getBoundingClientRect().width;\n    let loadingImgStrech = (viewportWidth/originalImageHeight)*1.02;\n\n\n    img.animate(\n      [\n        { transform: `rotateZ(90deg) translate(100%) scaleY(${loadingImgStrech})` },\n        { transform: `rotateZ(90deg) translate(100%) scaleY(1)` },\n      ], {\n        duration: 1500,\n        easing: \"ease\",\n      }\n    );\n  }\n\n\n\n  resizeHandler = () => {\n\n    const {\n        selectedDivId,\n        originalImageStretchArray,\n        counter\n      } = this.state;\n\n      let imgMobileContainer = [...document.getElementsByClassName('img_mobile_container')];\n      let imgMobile = [...document.getElementsByClassName(\"img_mobile\")];\n      let viewportHeight = window.innerHeight;\n\n      imgMobileContainer.map((ele, index) => {\n        ele.style.height = `${viewportHeight/2}px`;\n      })\n      imgMobile.map((ele, index) => {\n        ele.style.width = `${viewportHeight/2}px`;\n      })\n\n      if(window.innerHeight !== this.state.viewportHeight){\n        this.setState({\n          viewportHeight: viewportHeight,\n          originalImageWidth: viewportHeight/2\n        })\n      }\n\n    }\n\n  \n  renderInfo = () => {\n    return (\n      <div className=\"info_main_container\">\n         {this.renderInfoCTA()}\n         {this.renderBodyCTA()}\n      </div>\n    )\n  }\n\n  renderInfoCTA = () => {\n    return (\n      <div className=\"cta_desktop_container\">\n      <div\n         className=\"info_cta_container\"\n         onClick={this.triggerInfoContent}\n         style={this.infoCTAStyle()}>\n           <img src=\"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1612842534/paprika%20-%20very%20interesting/Croix.svg\" />\n      </div>\n      <div\n       onClick={this.toggleEN}\n       className=\"en_cta\">\n         <span>\n           {this.toggleENText()}\n         </span>\n      </div>\n      </div>\n    )\n  };\n\n  toggleENText = () => {\n    if(this.state.toggleEN){\n      return \"FR\"\n    }else{\n      return \"EN\"\n    }\n  }\n\n  triggerInfoContent = () => {\n    this.setState({\n      isTriggeredInfoContent: !this.state.isTriggeredInfoContent\n    })\n  }\n\n  infoCTAStyle = () => {\n    if(!this.state.isTriggeredInfoContent){\n      return {\n        transform: \"rotate(0deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.4s\"\n      }\n    }else{\n      return {\n        transform: \"rotate(135deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.4s\"\n      }\n    }\n  };\n\n  renderBodyCTA = () => {\n\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    if(!this.state.isTriggeredInfoContent){\n      return null;\n    }\n\n    return (\n      <SlideDown className={'my-dropdown-slidedown'}>\n      <div className=\"info_body_container\">\n         <div className=\"info_body_container_headline\">\n           <h1>{infoCmsData[0][selectedLanHeadlines]}</h1>\n         </div>\n         <div className=\"info_body_container_ctas\">\n           <h1>{infoCmsData[0][selectedLanPara]}</h1>\n           <div className=\"info_body_container_ctas_spans\">\n               <a\n                 href={\"tel:\" + infoCmsData[1][selectedLanPara]}\n                 rel=\"noopener\"\n                 target=\"_blank\">\n               <span id=\"body\">\n                 {infoCmsData[1][selectedLanHeadlines]}\n               </span>\n               </a>\n               <a\n                 href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n                 rel=\"noopener\"\n                 target=\"_blank\">\n               <span>\n                 {infoCmsData[2][selectedLanHeadlines]}\n               </span>\n               </a>\n               <a\n                 href={infoCmsData[3][selectedLanPara]}\n                 rel=\"noopener\"\n                 target=\"_blank\">\n               <span>\n                 {infoCmsData[3][selectedLanHeadlines]}\n               </span>\n               </a>\n           </div>\n         </div>\n         <div\n           onClick={this.triggerInfoContent}\n           className=\"body_cta_background_close\">\n         </div>\n      </div>\n      </SlideDown>\n    )\n  };\n\n  renderDataToDivsLoading = () => {\n \n    let styleImg1 = {\n      transform: `rotateZ(90deg) translate(100%) scaleY(1)`,\n      width: `${this.state.viewportHeight}px`\n    };\n\n    return (\n      <div className=\"loader_vertical_container_mobile\">\n        <div>\n          <img\n            id=\"loading_img_1\"\n            className=\"loading_img\"\n            style={styleImg1}\n            onLoad={() => this.handleImageLoadedLoadingScreen(\"loading_img_1\", 0)}\n            src={mockData.loadingImg[0].img}\n          />\n        </div>\n      </div>\n    )\n      \n  }\n\n  renderTextSimplerVersion = () => {\n\n    const {\n      loaded, \n      mainCmsData, \n      selectedlan,\n      infoCmsData\n    } = this.state;\n\n    if(!mainCmsData \n      || !loaded){\n      return null;\n    }\n\n    let selectedLanPara = `paragraph_${selectedlan}`;\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let simplerVersionCopy = mainCmsData.slice(0, 9);\n    let simplerVersionCopyMaped = simplerVersionCopy\n    .map((ele, index) => {\n\n      let id = `vertical_text_content_${index}`;\n\n\n      if(index === 0){\n        return (\n          <section id={id} \n          className=\"section vertical_text_content\">\n            <div className=\"slideInUp\">\n              <h1>{ReactHtmlParser(ele[selectedLanHeadlines])}</h1>\n              <p>{ReactHtmlParser(ele[selectedLanPara])}</p>\n            </div>\n          </section>\n        )\n      }else{\n        return (\n          <section id={id} className=\"section vertical_text_content\">\n            <div>\n              <h1>{ReactHtmlParser(ele[selectedLanHeadlines])}</h1>\n              <p>{ReactHtmlParser(ele[selectedLanPara])}</p>\n            </div>\n          </section>\n        )\n      }\n    })\n\n    return(\n      <main className=\"vertical_content_main\">\n        <div className=\"snap_section\">\n          {simplerVersionCopyMaped}\n          <footer className=\"section\">\n            <div className=\"vertical_text_content footer_mobile\">\n              <h1>{infoCmsData[4][selectedLanHeadlines]}</h1>\n              <a\n                href={\"tel:\" + infoCmsData[1][selectedLanPara]}\n                rel=\"noopener\"\n                target=\"_blank\">\n              <span>\n                {infoCmsData[1][selectedLanHeadlines]}\n              </span>\n              </a>\n                <a\n                  href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n                  rel=\"noopener\"\n                  target=\"_blank\">\n                <span>\n                  {infoCmsData[2][selectedLanHeadlines]}\n                </span>\n                </a>\n                <a\n                  href={infoCmsData[3][selectedLanPara]}\n                  rel=\"noopener\"\n                  target=\"_blank\">\n                <span>\n                  {infoCmsData[3][selectedLanHeadlines]}\n                </span>\n                </a>\n                <div className=\"copyright\">\n                  <p>« VERY INTERESTING » ©2021</p>\n                </div>\n                  </div>\n            </footer>\n        </div> \n      </main>\n    )\n  }\n\n  \n  render() {\n\n    const {\n      mainCmsData\n    } = this.state;\n\n    if(!mainCmsData){\n      return null;\n    }\n\n    return (\n      <main>\n        {this.renderDataToDivsLoading()}\n        {this.renderInfo()}\n        {this.renderTextSimplerVersion()}\n    </main>\n      \n    )\n  }\n}\n\nexport default Mobile;","/Users/cyrus/Documents/Commissioned/Paprika - Very interesting/my-app/src/mock_data.js",["95"],"\nconst mock_data = module.exports = {\n  entriesImgDesktop: [\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1618381696/paprika%20-%20very%20interesting/svg_6/very.svg\"},\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1618381695/paprika%20-%20very%20interesting/svg_6/ntere.svg\"},\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1618381695/paprika%20-%20very%20interesting/svg_6/sting.svg\"},\n  ],\n  entriesMobile: [\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1612818874/paprika%20-%20very%20interesting/M01VERYINTE_v3.svg\"},\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1610211325/paprika%20-%20very%20interesting/M02RESTING.svg\"},\n  ],\n  loadingImg: [\n    {img: \"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1613353861/paprika%20-%20very%20interesting/VERYINTERESTING.svg\"}\n  ],\n};\n",["96","97"],{"ruleId":"98","severity":1,"message":"99","line":104,"column":7,"nodeType":"100","messageId":"101","endLine":104,"endColumn":20},{"ruleId":"98","severity":1,"message":"102","line":105,"column":7,"nodeType":"100","messageId":"101","endLine":105,"endColumn":13},{"ruleId":"103","severity":1,"message":"104","line":149,"column":36,"nodeType":"105","messageId":"106","endLine":149,"endColumn":38},{"ruleId":"103","severity":1,"message":"104","line":153,"column":35,"nodeType":"105","messageId":"106","endLine":153,"endColumn":37},{"ruleId":"103","severity":1,"message":"104","line":166,"column":36,"nodeType":"105","messageId":"106","endLine":166,"endColumn":38},{"ruleId":"103","severity":1,"message":"104","line":170,"column":35,"nodeType":"105","messageId":"106","endLine":170,"endColumn":37},{"ruleId":"103","severity":1,"message":"104","line":204,"column":36,"nodeType":"105","messageId":"106","endLine":204,"endColumn":38},{"ruleId":"103","severity":1,"message":"104","line":208,"column":35,"nodeType":"105","messageId":"106","endLine":208,"endColumn":37},{"ruleId":"98","severity":1,"message":"107","line":295,"column":11,"nodeType":"100","messageId":"101","endLine":295,"endColumn":16},{"ruleId":"98","severity":1,"message":"108","line":296,"column":11,"nodeType":"100","messageId":"101","endLine":296,"endColumn":23},{"ruleId":"103","severity":1,"message":"109","line":441,"column":31,"nodeType":"105","messageId":"110","endLine":441,"endColumn":33},{"ruleId":"103","severity":1,"message":"104","line":445,"column":13,"nodeType":"111","messageId":"112","endLine":445,"endColumn":20},{"ruleId":"98","severity":1,"message":"113","line":698,"column":15,"nodeType":"100","messageId":"101","endLine":698,"endColumn":28},{"ruleId":"98","severity":1,"message":"114","line":808,"column":11,"nodeType":"100","messageId":"101","endLine":808,"endColumn":35},{"ruleId":"115","severity":1,"message":"116","line":886,"column":11,"nodeType":"117","endLine":886,"endColumn":135},{"ruleId":"118","severity":1,"message":"119","line":942,"column":13,"nodeType":"117","endLine":942,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":953,"column":17,"nodeType":"122","endLine":953,"endColumn":32},{"ruleId":"120","severity":1,"message":"121","line":960,"column":17,"nodeType":"122","endLine":960,"endColumn":32},{"ruleId":"98","severity":1,"message":"123","line":980,"column":9,"nodeType":"100","messageId":"101","endLine":980,"endColumn":24},{"ruleId":"118","severity":1,"message":"119","line":1015,"column":13,"nodeType":"117","endLine":1015,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":1027,"column":15,"nodeType":"122","endLine":1027,"endColumn":30},{"ruleId":"120","severity":1,"message":"121","line":1034,"column":15,"nodeType":"122","endLine":1034,"endColumn":30},{"ruleId":"98","severity":1,"message":"124","line":1052,"column":7,"nodeType":"100","messageId":"101","endLine":1052,"endColumn":22},{"ruleId":"98","severity":1,"message":"125","line":5,"column":8,"nodeType":"100","messageId":"101","endLine":5,"endColumn":18},{"ruleId":"98","severity":1,"message":"126","line":109,"column":10,"nodeType":"100","messageId":"101","endLine":109,"endColumn":18},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"127","replacedBy":"131"},{"ruleId":"129","replacedBy":"132"},{"ruleId":"98","severity":1,"message":"133","line":28,"column":9,"nodeType":"100","messageId":"101","endLine":28,"endColumn":14},{"ruleId":"98","severity":1,"message":"134","line":31,"column":9,"nodeType":"100","messageId":"101","endLine":31,"endColumn":21},{"ruleId":"98","severity":1,"message":"133","line":60,"column":9,"nodeType":"100","messageId":"101","endLine":60,"endColumn":14},{"ruleId":"98","severity":1,"message":"135","line":85,"column":9,"nodeType":"100","messageId":"101","endLine":85,"endColumn":38},{"ruleId":"127","replacedBy":"136"},{"ruleId":"129","replacedBy":"137"},{"ruleId":"127","replacedBy":"138"},{"ruleId":"129","replacedBy":"139"},{"ruleId":"98","severity":1,"message":"140","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":26},{"ruleId":"98","severity":1,"message":"141","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":18},{"ruleId":"98","severity":1,"message":"142","line":7,"column":8,"nodeType":"100","messageId":"101","endLine":7,"endColumn":23},{"ruleId":"98","severity":1,"message":"143","line":95,"column":7,"nodeType":"100","messageId":"101","endLine":95,"endColumn":27},{"ruleId":"98","severity":1,"message":"144","line":96,"column":7,"nodeType":"100","messageId":"101","endLine":96,"endColumn":32},{"ruleId":"98","severity":1,"message":"113","line":123,"column":9,"nodeType":"100","messageId":"101","endLine":123,"endColumn":22},{"ruleId":"98","severity":1,"message":"144","line":124,"column":9,"nodeType":"100","messageId":"101","endLine":124,"endColumn":34},{"ruleId":"98","severity":1,"message":"145","line":125,"column":9,"nodeType":"100","messageId":"101","endLine":125,"endColumn":16},{"ruleId":"103","severity":1,"message":"104","line":132,"column":43,"nodeType":"105","messageId":"106","endLine":132,"endColumn":45},{"ruleId":"103","severity":1,"message":"104","line":135,"column":34,"nodeType":"105","messageId":"106","endLine":135,"endColumn":36},{"ruleId":"115","severity":1,"message":"116","line":165,"column":12,"nodeType":"117","endLine":165,"endColumn":136},{"ruleId":"120","severity":1,"message":"121","line":232,"column":18,"nodeType":"122","endLine":232,"endColumn":33},{"ruleId":"120","severity":1,"message":"121","line":240,"column":18,"nodeType":"122","endLine":240,"endColumn":33},{"ruleId":"120","severity":1,"message":"121","line":248,"column":18,"nodeType":"122","endLine":248,"endColumn":33},{"ruleId":"115","severity":1,"message":"116","line":274,"column":11,"nodeType":"117","endLine":280,"endColumn":13},{"ruleId":"120","severity":1,"message":"121","line":342,"column":17,"nodeType":"122","endLine":342,"endColumn":32},{"ruleId":"120","severity":1,"message":"121","line":350,"column":19,"nodeType":"122","endLine":350,"endColumn":34},{"ruleId":"120","severity":1,"message":"121","line":358,"column":19,"nodeType":"122","endLine":358,"endColumn":34},{"ruleId":"98","severity":1,"message":"146","line":2,"column":7,"nodeType":"100","messageId":"101","endLine":2,"endColumn":16},{"ruleId":"127","replacedBy":"147"},{"ruleId":"129","replacedBy":"148"},"no-unused-vars","'viewportWidth' is assigned a value but never used.","Identifier","unusedVar","'loaded' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'divId' is assigned a value but never used.","'imgContainer' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","'selectedDivId' is assigned a value but never used.","'translateYPorcentageDown' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'selectedLanPara' is assigned a value but never used.","'scrollDirection' is assigned a value but never used.","'SvgSection' is defined but never used.","'mockData' is assigned a value but never used.","no-native-reassign",["149"],"no-negated-in-lhs",["150"],["149"],["150"],"'props' is assigned a value but never used.","'scrollHeight' is assigned a value but never used.","'translateYPercentDescNumbered' is assigned a value but never used.",["149"],["150"],["149"],["150"],"'AnimateKeyframes' is defined but never used.","'ScrollSnap' is defined but never used.","'ScrollDirection' is defined but never used.","'originalImageStretch' is assigned a value but never used.","'originalImageStretchArray' is assigned a value but never used.","'counter' is assigned a value but never used.","'mock_data' is assigned a value but never used.",["149"],["150"],"no-global-assign","no-unsafe-negation"]