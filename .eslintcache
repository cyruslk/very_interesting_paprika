[{"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/App.js":"1","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/TextComponent.js":"2","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/reportWebVitals.js":"3","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/index.js":"4","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/SvgSection.js":"5","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/mock_data.js":"6","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/Desktop.js":"7","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/Mobile.js":"8"},{"size":3309,"mtime":1614969605694,"results":"9","hashOfConfig":"10"},{"size":224,"mtime":1608650548095,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1608610226311,"results":"12","hashOfConfig":"10"},{"size":500,"mtime":1608610226310,"results":"13","hashOfConfig":"10"},{"size":3055,"mtime":1609936305537,"results":"14","hashOfConfig":"10"},{"size":3371,"mtime":1615218474650,"results":"15","hashOfConfig":"10"},{"size":28956,"mtime":1615219025942,"results":"16","hashOfConfig":"10"},{"size":28410,"mtime":1615048149139,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"19vwpco",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/App.js",["39","40"],"import React from \"react\";\nimport Tabletop from \"tabletop\";\nimport Desktop from \"./Desktop.js\";\nimport Mobile from \"./Mobile.js\";\nimport SvgSection from \"./SvgSection.js\"\nimport mock_data from \"./mock_data.js\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewportWidth: null,\n      mockData: mock_data,\n      loaded: false,\n      cmsData: null,\n      toggleEN: false,\n      mainCmsDataFR: null,\n      mainCmsDataEN: null\n    };\n  }\n\n  componentDidMount(){\n\n    setTimeout(() => {\n      this.setState({\n        loaded: true\n      });\n    });\n\n    document.addEventListener('gesturestart', function (e) {\n        e.preventDefault();\n    });\n\n      Tabletop.init({\n      key: '1N5WFhAZpqz6Spgr6pQowDRJLmr_Ni99_sh95TCArGQ8',\n      callback: googleData => {\n        this.setState({\n          cmsData: googleData\n        }, () => {\n\n          let {cmsData} = this.state;\n          let mainCmsDataFR = cmsData\n          .slice(0, 9)\n          .map((ele, index) => {\n            return {\n              headlines: ele.headlines_fr,\n              paragraph: ele.paragraph_fr\n            }\n          })\n\n          let mainCmsDataEN = cmsData\n          .slice(0, 9)\n          .map((ele, index) => {\n            return {\n              headlines: ele.headlines_en,\n              paragraph: ele.paragraph_en\n            }\n          })\n\n          this.setState({\n            mainCmsDataFR,\n            mainCmsDataEN\n          })\n\n        })\n      },\n      simpleSheet: true\n    })\n\n\n    window.addEventListener(\"resize\", this.resizeHandler);\n    let viewportWidth = window.innerWidth;\n\n    this.setState({\n      viewportWidth\n    });\n  }\n\n\n  resizeHandler = () => {\n\n    let viewportWidth = window.innerWidth;\n    this.setState({\n      viewportWidth\n    });\n  }\n\n  handleImageLoadedLoadingScreen = () => {\n\n    let viewportHeight = window.innerHeight;\n\n    let aligningThirdDiv = this.defineValueFromPorcentage(2, viewportHeight);\n    let loadingImg = document.getElementById(\"loading_img\");\n    let loadingImgInitialHeight = loadingImg.getBoundingClientRect().height;\n    let loadingImgStrech = (viewportHeight + 1.4 * aligningThirdDiv)/loadingImgInitialHeight;\n    loadingImg.style.transform = `scaleY(${loadingImgStrech})`;\n\n    // loadingImg.animate(\n    //   [\n    //     { transform: `scaleY(1)` },\n    //     { transform: `scaleY(${loadingImgStrech})` },\n    //   ], {\n    //     duration: 500,\n    //   }\n    // );\n  }\n\n  defineValueFromPorcentage = (percentage, total) => {\n    let value = (percentage * total) / 100;\n    return value;\n  };\n\n  toggleEN = () => {\n    this.setState({\n      toggleEN: !this.state.toggleEN\n    })\n  }\n\n  render() {\n\n    let {mockData, viewportWidth, cmsData} = this.state;\n\n    if(!cmsData || !this.state.loaded){\n      return (\n        <div\n          style={{backgroundColor: \"#EBFF00\"}}\n          className=\"loading_screen\">\n        </div>\n      )\n    }\n\n    if(viewportWidth > 600){\n      return (\n        <div>\n          <Desktop\n            toggleEN={this.toggleEN}\n            {...this.state}/>\n        </div>\n      );\n    }else{\n      return (\n        <div>\n          <Mobile\n            toggleEN={this.toggleEN}\n            {...this.state}/>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/TextComponent.js",[],"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/reportWebVitals.js",[],["41","42"],"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/index.js",[],["43","44"],"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/SvgSection.js",["45","46","47","48"],"import React from \"react\";\nimport \"./App.css\";\n\nclass SvgSection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: false,\n      loopCounter: 0,\n      remainingScroll: null,\n      translateYPercent: null,\n      originalImageStretch: null\n    };\n  }\n  componentDidMount() {\n\n    let props = this.props;\n    if(props.index === props.counter){\n      document.addEventListener(\"scroll\", this.scrollHandler);\n    }else{\n      return;\n    }\n  }\n\n\n  handleImageLoaded = () => {\n\n    let props = this.props;\n\n    // get the scrollHeight and viewportHeight;\n    let scrollHeight = this.props.scrollHeight;\n    let viewportHeight = this.props.viewportHeight;\n\n    // no need to repeat?\n    let index = this.props.index;\n    let divID = `container_div_${index}`;\n\n    // retrieve the imgContainer and img;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n\n\n    let imageOriginalHeight = img.getBoundingClientRect().height;\n    let originalImageStretch = viewportHeight/imageOriginalHeight;\n    imgContainer.style.height = viewportHeight + \"px\";\n    img.style.transform = `scaleY(${originalImageStretch})`;\n\n      this.setState({\n        loaded: true,\n        originalImageStretch,\n        imgContainer,\n        img\n      })\n\n  };\n\n  scrollHandler = () => {\n\n    let state = this.state;\n    let props = this.props;\n\n    if (!state.loaded) {\n      return;\n    }\n\n    let imgContainer = state.imgContainer;\n    let img = state.img;\n    let body = document.body.parentNode;\n\n    let bodyScroll = (\n      body.scrollTop || body.scrollTop)\n      / (body.scrollHeight - body.clientHeight\n    ) * 100;\n\n    let remainingScroll = 100 - bodyScroll;\n    console.log(remainingScroll, \"remainingScroll: will be fed into the translateYPercentDesc : this , state.originalImageStretch\");\n\n    let translateYPercentDesc = this.definePorcentage(\n        remainingScroll, state.originalImageStretch\n    );\n    console.log(\"------\");\n    console.log(translateYPercentDesc, \"translateYPercentDesc: to apply to the scaleY\");\n\n\n    let translateYPercentDescNumbered = Number(translateYPercentDesc);\n\n\n      img.style.transform = `scaleY(${translateYPercentDesc})`;\n      let newImgContainerHeight = img.getBoundingClientRect().height;\n      imgContainer.style.height = newImgContainerHeight + \"px\";\n  };\n\n   definePorcentage = (percent, total) => {\n        return ((percent/ 100) * total).toFixed(2)\n    }\n\n\n\n  render() {\n    if(!this.props){\n      return null;\n    }\n\n  let index = this.props.index;\n  let divID = `container_div_${index}`;\n\n\n    return (\n        <div className=\"main_vertical_container_inner\">\n          <div id={divID}>\n            <img\n              onLoad={this.handleImageLoaded}\n              src=\"https://bit.ly/3nXBlMo\"\n              alt=\"XXI\"\n            />\n          </div>\n          <div className=\"text_container\">\n            <h1>SvgSection</h1>\n            <p>fvdfv</p>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default SvgSection;\n","/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/mock_data.js",["49"],"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/Desktop.js",["50","51","52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70"],"/Users/cyrus/Documents/Paprika - Very interesting/my-app/src/Mobile.js",["71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110"],"import React from \"react\";\nimport {SlideDown} from 'react-slidedown';\nimport 'react-slidedown/lib/slidedown.css';\nimport ReactHtmlParser from 'react-html-parser';\nimport ScrollDirection from '@anakinyuen/scroll-direction';\nimport mockData from \"./mock_data.js\";\nimport \"./App.css\";\n\n\nclass Mobile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaded: true,\n      toggleEN: false,\n      selectedlan: \"fr\",\n      animDirection: null,\n      isTriggeredInfoContent: false,\n      numberOfPixelScrolled: 0,\n      resetTextDivs: false,\n      margin: 0,\n      counter: 0,\n      selectedDivId: 0,\n      scrollDirection: null,\n      updatedHeightOfPage: null,\n      viewportHeight: null,\n      viewportWidth: null,\n      mockData: null,\n      dataToDivs: null,\n      mainCmsDataSubArrays: null,\n      originalImageHeight: null,\n      originalImageStretch: null,\n      originalImageStretchArray: [],\n      originalImageHeightArray: [],\n      textDivSizeArray: [],\n      screenHeightValuesArray: [],\n      scalingCoeffStart: 482/471,\n      scalingCoeffEnd: 1.15,\n      divsLastFold: null,\n      resetTextDivs: false\n    };\n  }\n\n\n  componentDidMount(){\n\n\n    // removing for now;\n    // setTimeout(() => {\n    //   this.setState({\n    //     loaded: true\n    //   });\n    // }, 60000);\n\n\n     document.addEventListener(\"scroll\", this.scrollHandler);\n     window.addEventListener(\"resize\", this.resizeHandler);\n\n     let viewportHeight = window.innerHeight;\n     let viewportWidth = window.innerWidth;\n     let {cmsData} = this.props;\n     let mainCmsData = cmsData.slice(0, 9);\n     let infoCmsData = cmsData.slice(9, 14);\n\n     // Init the state here;\n     let updatedHeightOfPage = viewportHeight*12.05;\n     document.body.style.height = `${updatedHeightOfPage}px`;\n\n\n     this.setState({\n       updatedHeightOfPage,\n       viewportHeight,\n       viewportWidth,\n       mockData,\n       mainCmsData,\n       infoCmsData\n     }, () => {\n\n      let mockDataText = this.state.mockData.entriesText;\n      let {mainCmsData} = this.state;\n\n       let mainCmsDataSubArrays = [\n           mainCmsData.slice(0, 2),\n           mainCmsData.slice(2, 4),\n           mainCmsData.slice(4, 9),\n       ];\n\n       this.setState({\n         mainCmsDataSubArrays\n       }, () => {\n         this.renderDataToDivs(this.state.selectedlan);\n       })\n     })\n  };\n\n\n  componentDidUpdate(prevProps, prevState) {\n\n    let firstImg = document.querySelector(`#container_mobile_text_0 img`);\n    let firstContainer = document.getElementById(\"container_mobile_text_0\");\n\n    const {originalImageStretch, viewportHeight, loaded} = this.state;\n\n\n    if(!window.pageYOffset\n      && firstImg\n      && originalImageStretch\n      && viewportHeight){\n        firstImg.style.transform = `scaleY(${originalImageStretch})`;\n        firstContainer.style.height = `${this.state.viewportHeight}px`;\n    }\n\n    //updating th view based on the viewPort;\n    let selectedDivId = this.state.selectedDivId;\n    let counter = this.state.counter;\n    let resetTextDivs = this.state.resetTextDivs;\n    let selectedlan = this.state.selectedlan;\n    let infoCmsData = this.state.infoCmsData;\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    if(selectedlan !== prevState.selectedlan){\n      window.scrollTo(0, 0);\n      setTimeout(() => {\n        this.resizeHandler();\n      }, 50);\n    };\n\n    // Updating these divs;\n    let imgMobileContainer = [...document.getElementsByClassName('img_mobile_container')];\n    let imgMobile = [...document.getElementsByClassName(\"img_mobile\")];\n    let divTextH1 = [...document.getElementsByClassName('div_text_h1')];\n    let divTextP = [...document.getElementsByClassName('div_text_p')];\n\n    let mainCmsDataSubArrays = this.state.mainCmsDataSubArrays;\n\n    // updating the data;\n    if (counter !== prevState.counter) {\n      if(counter >= 0 && counter < 4){\n        this.setState({\n          vertical: false,\n          resetTextDivs: false\n        })\n\n        let textSubArray = mainCmsDataSubArrays[0];\n\n        divTextH1.map((ele, index) => {\n         ele.innerHTML = textSubArray[index][selectedLanHeadlines]\n        })\n         divTextP.map((ele, index) => {\n           ele.innerHTML = textSubArray[index][selectedLanPara]\n         })\n      }\n      if(counter >= 4 && counter < 8){\n        this.setState({\n          vertical: false,\n          resetTextDivs: false\n        })\n\n        let verticalContentArray =  mainCmsDataSubArrays[2];\n        let divsLastFold = verticalContentArray.map((ele, index) => {\n          let id = `vertical_text_content_${index}`\n          return (\n            <div id={id}\n                className=\"vertical_text_content\">\n              <h1>{ReactHtmlParser(ele[selectedLanHeadlines])}</h1>\n              <p>{ReactHtmlParser(ele[selectedLanPara])}</p>\n            </div>\n          )\n\n\n        })\n\n        let textWidth = document\n        .getElementById(\"container_mobile_text_0\")\n        .getBoundingClientRect().width;\n\n\n        let renderVerticalAnimationDivContainer = () => {\n          let styling = {\n            width: `${textWidth}px`,\n            left: `-${textWidth}px`\n          }\n          return (\n            <div\n              style={styling}\n              id=\"vertical_div_main_container\">\n               {divsLastFold}\n               <div className=\"vertical_text_content footer_mobile\">\n\n                <h1>{infoCmsData[4][selectedLanHeadlines]}</h1>\n\n                <a\n                  href={\"tel:\" + infoCmsData[1][selectedLanPara]}\n                  rel=\"noopener\"\n                  target=\"_blank\">\n                <span>\n                  {infoCmsData[1][selectedLanHeadlines]}\n                </span>\n                </a>\n\n                 <a\n                   href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n                   rel=\"noopener\"\n                   target=\"_blank\">\n                 <span>\n                   {infoCmsData[2][selectedLanHeadlines]}\n                 </span>\n                 </a>\n\n                 <a\n                   href={infoCmsData[3][selectedLanPara]}\n                   rel=\"noopener\"\n                   target=\"_blank\">\n                 <span>\n                   {infoCmsData[3][selectedLanHeadlines]}\n                 </span>\n                 </a>\n\n                  <div className=\"footer_mobile_cta\">\n                    <p>« VERY INTERESTING » ©2021</p>\n                 </div>\n               </div>\n            </div>\n          )\n        }\n\n        this.setState({\n          divsLastFold: renderVerticalAnimationDivContainer()\n        })\n\n\n        let textSubArray = mainCmsDataSubArrays[1]\n        divTextH1.map((ele, index) => {\n          if(index === 0){\n            ele.innerHTML = \"<br /><br />\" + textSubArray[index][selectedLanHeadlines];\n          }else{\n            ele.innerHTML = textSubArray[index][selectedLanHeadlines]\n          }\n        })\n         divTextP.map((ele, index) => {\n           ele.innerHTML = textSubArray[index][selectedLanPara]\n         })\n      }\n\n      if(counter >= 8 && counter < 12.05){\n        this.setState({\n          vertical: true,\n          resetTextDivs: true\n        })\n      }\n    };\n\n    // resizing the divs here;\n    if(selectedDivId !== prevState.selectedDivId){\n\n      let animDirection = this.state.animDirection\n      let textDivSize = this.state.textDivSizeArray[1];\n      let originalImageStretchArray = this.state.originalImageStretchArray;\n\n      if(animDirection === \"down\"){\n        if(selectedDivId === 0){\n\n\n          let divID = `container_mobile_div_${1}`;\n          let divIDText = `container_mobile_text_${1}`;\n          let imgScale = originalImageStretchArray[1];\n          let imgContainer = document.querySelector(`#${divID}`);\n          let img = document.querySelector(`#${divID} img`);\n\n          let divText = document.querySelector(`#${divIDText}`);\n\n          divText.style.left = `-${textDivSize}px`\n          img.style.transform = `rotateZ(90deg) translate(100%) scaleY(${imgScale*0.9})`;\n\n\n        }\n        if(selectedDivId === 1){\n\n          let divID = `container_mobile_div_${0}`;\n          let divIDText = `container_mobile_text_${0}`;\n          let imgScale = originalImageStretchArray[0];\n          let imgContainer = document.querySelector(`#${divID}`);\n          let img = document.querySelector(`#${divID} img`);\n          let divText = document.querySelector(`#${divIDText}`);\n\n\n          divText.style.left = `-${textDivSize}px`\n          img.style.transform = `rotateZ(90deg) translate(100%) scaleY(${imgScale*0.9})`;\n\n        }\n      }\n\n      if(animDirection === \"up\"){\n\n        if(selectedDivId === 0){\n\n          let divID = `container_mobile_div_${1}`;\n          let divIDText = `container_mobile_text_${1}`;\n          let imgScale = originalImageStretchArray[1];\n          let imgContainer = document.querySelector(`#${divID}`);\n          let img = document.querySelector(`#${divID} img`);\n\n          let divText = document.querySelector(`#${divIDText}`);\n\n          divText.style.left = `-${textDivSize}px`\n          //  Adjusting the width here;\n          img.style.transform = `rotateZ(90deg) translate(100%) scaleY(8)`;\n\n        }\n        if(selectedDivId === 1){\n\n          let divID = `container_mobile_div_${0}`;\n          let divIDText = `container_mobile_text_${0}`;\n          let imgScale = originalImageStretchArray[0];\n          let imgContainer = document.querySelector(`#${divID}`);\n          let img = document.querySelector(`#${divID} img`);\n          let divText = document.querySelector(`#${divIDText}`);\n\n          divText.style.left = `-${textDivSize}px`\n          img.style.transform = `rotateZ(90deg) translate(100%) scaleY(9)`;\n\n        }\n      }\n    }\n  };\n\n\n  toggleEN = () => {\n    this.setState({\n      toggleEN: !this.state.toggleEN,\n      dataToDivs: null\n    }, () => {\n      if(this.state.toggleEN){\n        this.setState({\n          selectedlan: \"en\"\n        }, () => {\n          this.renderDataToDivs(this.state.selectedlan)\n        })\n      }else{\n        this.setState({\n          selectedlan: \"fr\"\n        }, () => {\n          this.renderDataToDivs(this.state.selectedlan)\n        })\n      }\n    })\n  }\n\n\n  handleImageLoadedLoadingScreen = () => {\n\n    let viewportHeight = this.state.viewportHeight;\n    let aligningThirdDiv = this.defineValueFromPorcentage(2, viewportHeight);\n    let loadingImg = document.getElementsByClassName(\"loading_img\");\n    let loadingImgInitialHeight = loadingImg[0].getBoundingClientRect().height;\n\n    let loadingImgStrech = (viewportHeight + 1.4 * aligningThirdDiv)/loadingImgInitialHeight;\n\n    // loadingImg.animate(\n    //   [\n    //     { transform: `scaleY(1)` },\n    //     { transform: `scaleY(${loadingImgStrech})` },\n    //     { transform: `scaleY(1)` },\n    //   ], {\n    //     duration: 1500,\n    //   }\n    // );\n\n  }\n\n\n   // Render the data to divs;\n   renderDataToDivs = () => {\n\n     // Mapping through the mockData; to be changed;\n      let mockData = this.state.mockData;\n      let mainCmsDataSubArraysFirstRow = this.state.mainCmsDataSubArrays[0];\n\n      let selectedLanHeadlines = `headlines_${this.state.selectedlan}`;\n      let selectedLanPara = `paragraph_${this.state.selectedlan}`;\n\n      let dataToDivs = mockData.entriesMobile.map((ele, index) => {\n\n        let divID = `container_mobile_div_${index}`;\n        let divIDText = `container_mobile_text_${index}`;\n        let divIDH1 = `container_mobile_div_h1_${index}`;\n        let divIP = `container_mobile_div_p_${index}`;\n\n        return (\n          <div\n            id={divID}\n            style={{height: `${this.state.viewportHeight/2-this.state.margin}px`}}\n            className=\"img_mobile_container\">\n              <div\n                  id={divIDText}\n                  className=\"mobile_text_content\">\n                    <h1 className=\"div_text_h1\">\n                      {ReactHtmlParser(mainCmsDataSubArraysFirstRow[index].headlines)}\n                    </h1>\n                    <p className=\"div_text_p\">\n                      {ReactHtmlParser(mainCmsDataSubArraysFirstRow[index].description)}\n                    </p>\n              </div>\n                {this.renderImg(ele, divID, divIDText, index)}\n          </div>\n        )\n      })\n      this.setState({\n        dataToDivs\n      })\n  };\n\n  // optimize;\n  renderImg = (ele, divID, divIDText, index) => {\n    if(index === 0){\n      let style = {\n        width: `${this.state.viewportHeight/2}px`,\n        transform: `rotateZ(90deg) translate(100%) scaleY(1)`\n      }\n\n      return (\n        <img\n          className=\"img_mobile\"\n          style={style}\n          onLoad={() => {this.handleImageLoaded(divID, divIDText, index)}}\n          alt={ele.img}\n          src={ele.img}\n        />\n      )\n    }else{\n\n      let style = {\n        width: `${this.state.viewportHeight/2-this.state.margin}px`,\n        transform: `rotateZ(90deg) translate(100%) scaleY(1)`\n      }\n      return (\n        <img\n          className=\"img_mobile\"\n          style={style}\n          onLoad={() => {this.handleImageLoaded(divID, divIDText, index)}}\n          alt={ele.img}\n          src={ele.img}\n        />\n      )\n    }\n  }\n\n\n  resizeHandler = () => {\n\n      let imgMobileContainer = [...document.getElementsByClassName('img_mobile_container')];\n      let imgMobile = [...document.getElementsByClassName(\"img_mobile\")];\n      let viewportHeight = window.innerHeight;\n\n\n      imgMobileContainer.map((ele, index) => {\n        ele.style.height = `${viewportHeight/2}px`;\n      })\n      imgMobile.map((ele, index) => {\n        ele.style.width = `${viewportHeight/2}px`;\n      })\n    }\n\n\n  handleImageLoaded = (divID, divIDText, index) => {\n\n    this.setState({\n      loaded: true\n    }, () => {\n\n      let viewportWidth = this.state.viewportWidth;\n      let imgContainer = document.querySelector(`#${divID}`);\n      let img = document.querySelector(`#${divID} img`);\n      let divText = document.querySelector(`#${divIDText}`);\n      let originalImageHeight = img.getBoundingClientRect().width;\n      let originalImageStretch = viewportWidth/originalImageHeight;\n      let textDivSize = viewportWidth-originalImageHeight;\n\n      this.setState({\n        originalImageHeight,\n        originalImageStretch,\n        textDivSizeArray: [...this.state.textDivSizeArray, textDivSize],\n        originalImageHeightArray: [...this.state.originalImageHeightArray, originalImageHeight],\n        originalImageStretchArray: [...this.state.originalImageStretchArray, originalImageStretch]\n     }, () => {\n\n       divText.style.width = `${textDivSize - 40}px`;\n       divText.style.left = `-${textDivSize - this.state.margin}px`;\n\n       let originalImageStretchArray = this.state.originalImageStretchArray;\n\n       // why it goes on the first and not the second;\n       if(index === 0){\n         img.style.transform = `\n           rotateZ(90deg)\n           translate(100%)\n           scaleY(${originalImageStretchArray[index]})\n         `;\n       }else{\n\n         let scalingCoeffStart = this.state.scalingCoeffStart;\n         img.style.transform = `\n           rotateZ(90deg)\n           translate(100%)\n           scaleY(${originalImageStretchArray[1]*scalingCoeffStart})\n         `;\n       }\n\n     })\n   })\n  }\n\n\n  scrollHandler = (event) => {\n\n\n    if(!this.state.originalImageStretch){\n      return null;\n    }\n\n    let numberOfPixelScrolled = window.scrollY;\n    // fix the wheeldelta;\n\n    let viewportHeight = this.state.viewportHeight;\n\n    if (numberOfPixelScrolled > 0\n      && numberOfPixelScrolled < viewportHeight) {\n\n\n        this.setState({\n          counter: 0,\n          selectedDivId: 0,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight\n      && numberOfPixelScrolled < viewportHeight*2) {\n\n\n        this.setState({\n          counter: 1,\n          selectedDivId: 0,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*2\n      && numberOfPixelScrolled < viewportHeight*3) {\n\n        this.setState({\n          counter: 2,\n          selectedDivId: 1,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*3\n      && numberOfPixelScrolled < viewportHeight*4) {\n\n        this.setState({\n          counter: 3,\n          selectedDivId: 1,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*4\n      && numberOfPixelScrolled < viewportHeight*5) {\n\n        this.setState({\n          counter: 4,\n          selectedDivId: 0,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*5\n      && numberOfPixelScrolled < viewportHeight*6) {\n\n        this.setState({\n          counter: 5,\n          selectedDivId: 0,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*6\n      && numberOfPixelScrolled < viewportHeight*7) {\n\n        this.setState({\n          counter: 6,\n          selectedDivId: 1,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"up\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*7\n      && numberOfPixelScrolled < viewportHeight*8) {\n\n        this.setState({\n          counter: 7,\n          selectedDivId: 1,\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          this.handleAnimation(counter, selectedDivId, \"down\");\n        })\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*8\n      && numberOfPixelScrolled < viewportHeight*9) {\n\n        this.setState({\n          counter: 8,\n          vertical: true,\n          selectedDivId: 0,\n        }, () => {\n\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n\n          this.handleAnimation(counter, 0, \"up\");\n          this.handleAnimation(counter, 1, \"up\");\n          this.handleVerticalHanimation(counter, \"horizontal\");\n\n        })\n\n    }\n\n    if (numberOfPixelScrolled > viewportHeight*9\n      && numberOfPixelScrolled < viewportHeight*13) {\n\n\n        // here, I need to calculate the distance that will be scrolled;\n        // from viewPort*9 to viewportHeight*12\n        let distanceToScroll = (viewportHeight*13 - viewportHeight*9);\n\n        this.setState({\n          counter: 9,\n          selectedDivId: 0,\n          vertical: true,\n\n        }, () => {\n          let counter = this.state.counter;\n          let selectedDivId = this.state.selectedDivId;\n          // I'm sending this distanceToScroll to my function\n          this.handleVerticalHanimation(12, \"vertical\", distanceToScroll, [9, 12]);\n        })\n    }\n\n  };\n\n\n  handleAnimation = (counter, selectedDivId, animDirection, single) => {\n\n    this.setState({\n      animDirection\n    })\n\n    // div for img;\n    let divID = `container_mobile_div_${selectedDivId}`;\n    let imgContainer = document.querySelector(`#${divID}`);\n    let img = document.querySelector(`#${divID} img`);\n    // div for text;\n    let divTextID = `container_mobile_text_${selectedDivId}`;\n    let divText = document.querySelector(`#${divTextID}`);\n\n\n    let numberOfPixelScrolled = window.scrollY;\n    let viewportHeight = this.state.viewportHeight;\n    let originalImageStretch = this.state.originalImageStretch;\n\n    let scrolledPorcentage = this.definePorcentage(\n     (numberOfPixelScrolled - this.state.counter * viewportHeight),\n     viewportHeight)\n   ;\n\n   let remainingScrollPorcentage = 100-scrolledPorcentage;\n\n   let translateYPorcentageUp = this.defineValueFromPorcentage(\n       remainingScrollPorcentage,\n       originalImageStretch\n   );\n\n   let translateYPorcentageDown = this.defineValueFromPorcentage(\n       scrolledPorcentage,\n       originalImageStretch\n   );\n\n   let textLeftUp = this.defineValueFromPorcentage(\n       remainingScrollPorcentage,\n       this.state.textDivSizeArray[1]\n   );\n\n   let textLeftDown = this.defineValueFromPorcentage(\n       scrolledPorcentage,\n       this.state.textDivSizeArray[1]\n   );\n\n    if(animDirection === \"up\"){\n\n\n      if(selectedDivId === 0){\n\n        let originalImageHeightArray = this.state.originalImageHeightArray;\n        let scalingCoeffEnd = this.state.scalingCoeffEnd;\n        let scalingCoeffEndFirstDiv = translateYPorcentageUp*scalingCoeffEnd;\n\n        img.style.transform = `\n         rotateZ(90deg)\n         translate(100%)\n         scaleY(${scalingCoeffEndFirstDiv})`;\n\n         if(!this.state.vertical){\n           divText.style.left = `-${textLeftUp}px`\n         }else{\n           divText.style.left = \"-289.703px\"\n         }\n\n          if(translateYPorcentageUp < 1){\n\n            img.style.transform = `\n                 rotateZ(90deg)\n                 translate(100%)\n                 scaleY(${1*scalingCoeffEnd})`;\n\n\n           if(!this.state.vertical){\n             divText.style.left = `0vw`;\n           }else{\n             divText.style.left = \"-289.703px\"\n           }\n\n        }\n      }\n\n      if(selectedDivId === 1){\n\n        img.style.transform = `\n         rotateZ(90deg)\n         translate(100%)\n         scaleY(${translateYPorcentageUp})`;\n\n\n         if(!this.state.vertical){\n           divText.style.left = `-${textLeftUp}px`\n         }else{\n           divText.style.left = \"-289.703px\"\n         }\n\n          if(translateYPorcentageUp < 1){\n\n            img.style.transform = `\n                 rotateZ(90deg)\n                 translate(100%)\n                 scaleY(1)`;\n\n\n           if(!this.state.vertical){\n             divText.style.left = `0vw`;\n           }else{\n             divText.style.left = \"-289.703px\"\n           }\n          }\n      }\n\n    }\n    if(animDirection === \"down\"){\n\n      img.style.transform = `\n           rotateZ(90deg)\n           translate(100%)\n           scaleY(${translateYPorcentageDown})\n       `;\n\n      divText.style.left = `-${textLeftDown}px`\n\n      if(translateYPorcentageDown < 1){\n        img.style.transform = `\n             rotateZ(90deg)\n             translate(100%)\n             scaleY(1)\n         `;\n         divText.style.left = `0vw`\n      }\n    }\n   }\n\n\n   handleVerticalHanimation = (counter, slideDirection, distanceToScroll, counterToMakeTranslation) => {\n\n     let verticalDiv = document.getElementById(\"vertical_div_main_container\");\n     let verticalDivHeight = verticalDiv.getBoundingClientRect().height;\n\n     let numberOfPixelScrolled = window.scrollY;\n     let viewportHeight = this.state.viewportHeight;\n\n     if(slideDirection === \"horizontal\"){\n\n       let scrolledPorcentage = this.definePorcentage(\n         (numberOfPixelScrolled - this.state.counter * viewportHeight),\n         viewportHeight)\n       ;\n\n       let remainingScrollPorcentage = 100-scrolledPorcentage;\n\n       let textLeftUp = this.defineValueFromPorcentage(\n           remainingScrollPorcentage,\n           this.state.textDivSizeArray[1]\n       );\n\n       verticalDiv.style.left = `-${textLeftUp}px`;\n\n     }else{\n\n       // 2.8?\n       let scrolledPorcentageVertical = this.definePorcentage(\n          (numberOfPixelScrolled - 9 * viewportHeight),\n          viewportHeight*2.8)\n        ;\n\n      verticalDiv.style.left = \"0px\";\n      verticalDiv.style.transform = `translateY(-${scrolledPorcentageVertical}%)`\n\n     }\n   }\n\n\n  definePorcentage = (percent, total) => {\n      let porcentage = (percent/total)*100;\n      return porcentage\n   }\n\n  defineValueFromPorcentage = (percentage, total) => {\n    let value =  ((percentage * total)/100);\n    return value;\n  }\n\n  renderVerticalAnimation = () => {\n    if(!this.state.vertical){\n      return null;\n    }\n    return this.state.divsLastFold;\n  };\n\n\n  renderInfo = () => {\n    return (\n      <div className=\"info_main_container\">\n         {this.renderInfoCTA()}\n         {this.renderBodyCTA()}\n      </div>\n    )\n  }\n\n\n  renderInfoCTA = () => {\n    return (\n      <div className=\"cta_desktop_container\">\n      <div\n         className=\"info_cta_container\"\n         onClick={this.triggerInfoContent}\n         style={this.infoCTAStyle()}>\n           <img src=\"https://res.cloudinary.com/www-c-t-l-k-com/image/upload/v1612842534/paprika%20-%20very%20interesting/Croix.svg\" />\n      </div>\n      <div\n       onClick={this.toggleEN}\n       className=\"en_cta\">\n         <span>\n           {this.toggleENText()}\n         </span>\n      </div>\n      </div>\n    )\n  };\n\n  toggleENText = () => {\n    if(this.state.toggleEN){\n      return \"FR\"\n    }else{\n      return \"EN\"\n    }\n  }\n\n\n  triggerInfoContent = () => {\n    this.setState({\n      isTriggeredInfoContent: !this.state.isTriggeredInfoContent\n    })\n  }\n\n  infoCTAStyle = () => {\n    if(!this.state.isTriggeredInfoContent){\n      return {\n        transform: \"rotate(0deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.4s\"\n      }\n    }else{\n      return {\n        transform: \"rotate(135deg)\",\n        transitionTimingFunction: \"ease-in-out\",\n        transition: \"0.4s\"\n      }\n    }\n  };\n\n  renderBodyCTA = () => {\n\n    let {infoCmsData} = this.state;\n    let {selectedlan} = this.state;\n\n    let selectedLanHeadlines = `headlines_${selectedlan}`;\n    let selectedLanPara = `paragraph_${selectedlan}`;\n\n    if(!this.state.isTriggeredInfoContent){\n      return null;\n    }\n\n    return (\n      <SlideDown className={'my-dropdown-slidedown'}>\n      <div className=\"info_body_container\">\n         <div className=\"info_body_container_headline\">\n           <h1>{infoCmsData[0][selectedLanHeadlines]}</h1>\n         </div>\n         <div className=\"info_body_container_ctas\">\n           <h1>{infoCmsData[0][selectedLanPara]}</h1>\n           <div className=\"info_body_container_ctas_spans\">\n               <a\n                 href={\"tel:\" + infoCmsData[1][selectedLanPara]}\n                 rel=\"noopener\"\n                 target=\"_blank\">\n               <span id=\"body\">\n                 {infoCmsData[1][selectedLanHeadlines]}\n               </span>\n               </a>\n               <a\n                 href={\"mailto:\" + infoCmsData[2][selectedLanPara]}\n                 rel=\"noopener\"\n                 target=\"_blank\">\n               <span>\n                 {infoCmsData[2][selectedLanHeadlines]}\n               </span>\n               </a>\n               <a\n                 href={infoCmsData[3][selectedLanPara]}\n                 rel=\"noopener\"\n                 target=\"_blank\">\n               <span>\n                 {infoCmsData[3][selectedLanHeadlines]}\n               </span>\n               </a>\n           </div>\n         </div>\n         <div\n           onClick={this.triggerInfoContent}\n           className=\"body_cta_background_close\">\n         </div>\n      </div>\n      </SlideDown>\n    )\n  };\n\n\n  render() {\n    if(!this.state.dataToDivs){\n      return null;\n    };\n\n    if (!this.state.loaded) {\n      return (\n        <div className=\"loading_content\">\n          <img\n            className=\"loading_img\"\n            onLoad={this.handleImageLoadedLoadingScreen}\n            src={mockData.entriesMobile[0].img} />\n            <img\n              className=\"loading_img\"\n              onLoad={this.handleImageLoadedLoadingScreen}\n              src={mockData.entriesMobile[1].img} />\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"main_vertical_container_mobile\">\n          {this.state.dataToDivs}\n          {this.renderVerticalAnimation()}\n          {this.renderInfo()}\n      </div>\n    );\n  }\n}\n\nexport default Mobile;\n",{"ruleId":"111","severity":1,"message":"112","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":18},{"ruleId":"111","severity":1,"message":"115","line":122,"column":10,"nodeType":"113","messageId":"114","endLine":122,"endColumn":18},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"116","replacedBy":"120"},{"ruleId":"118","replacedBy":"121"},{"ruleId":"111","severity":1,"message":"122","line":28,"column":9,"nodeType":"113","messageId":"114","endLine":28,"endColumn":14},{"ruleId":"111","severity":1,"message":"123","line":31,"column":9,"nodeType":"113","messageId":"114","endLine":31,"endColumn":21},{"ruleId":"111","severity":1,"message":"122","line":60,"column":9,"nodeType":"113","messageId":"114","endLine":60,"endColumn":14},{"ruleId":"111","severity":1,"message":"124","line":85,"column":9,"nodeType":"113","messageId":"114","endLine":85,"endColumn":38},{"ruleId":"111","severity":1,"message":"125","line":1,"column":7,"nodeType":"113","messageId":"114","endLine":1,"endColumn":16},{"ruleId":"111","severity":1,"message":"126","line":88,"column":50,"nodeType":"113","messageId":"114","endLine":88,"endColumn":56},{"ruleId":"127","severity":1,"message":"128","line":121,"column":36,"nodeType":"129","messageId":"130","endLine":121,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":125,"column":35,"nodeType":"129","messageId":"130","endLine":125,"endColumn":37},{"ruleId":"127","severity":1,"message":"128","line":137,"column":36,"nodeType":"129","messageId":"130","endLine":137,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":141,"column":35,"nodeType":"129","messageId":"130","endLine":141,"endColumn":37},{"ruleId":"127","severity":1,"message":"128","line":164,"column":36,"nodeType":"129","messageId":"130","endLine":164,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":168,"column":35,"nodeType":"129","messageId":"130","endLine":168,"endColumn":37},{"ruleId":"127","severity":1,"message":"131","line":303,"column":31,"nodeType":"129","messageId":"132","endLine":303,"endColumn":33},{"ruleId":"111","severity":1,"message":"133","line":324,"column":9,"nodeType":"113","messageId":"114","endLine":324,"endColumn":14},{"ruleId":"111","severity":1,"message":"134","line":331,"column":9,"nodeType":"113","messageId":"114","endLine":331,"endColumn":21},{"ruleId":"111","severity":1,"message":"135","line":592,"column":15,"nodeType":"113","messageId":"114","endLine":592,"endColumn":28},{"ruleId":"111","severity":1,"message":"136","line":702,"column":18,"nodeType":"113","messageId":"114","endLine":702,"endColumn":43},{"ruleId":"137","severity":1,"message":"138","line":828,"column":11,"nodeType":"139","endLine":828,"endColumn":135},{"ruleId":"140","severity":1,"message":"141","line":886,"column":13,"nodeType":"139","endLine":886,"endColumn":16},{"ruleId":"142","severity":1,"message":"143","line":898,"column":17,"nodeType":"144","endLine":898,"endColumn":32},{"ruleId":"142","severity":1,"message":"143","line":905,"column":17,"nodeType":"144","endLine":905,"endColumn":32},{"ruleId":"111","severity":1,"message":"145","line":925,"column":9,"nodeType":"113","messageId":"114","endLine":925,"endColumn":24},{"ruleId":"140","severity":1,"message":"141","line":960,"column":13,"nodeType":"139","endLine":960,"endColumn":16},{"ruleId":"142","severity":1,"message":"143","line":972,"column":15,"nodeType":"144","endLine":972,"endColumn":30},{"ruleId":"142","severity":1,"message":"143","line":979,"column":15,"nodeType":"144","endLine":979,"endColumn":30},{"ruleId":"137","severity":1,"message":"138","line":996,"column":11,"nodeType":"139","endLine":999,"endColumn":48},{"ruleId":"111","severity":1,"message":"146","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":23},{"ruleId":"147","severity":1,"message":"148","line":40,"column":7,"nodeType":"149","messageId":"150","endLine":40,"endColumn":20},{"ruleId":"111","severity":1,"message":"151","line":79,"column":11,"nodeType":"113","messageId":"114","endLine":79,"endColumn":23},{"ruleId":"111","severity":1,"message":"126","line":102,"column":50,"nodeType":"113","messageId":"114","endLine":102,"endColumn":56},{"ruleId":"111","severity":1,"message":"152","line":116,"column":9,"nodeType":"113","messageId":"114","endLine":116,"endColumn":22},{"ruleId":"111","severity":1,"message":"153","line":130,"column":9,"nodeType":"113","messageId":"114","endLine":130,"endColumn":27},{"ruleId":"111","severity":1,"message":"154","line":131,"column":9,"nodeType":"113","messageId":"114","endLine":131,"endColumn":18},{"ruleId":"127","severity":1,"message":"128","line":147,"column":36,"nodeType":"129","messageId":"130","endLine":147,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":150,"column":36,"nodeType":"129","messageId":"130","endLine":150,"endColumn":38},{"ruleId":"142","severity":1,"message":"143","line":196,"column":19,"nodeType":"144","endLine":196,"endColumn":34},{"ruleId":"142","severity":1,"message":"143","line":205,"column":20,"nodeType":"144","endLine":205,"endColumn":35},{"ruleId":"142","severity":1,"message":"143","line":214,"column":20,"nodeType":"144","endLine":214,"endColumn":35},{"ruleId":"127","severity":1,"message":"128","line":234,"column":36,"nodeType":"129","messageId":"130","endLine":234,"endColumn":38},{"ruleId":"127","severity":1,"message":"128","line":241,"column":36,"nodeType":"129","messageId":"130","endLine":241,"endColumn":38},{"ruleId":"111","severity":1,"message":"134","line":268,"column":15,"nodeType":"113","messageId":"114","endLine":268,"endColumn":27},{"ruleId":"111","severity":1,"message":"134","line":283,"column":15,"nodeType":"113","messageId":"114","endLine":283,"endColumn":27},{"ruleId":"111","severity":1,"message":"155","line":300,"column":15,"nodeType":"113","messageId":"114","endLine":300,"endColumn":23},{"ruleId":"111","severity":1,"message":"134","line":301,"column":15,"nodeType":"113","messageId":"114","endLine":301,"endColumn":27},{"ruleId":"111","severity":1,"message":"155","line":315,"column":15,"nodeType":"113","messageId":"114","endLine":315,"endColumn":23},{"ruleId":"111","severity":1,"message":"134","line":316,"column":15,"nodeType":"113","messageId":"114","endLine":316,"endColumn":27},{"ruleId":"111","severity":1,"message":"156","line":358,"column":9,"nodeType":"113","messageId":"114","endLine":358,"endColumn":25},{"ruleId":"111","severity":1,"message":"157","line":380,"column":11,"nodeType":"113","messageId":"114","endLine":380,"endColumn":31},{"ruleId":"111","severity":1,"message":"145","line":381,"column":11,"nodeType":"113","messageId":"114","endLine":381,"endColumn":26},{"ruleId":"111","severity":1,"message":"158","line":387,"column":13,"nodeType":"113","messageId":"114","endLine":387,"endColumn":20},{"ruleId":"111","severity":1,"message":"159","line":388,"column":13,"nodeType":"113","messageId":"114","endLine":388,"endColumn":18},{"ruleId":"127","severity":1,"message":"128","line":457,"column":43,"nodeType":"129","messageId":"130","endLine":457,"endColumn":45},{"ruleId":"127","severity":1,"message":"128","line":460,"column":34,"nodeType":"129","messageId":"130","endLine":460,"endColumn":36},{"ruleId":"111","severity":1,"message":"134","line":473,"column":11,"nodeType":"113","messageId":"114","endLine":473,"endColumn":23},{"ruleId":"111","severity":1,"message":"135","line":644,"column":15,"nodeType":"113","messageId":"114","endLine":644,"endColumn":28},{"ruleId":"111","severity":1,"message":"160","line":668,"column":15,"nodeType":"113","messageId":"114","endLine":668,"endColumn":22},{"ruleId":"111","severity":1,"message":"135","line":669,"column":15,"nodeType":"113","messageId":"114","endLine":669,"endColumn":28},{"ruleId":"111","severity":1,"message":"134","line":686,"column":9,"nodeType":"113","messageId":"114","endLine":686,"endColumn":21},{"ruleId":"111","severity":1,"message":"161","line":729,"column":13,"nodeType":"113","messageId":"114","endLine":729,"endColumn":37},{"ruleId":"111","severity":1,"message":"162","line":817,"column":10,"nodeType":"113","messageId":"114","endLine":817,"endColumn":27},{"ruleId":"137","severity":1,"message":"138","line":888,"column":12,"nodeType":"139","endLine":888,"endColumn":136},{"ruleId":"142","severity":1,"message":"143","line":956,"column":18,"nodeType":"144","endLine":956,"endColumn":33},{"ruleId":"142","severity":1,"message":"143","line":964,"column":18,"nodeType":"144","endLine":964,"endColumn":33},{"ruleId":"142","severity":1,"message":"143","line":972,"column":18,"nodeType":"144","endLine":972,"endColumn":33},{"ruleId":"137","severity":1,"message":"138","line":997,"column":11,"nodeType":"139","endLine":1000,"endColumn":51},{"ruleId":"137","severity":1,"message":"138","line":1001,"column":13,"nodeType":"139","endLine":1004,"endColumn":53},"no-unused-vars","'SvgSection' is defined but never used.","Identifier","unusedVar","'mockData' is assigned a value but never used.","no-native-reassign",["163"],"no-negated-in-lhs",["164"],["163"],["164"],"'props' is assigned a value but never used.","'scrollHeight' is assigned a value but never used.","'translateYPercentDescNumbered' is assigned a value but never used.","'mock_data' is assigned a value but never used.","'loaded' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'ratio' is assigned a value but never used.","'imgContainer' is assigned a value but never used.","'selectedDivId' is assigned a value but never used.","'originalImageStretchArray' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'selectedLanPara' is assigned a value but never used.","'ScrollDirection' is defined but never used.","no-dupe-keys","Duplicate key 'resetTextDivs'.","ObjectExpression","unexpected","'mockDataText' is assigned a value but never used.","'resetTextDivs' is assigned a value but never used.","'imgMobileContainer' is assigned a value but never used.","'imgMobile' is assigned a value but never used.","'imgScale' is assigned a value but never used.","'loadingImgStrech' is assigned a value but never used.","'selectedLanHeadlines' is assigned a value but never used.","'divIDH1' is assigned a value but never used.","'divIP' is assigned a value but never used.","'counter' is assigned a value but never used.","'originalImageHeightArray' is assigned a value but never used.","'verticalDivHeight' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]